import streamlit as st
import pandas as pd
import openai
from langchain.llms import OpenAI
from langchain.chat_models import ChatOpenAI
from langchain.document_loaders import PyPDFLoader
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import FAISS
from langchain.chains import ConversationalRetrievalChain
from langchain.memory import ConversationBufferMemory
from markdown_pdf import MarkdownPdf, Section
from io import BytesIO
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
import datetime
import re
import base64
import random
import streamlit.components.v1 as components
from bs4 import BeautifulSoup
from streamlit_modal import Modal 
import os
import json
import pymongo
import bcrypt
from bson.objectid import ObjectId
from dotenv import load_dotenv
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import mimetypes
import stripe
from pymongo.errors import ServerSelectionTimeoutError, ConfigurationError, DuplicateKeyError
import matplotlib.pyplot as plt
import plotly.express as px
import logging
from authlib.integrations.requests_client import OAuth2Session
import streamlit_authenticator as stauth

import jwt
import datetime
from jwt import InvalidTokenError
from math import ceil

from typing import Union, List

import tiktoken


# Charger les variables d'environnement
load_dotenv()


# Configuration des Logs
logging.basicConfig(filename='app.log', level=logging.INFO,
                    format='%(asctime)s:%(levelname)s:%(message)s')


# Configuration MongoDB  ToV6fdovgdT89T66  knkjoseph

MONGO_URI=st.secrets["MONGO_URI"]

@st.cache_resource(show_spinner=False)
def get_mongo_client():
    try:
        client = pymongo.MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
        client.server_info()  # Force la connexion pour v√©rifier la disponibilit√©
        return client
    except ServerSelectionTimeoutError as err:
        logging.error(f"√âchec de la connexion √† MongoDB : {err}")
        # st.error(f"√âchec de la connexion √† MongoDB : {err}")
        return None
    except ConfigurationError as err:
        logging.error(f"Erreur de configuration MongoDB : {err}")
        # st.error(f"Erreur de configuration MongoDB : {err}")
        return None
    except Exception as err:
        logging.error(f"Erreur inattendue lors de la connexion √† MongoDB : {err}")
        # st.error(f"Erreur inattendue lors de la connexion √† MongoDB : {err}")
        return None

client = get_mongo_client()

if client is None:
    st.title("üö´ Connexion √† internet a √âchou√©e")
    st.error("Impossible de se connecter. Veuillez v√©rifier votre connexion Internet ou contacter l'administrateur.")
    if st.button("R√©essayer"):
        st.rerun()
    st.stop()  # Arr√™te l'ex√©cution pour √©viter les erreurs suivantes


db = client['ishai']
users_collection = db['users']
consumption_collection = db['token_consumption']
payments_collection = db['payments']

# Cr√©er un index unique sur l'email pour optimiser les recherches
# Cr√©er des index pour optimiser les recherches
# Cr√©er des index pour optimiser les recherches
try:
    users_collection.create_index("email", unique=True)
    payments_collection.create_index("user_id")
    payments_collection.create_index("timestamp")
except Exception as e:
    logging.error(f"Erreur lors de la cr√©ation des index : {e}")
    st.title("üö´ Connexion √† internet a √âchou√©e")
    st.error("Impossible de se connecter. Veuillez v√©rifier votre connexion Internet ou contacter l'administrateur.")
    if st.button("R√©essayer"):
        st.rerun()
    st.stop()    
    
SMTP_SERVER = st.secrets["SMTP_SERVER"]
SMTP_PORT = st.secrets["SMTP_PORT"]
EMAIL_ADDRESS = st.secrets["EMAIL_ADDRESS"]
EMAIL_PASSWORD = st.secrets["EMAIL_PASSWORD"]

# Configuration des param√®tres de pi√®ces jointes
MAX_ATTACHMENT_SIZE = 10 * 1024 * 1024  # 10 Mo
ALLOWED_EXTENSIONS = ['jpg', 'jpeg', 'png']

# Configuration Stripe
stripe.api_key = st.secrets["STRIPE_API_KEY"]
STRIPE_PUBLIC_KEY = st.secrets["STRIPE_PUBLIC_KEY"]

# Informations Administrateur
ADMIN_PASSWORD = st.secrets["ADMIN_PASSWORD"]
ADMIN_EMAIL = st.secrets["ADMIN_EMAIL"]

# Configuration Google OAuth
GOOGLE_CLIENT_ID = st.secrets["GOOGLE_CLIENT_ID"]
GOOGLE_CLIENT_SECRET = st.secrets["GOOGLE_CLIENT_SECRET"]
GOOGLE_AUTHORIZATION_ENDPOINT = st.secrets["GOOGLE_AUTHORIZATION_ENDPOINT"]
GOOGLE_TOKEN_ENDPOINT = st.secrets["GOOGLE_TOKEN_ENDPOINT"]
GOOGLE_USERINFO_ENDPOINT = st.secrets["GOOGLE_USERINFO_ENDPOINT"]

# Configuration JWT
JWT_SECRET_KEY = st.secrets["JWT_SECRET_KEY"]
JWT_ALGORITHM = st.secrets["JWT_ALGORITHM"]
JWT_EXP_DELTA_SECONDS = st.secrets["JWT_EXP_DELTA_SECONDS"]

# Gestion des Tokens
DEFAULT_TOKENS_PURCHASED = st.secrets["DEFAULT_TOKENS_PURCHASED"]
TOKEN_NUMBER = st.secrets["TOKEN_NUMBER"]


# Configuration de l'API OpenAI
api_key = st.secrets["API_KEY"]
openai.api_key = api_key




   
    
    
def load_credentials_from_mongo():
    """
    R√©cup√®re les utilisateurs depuis MongoDB et les formate pour streamlit-authenticator.
    """
    credentials_dict = {"usernames": {}}

    try:
        # Extraire tous les utilisateurs depuis la base
        all_users = list(users_collection.find())
        for user in all_users:
            # V√©rifie les champs n√©cessaires
            email = user.get("email")
            nom = user.get("nom", "Utilisateur")
            hashed_password = user.get("mot_de_passe", "")
            role = user.get("role", "user")

            if not email or not hashed_password:
                # Ignore les utilisateurs incomplets
                continue

            # Ajoute l'utilisateur au dictionnaire de credentials
            credentials_dict["usernames"][email] = {
                "name": nom,
                "password": hashed_password,
                "email": email,
                "role": [role],  # Enveloppe dans une liste pour la compatibilit√©
            }

    except Exception as e:
        #st.error(f"Erreur lors du chargement des credentials depuis MongoDB¬†: {e}")
        st.title("üö´ Connexion √† internet a √âchou√©e")
        st.error("Impossible de se connecter. Veuillez v√©rifier votre connexion Internet ou contacter l'administrateur.")
        if st.button("R√©essayer"):
            st.rerun()
        st.stop()

    return credentials_dict





# ---------------------- FONCTIONS TOKEN COUNTER ----------------------
@st.cache_resource(show_spinner=False)
def get_encoding_for_model(model_name: str):
    """
    Retourne l'encodage appropri√© pour un mod√®le donn√©.
    Si le mod√®le n'est pas reconnu, utilise 'cl100k_base' par d√©faut.
    """
    try:
        encoding = tiktoken.encoding_for_model(model_name)
    except KeyError:
        st.warning(f"Mod√®le '{model_name}' non reconnu. Utilisation de l'encodage 'cl100k_base' par d√©faut.")
        encoding = tiktoken.get_encoding("cl100k_base")
    return encoding

def count_tokens(texts: Union[str, List[str]], model_name: str) -> Union[int, List[int]]:
    """
    Compte le nombre de tokens dans une cha√Æne de texte ou une liste de cha√Ænes de texte.

    Args:
        texts (str ou List[str]): Le(s) texte(s) √† compter.
        model_name (str): Le nom du mod√®le OpenAI pour d√©terminer l'encodage.

    Returns:
        int ou List[int]: Le nombre de tokens pour chaque texte.
    """
    encoding = get_encoding_for_model(model_name)
    
    if isinstance(texts, list):
        return [len(encoding.encode(text)) for text in texts]
    else:
        return len(encoding.encode(texts))




# ----------------------------------------------------------------------------
# Business Model 
# ----------------------------------------------------------------------------
def update_nom_produit(index_produit):
    # Mettre √† jour le nom du produit dans st.session_state
    st.session_state["produits_data"][index_produit]["nom_produit"] = st.session_state[f"nom_produit_{index_produit}"]
    # Forcer la r√©ex√©cution de l'application pour mettre √† jour le selectbox
    st.rerun()


def collect_persona_pme(index_produit):
    """
    Collecte et/ou met √† jour les informations de la Persona
    pour le produit index_produit, en g√©rant 3 types :
    B2C, B2B et M√©nage.
    """

    st.subheader("Persona")

    # R√©cup√©ration du dictionnaire produit et de son sous-dictionnaire "persona"
    produit = st.session_state["produits_data"][index_produit]
    persona_data = produit.get("persona", {})
    
        # Formulaire d√©di√© √† la mise √† jour du nom du produit
    with st.form(key=f"form_{index_produit}"):
        col1, col2 = st.columns([4, 1])

        with col1:
            nom_produit = st.text_input(
                f"Nom du Produit (Index {index_produit+1}):",
                value=produit.get("nom_produit", f"Produit_{index_produit+1}"),
                key=f"nom_produit_{index_produit}"
            )

        with col2:
            st.write("")
            submit_button = st.form_submit_button("‚úÖ Valider")


        if submit_button:
            st.session_state["produits_data"][index_produit]["nom_produit"] = nom_produit
            st.success(f"Nom du produit mis √† jour‚ÄØ: {nom_produit}")
            st.rerun()
            # Optionnel : Maintenir la s√©lection actuelle
            # st.session_state["selected_idx_produit"] = index_produit

    # S√©lecteur du Type de Persona (hors du formulaire)
    type_persona = st.selectbox(
        "S√©lectionnez le type de Persona",
        ["B2C", "B2B", "M√©nage"],
        index=["B2C", "B2B", "M√©nage"].index(persona_data.get("type", "B2C")),
        key=f"type_persona_selectbox_{index_produit}"
    )
    #st.write(f"**Type de Persona s√©lectionn√© :** {type_persona}")

    # Mise √† jour du champ "type" dans le dictionnaire
    persona_data["type"] = type_persona


    # ----- CAS 1 : PERSONA B2C -----
    if type_persona == "B2C":
        st.subheader("Persona - B2C")

        # Donn√©es D√©mographiques B2C
        st.subheader("Donn√©es D√©mographiques")
        b2c_age = st.number_input(
            "√Çge (B2C)",
            min_value=18,
            max_value=100,
            value=persona_data.get("√¢ge", 18),
            key=f"b2c_age_{index_produit}",
            help=(
        "Entrez l'√¢ge du persona en ann√©es. "
        "Assurez-vous que l'√¢ge correspond au profil cible de votre produit ou service. "
        "Par exemple, si vous ciblez les jeunes adultes, un √¢ge entre 18 et 35 pourrait √™tre appropri√©."
    )
        )
        b2c_sexe = st.selectbox(
            "Sexe (B2C)",
            ["", "Homme", "Femme"],
            index=["","Homme","Femme"].index(persona_data.get("sexe","")) if persona_data.get("sexe","") in ["","Homme","Femme"] else 0,
            key=f"b2c_sexe_{index_produit}",
            help=(
        "S√©lectionnez le sexe du persona. "
        "Cela peut influencer les pr√©f√©rences et les comportements d'achat. "
        "Si le sexe du persona n'est pas pertinent pour votre produit, choisissez vide."
    )
        )
        b2c_localisation = st.text_input(
            "Localisation G√©ographique (ex: Goma, Rdcongo)",
            placeholder="Goma, Rdcongo",
            value=persona_data.get("localisation",""),
            key=f"b2c_localisation_{index_produit}",
            help=(
        "Indiquez la localisation g√©ographique du persona. "
        "Pr√©cisez la ville et le pays, par exemple 'Goma, Rdcongo'. "
        "Cette information aide √† comprendre les sp√©cificit√©s culturelles, √©conomiques et logistiques."
    )
        )
        b2c_education = st.text_input(
            "Niveau d'√âducation (B2C)",
            placeholder="Baccalaur√©at, Licence, Master, Doctorat, Autre",
            value=persona_data.get("√©ducation",""),
            key=f"b2c_education_{index_produit}",
            help=(
        "S√©lectionnez le niveau d'√©ducation atteint par le persona. "
        "Cela peut influencer le type de produits ou services auxquels il est expos√©, "
        "ses attentes en mati√®re de qualit√© et son pouvoir d'achat."
    )
            
        )
        b2c_profession = st.text_input(
            "Profession (B2C)",
            placeholder="Ex: Ing√©nieur, Designer",
            value=persona_data.get("profession",""),
            key=f"b2c_profession_{index_produit}",
            help=(
        "Entrez la profession actuelle du persona. "
        "Conna√Ætre la profession permet de mieux comprendre le quotidien, les besoins sp√©cifiques "
        "et le pouvoir d'achat du persona. Par exemple, un ing√©nieur pourrait avoir des besoins diff√©rents "
        "d'un designer."
    )
            
        )
        b2c_revenu = st.number_input(
            "Revenu Mensuel Moyen ($)",
            min_value=0.0,
            value=float(persona_data.get("revenu_moyen", 0.0)),
            key=f"b2c_revenu_{index_produit}",
            help=(
        "Entrez le revenu mensuel moyen du persona en dollars. "
        "Cette information est cruciale pour √©valuer le pouvoir d'achat et la sensibilit√© au prix. "
        "Assurez-vous que le revenu est r√©aliste par rapport au niveau d'√©ducation et √† la profession."
    )
        )

        st.subheader("Param√®tres Comportementaux (B2C)")
        b2c_sensibilite_prix = st.selectbox(
            "Sensibilit√© au Prix (B2C)",
            ["","Tr√®s Faible", "Faible", "Mod√©r√©e", "√âlev√©e", "Tr√®s √âlev√©e"],
            index=["","Tr√®s Faible", "Faible", "Mod√©r√©e", "√âlev√©e", "Tr√®s √âlev√©e"].index(persona_data.get("sensibilite_prix","")) if persona_data.get("sensibilite_prix","") in ["","Tr√®s Faible", "Faible", "Mod√©r√©e", "√âlev√©e", "Tr√®s √âlev√©e"] else 0,
            key=f"b2c_sensibilite_prix_{index_produit}",
            help=(
        "Indiquez la sensibilit√© au prix du persona. "
        "Un persona avec une 'Tr√®s √âlev√©e' sensibilit√© au prix privil√©giera les produits abordables, "
        "tandis qu'un persona avec une 'Tr√®s Faible' sensibilit√© pourrait privil√©gier la qualit√© ou la marque."
    )
            
        )
        b2c_frequence_achat = st.text_input(
            "Fr√©quence d'Achat (B2C)",
            placeholder="Rarement, Mensuellement, Hebdomadairement",
            value=persona_data.get("frequence_achat",""),
            key=f"b2c_frequence_achat_{index_produit}",
            help=(
            "S√©lectionnez la fr√©quence √† laquelle le persona ach√®te des produits ou services similaires. "
            "Cela permet d'estimer la r√©gularit√© des revenus et d'ajuster les strat√©gies marketing en cons√©quence."
        )
            
        )
        b2c_volume_achat = st.text_input(
            "Volume d'Achat (B2C)",
            value=persona_data.get("volume_achat",""),
            key=f"b2c_volume_achat_{index_produit}",
            help=(
        "Entrez le volume d'achat habituel du persona. "
        "Cela peut repr√©senter le nombre d'articles achet√©s par transaction ou la quantit√© totale d√©pens√©e. "
        "Cette information aide √† pr√©voir les besoins en stock et les campagnes de vente."
    )
            
        )
        b2c_perception_qualite = st.text_area(
            "Perception de la Qualit√© (B2C)",
            placeholder="D√©crivez la perception de la qualit√©...",
            value=persona_data.get("perception_qualite",""),
            key=f"b2c_perception_qualite_{index_produit}",
            help=(
        "D√©crivez comment le persona per√ßoit la qualit√© de votre produit ou service. "
        "Par exemple, le persona pourrait valoriser la durabilit√©, le design, ou la fonctionnalit√©. "
        "Comprendre cette perception aide √† aligner les caract√©ristiques du produit avec les attentes des clients."
    )
            
        )
        b2c_utilisation_tech = st.text_area(
            "Quelles technologies le client B2C utilise",
            placeholder="D√©crivez les technologies (smartphone, internet...)",
            value=persona_data.get("utilisation_tech",""),
            key=f"b2c_utilisation_tech_{index_produit}",
            help=(
        "D√©crivez les technologies auxquelles le persona a acc√®s. "
        "Cela inclut les appareils (Smartphone, ordinateur), la connectivit√© Internet, les plateformes sociales, etc. "
        "Ces informations sont essentielles pour d√©terminer les canaux de communication et de distribution appropri√©s."
    )
            
        )
        b2c_acces_transport = st.text_area(
            "Accessibilit√© (Transport) (B2C)",
            value=persona_data.get("acces_transport",""),
            key=f"b2c_acces_transport_{index_produit}",
            help=(
        "D√©crivez les moyens de transport que le persona utilise r√©guli√®rement. "
        "Cela peut influencer la logistique de livraison, l'emplacement des points de vente, "
        "ou la mani√®re dont les services sont offerts (en ligne vs. physique)."
    )
            
        )
        b2c_temps_disponible = st.text_area(
            "Temps Disponible (B2C)",
            value=persona_data.get("temps_disponible",""),
            key=f"b2c_temps_disponible_{index_produit}",
            help=(
        "D√©crivez le temps que le persona peut consacrer √† votre produit ou service. "
        "Par exemple, s'il s'agit d'une application mobile, le temps disponible pour l'utiliser quotidiennement est crucial. "
        "Cette information aide √† adapter la complexit√© et la convivialit√© du produit."
    )
            
        )
        b2c_besoins_specifiques = st.text_area(
            "Besoins Sp√©cifiques (B2C)",
            value=persona_data.get("besoins_specifiques",""),
            key=f"b2c_besoins_specifiques_{index_produit}",
            help=(
            "D√©crivez les besoins sp√©cifiques du persona que votre produit ou service vise √† satisfaire. "
            "Cela peut inclure des besoins fonctionnels, √©motionnels, ou sociaux. "
            "Comprendre ces besoins permet de mieux cibler les fonctionnalit√©s et les avantages propos√©s."
        )
            
        )
        b2c_motivations = st.text_area(
            "Motivations (B2C)",
            value=persona_data.get("motivations",""),
            key=f"b2c_motivations_{index_produit}",
            help=(
        "D√©crivez les motivations qui poussent le persona √† utiliser votre produit ou service. "
        "Cela peut inclure le d√©sir de gain de temps, l'am√©lioration de la qualit√© de vie, "
        "l'atteinte d'objectifs personnels ou professionnels, etc. "
        "Identifier ces motivations aide √† cr√©er des messages marketing efficaces."
    )
            
        )

        st.subheader("Capacit√© d‚ÄôAdoption de l‚ÄôInnovation (B2C)")
        b2c_familiarite_tech = st.text_area(
            "Familiarit√© Technologique (B2C)",
            value=persona_data.get("familiarite_tech",""),
            key=f"b2c_familiarite_tech_{index_produit}",
            help=(
        "D√©crivez le niveau de familiarit√© technologique du persona. "
        "Par exemple, utilise-t-il r√©guli√®rement des smartphones, des applications sp√©cifiques, "
        "ou des plateformes en ligne? Cette information est essentielle pour d√©velopper des produits intuitifs "
        "et compatibles avec les habitudes technologiques du persona."
    )
            
        )
        b2c_ouverture_changement = st.text_input(
            "Ouverture au Changement (B2C)",
            value=persona_data.get("ouverture_changement",""),
            key=f"b2c_ouverture_changement_{index_produit}",
            help=(
        "Indiquez le niveau d'ouverture au changement du persona. "
        "Un persona avec une '√âlev√©e' ouverture sera plus enclin √† essayer de nouveaux produits ou services, "
        "tandis qu'un persona avec une 'Faible' ouverture pourrait pr√©f√©rer les solutions √©prouv√©es et famili√®res."
    )
            
        )
        b2c_barrieres = st.text_area(
            "Barri√®res Psychologiques/Culturelles (B2C)",
            value=persona_data.get("barrieres",""),
            key=f"b2c_barrieres_{index_produit}",
            help=(
        "D√©crivez les barri√®res psychologiques ou culturelles qui pourraient emp√™cher le persona d'adopter "
        "votre produit ou service. Cela peut inclure des croyances, des habitudes, des normes sociales, "
        "ou des craintes sp√©cifiques. Comprendre ces barri√®res permet de les adresser dans votre strat√©gie marketing."
    )
            
        )

        # Mise √† jour du dictionnaire "persona_data"
        persona_data.update({
            "type": "B2C",
            "√¢ge": b2c_age,
            "sexe": b2c_sexe,
            "localisation": b2c_localisation,
            "√©ducation": b2c_education,
            "profession": b2c_profession,
            "revenu_moyen": b2c_revenu,
            "sensibilite_prix": b2c_sensibilite_prix,
            "frequence_achat": b2c_frequence_achat,
            "volume_achat": b2c_volume_achat,
            "perception_qualite": b2c_perception_qualite,
            "utilisation_tech": b2c_utilisation_tech,
            "acces_transport": b2c_acces_transport,
            "temps_disponible": b2c_temps_disponible,
            "besoins_specifiques": b2c_besoins_specifiques,
            "motivations": b2c_motivations,
            "familiarite_tech": b2c_familiarite_tech,
            "ouverture_changement": b2c_ouverture_changement,
            "barrieres": b2c_barrieres
        })

    # ----- CAS 2 : PERSONA B2B -----
    elif type_persona == "B2B":
        st.subheader("Persona - B2B")

        # Donn√©es D√©mographiques B2B
        st.subheader("Donn√©es D√©mographiques")
        b2b_taille_entreprise = st.selectbox(
            "Taille de l'Entreprise (B2B)",
            ["","PME", "Grande Entreprise", "Multinationale"],
            index=["","PME", "Grande Entreprise", "Multinationale"].index(persona_data.get("taille_entreprise","")) if persona_data.get("taille_entreprise","") in ["","PME", "Grande Entreprise", "Multinationale"] else 0,
            key=f"b2b_taille_entreprise_{index_produit}",
            help=(
        "S√©lectionnez la taille de l'entreprise du persona. "
        "La taille de l'entreprise influence les besoins, les ressources disponibles et les processus d√©cisionnels. "
        "Par exemple, une grande entreprise peut avoir des besoins plus complexes et des cycles d'achat plus longs que "
        "une petite entreprise."
    )
            
        )
        b2b_secteur_activite = st.text_input(
            "Secteur d'Activit√© (B2B)",
            placeholder="Ex: Technologie, Sant√©",
            value=persona_data.get("secteur_activite",""),
            key=f"b2b_secteur_activite_{index_produit}",
            help=(
        "S√©lectionnez le secteur d'activit√© de l'entreprise du persona. "
        "Le secteur d'activit√© d√©termine les sp√©cificit√©s, les r√©glementations et les tendances auxquelles l'entreprise est soumise. "
        "Par exemple, une entreprise du secteur de la sant√© aura des besoins et des contraintes diff√©rents de celles du secteur technologique."
    )
            
        )
        b2b_localisation_ent = st.text_input(
            "Localisation Entreprise (B2B)",
            value=persona_data.get("localisation_entreprise",""),
            key=f"b2b_localisation_entreprise_{index_produit}",
            help=(
        "Indiquez la localisation g√©ographique de l'entreprise du persona. "
        "Pr√©cisez la ville et le pays, par exemple 'Goma, Rdcongo'. "
        "Cette information est essentielle pour comprendre les sp√©cificit√©s √©conomiques, culturelles et logistiques locales."
        )
            
        )
        b2b_chiffre_affaires = st.number_input(
            "Chiffre d'Affaires ($) (B2B)",
            min_value=0.0,
            value=float(persona_data.get("chiffre_affaires",0.0)),
            key=f"b2b_chiffre_affaires_{index_produit}",
            help=(
        "Entrez le chiffre d'affaires annuel de l'entreprise en dollars. "
        "Le chiffre d'affaires donne une id√©e de la taille financi√®re de l'entreprise et de sa capacit√© d'investissement. "
        "Assurez-vous que le chiffre d'affaires est r√©aliste par rapport √† la taille et au secteur d'activit√© de l'entreprise."
        )
            
        )
        b2b_nombre_employes = st.number_input(
            "Nombre d'Employ√©s (B2B)",
            min_value=1,
            step=1,
            value=int(persona_data.get("nombre_employes",1)),
            key=f"b2b_nombre_employes_{index_produit}",
             help=(
        "Entrez le nombre total d'employ√©s de l'entreprise. "
        "Le nombre d'employ√©s peut influencer la structure organisationnelle, les besoins en ressources humaines et les capacit√©s op√©rationnelles."
        )
            
        )

        st.subheader("D√©cideurs et Influenceurs (B2B)")
        b2b_role_decideur = st.text_input(
            "R√¥le du D√©cideur (B2B)",
            value=persona_data.get("role_decideur",""),
            key=f"b2b_role_decideur_{index_produit}",
            help=(
        "Entrez le r√¥le du principal d√©cideur au sein de l'entreprise. "
        "Conna√Ætre le r√¥le du d√©cideur aide √† cibler les communications et les arguments de vente de mani√®re plus efficace. "
        "Par exemple, un Directeur des Achats aura des priorit√©s diff√©rentes de celles d'un Directeur Technique."
        )
        )
        
        b2b_influenceur = st.text_input(
            "Influenceurs Internes (B2B)",
            value=persona_data.get("influenceur",""),
            key=f"b2b_influenceur_{index_produit}",
            help=(
        "Listez les principaux influenceurs internes qui peuvent influencer la d√©cision d'achat. "
        "Cela peut inclure des √©quipes sp√©cifiques, des d√©partements ou des individus cl√©s. "
        "Comprendre les influenceurs internes permet de mieux adresser les besoins et les pr√©occupations de l'ensemble des parties prenantes."
        )
            
        )

        # Param√®tres Comportementaux B2B
        st.subheader("Param√®tres Comportementaux (B2B)")
        b2b_sensibilite_prix = st.selectbox(
            "Sensibilit√© au Prix (B2B)",
            ["","Faible","Moyenne","√âlev√©e"],
            index=["","Faible","Moyenne","√âlev√©e"].index(persona_data.get("sensibilite_prix","")) if persona_data.get("sensibilite_prix","") in ["","Faible","Moyenne","√âlev√©e"] else 0,
            key=f"b2b_sensibilite_prix_{index_produit}",
            help=(
        "Indiquez la sensibilit√© au prix de l'entreprise persona. "
        "Une sensibilit√© 'Tr√®s √âlev√©e' signifie que l'entreprise accorde une grande importance au co√ªt, "
        "tandis qu'une sensibilit√© 'Tr√®s Faible' indique une plus grande priorit√© sur la qualit√© ou les fonctionnalit√©s, m√™me √† un co√ªt plus √©lev√©."
        )
            
        )
        b2b_cycle_achat = st.text_input(
            "Cycle d'Achat (B2B) - Long, Moyen, Court",
            value=persona_data.get("cycle_achat",""),
            key=f"b2b_cycle_achat_{index_produit}",
            help=(
        "S√©lectionnez la dur√©e typique du cycle d'achat de l'entreprise. "
        "Un cycle d'achat 'Long' implique des processus d√©cisionnels plus complexes et des d√©lais plus √©tendus, "
        "tandis qu'un cycle 'Court' indique des d√©cisions plus rapides et moins de formalit√©s."
        )
            
        )
        b2b_volume_achat = st.text_input(
            "Volume d'Achat (B2B) - Faible, Moyen, √âlev√©",
            value=persona_data.get("volume_achat",""),
            key=f"b2b_volume_achat_{index_produit}",
            help=(
        "Entrez le volume d'achat habituel de l'entreprise. "
        "Cela peut repr√©senter le nombre de licences logicielles achet√©es, la quantit√© de mat√©riel command√©e, "
        "ou toute autre m√©trique pertinente selon votre produit ou service. "
        "Cette information aide √† pr√©voir les besoins en stock et √† adapter les offres commerciales."
        )
            
        )
        b2b_perception_qualite = st.text_area(
            "Perception de la Qualit√© (B2B)",
            value=persona_data.get("perception_qualite",""),
            key=f"b2b_perception_qualite_{index_produit}",
            help=(
        "D√©crivez comment l'entreprise persona per√ßoit la qualit√© de votre produit ou service. "
        "Par exemple, l'accent peut √™tre mis sur la durabilit√©, la fiabilit√©, le support client, ou l'innovation technologique. "
        "Comprendre cette perception aide √† aligner votre offre avec les attentes du client."
        )
        )
        b2b_besoins_specifiques = st.text_area(
            "Besoins Sp√©cifiques (B2B)",
            value=persona_data.get("besoins_specifiques",""),
            key=f"b2b_besoins_specifiques_{index_produit}",
            help=(
        "D√©crivez les besoins sp√©cifiques de l'entreprise que votre produit ou service vise √† satisfaire. "
        "Cela peut inclure des besoins fonctionnels, op√©rationnels, strat√©giques ou r√©glementaires. "
        "Identifier ces besoins permet de mieux cibler les fonctionnalit√©s et les avantages propos√©s."
        )
            
        )
        b2b_motivations = st.text_area(
            "Motivations (B2B)",
            value=persona_data.get("motivations",""),
            key=f"b2b_motivations_{index_produit}",
            help=(
        "D√©crivez les motivations qui poussent l'entreprise persona √† utiliser votre produit ou service. "
        "Cela peut inclure l'am√©lioration de l'efficacit√© op√©rationnelle, la r√©duction des co√ªts, l'innovation, "
        "l'am√©lioration de la satisfaction client, etc. Identifier ces motivations aide √† cr√©er des messages marketing efficaces."
        )
            
        )

        st.subheader("Capacit√© d‚ÄôAdoption de l‚ÄôInnovation (B2B)")
        b2b_familiarite_tech = st.text_area(
            "Familiarit√© Technologique (B2B)",
            value=persona_data.get("familiarite_tech",""),
            key=f"b2b_familiarite_tech_{index_produit}",
            help=(
        "D√©crivez le niveau de familiarit√© technologique de l'entreprise persona. "
        "Par exemple, utilise-t-elle des syst√®mes ERP avanc√©s, des plateformes de cloud computing, des outils de collaboration sp√©cifiques, etc. "
        "Cette information est essentielle pour d√©velopper des produits compatibles et adapt√©s aux habitudes technologiques de l'entreprise."
        )
            
        )
        b2b_ouverture_changement = st.text_input(
            "Ouverture au Changement (B2B) - Faible, Moyenne, √âlev√©e",
            value=persona_data.get("ouverture_changement",""),
            key=f"b2b_ouverture_changement_{index_produit}",
            help=(
        "Indiquez le niveau d'ouverture au changement de l'entreprise persona. "
        "Une ouverture '√âlev√©e' signifie que l'entreprise est plus encline √† essayer de nouveaux produits ou services, "
        "tandis qu'une ouverture 'Faible' peut indiquer une pr√©f√©rence pour les solutions traditionnelles et √©prouv√©es."
        )
            
        )
        
        b2b_barrieres = st.text_area(
            "Barri√®res Psychologiques/Culturelles (B2B)",
            value=persona_data.get("barrieres",""),
            key=f"b2b_barrieres_{index_produit}",
            help=(
        "D√©crivez les barri√®res psychologiques ou culturelles qui pourraient emp√™cher l'entreprise persona d'adopter "
        "votre produit ou service. Cela peut inclure des croyances organisationnelles, des habitudes √©tablies, "
        "des normes industrielles ou des craintes sp√©cifiques. Comprendre ces barri√®res permet de les adresser dans votre strat√©gie marketing."
        )
            
        )

        # Mise √† jour du dictionnaire persona_data
        persona_data.update({
            "type": "B2B",
            "taille_entreprise": b2b_taille_entreprise,
            "secteur_activite": b2b_secteur_activite,
            "localisation_entreprise": b2b_localisation_ent,
            "chiffre_affaires": b2b_chiffre_affaires,
            "nombre_employes": b2b_nombre_employes,
            "role_decideur": b2b_role_decideur,
            "influenceur": b2b_influenceur,
            "sensibilite_prix": b2b_sensibilite_prix,
            "cycle_achat": b2b_cycle_achat,
            "volume_achat": b2b_volume_achat,
            "perception_qualite": b2b_perception_qualite,
            "besoins_specifiques": b2b_besoins_specifiques,
            "motivations": b2b_motivations,
            "familiarite_tech": b2b_familiarite_tech,
            "ouverture_changement": b2b_ouverture_changement,
            "barrieres": b2b_barrieres
        })

    # ----- CAS 3 : PERSONA M√âNAGE -----
    elif type_persona == "M√©nage":
        st.subheader("Persona - M√©nage")

        if "taille_menage" not in persona_data:
            # On initialise certains champs si absents
            persona_data["taille_menage"] = 1

        # Donn√©es D√©mographiques M√©nage
        st.subheader("Donn√©es D√©mographiques")
        menage_taille = st.number_input(
            "Nombre de Personnes dans le M√©nage",
            min_value=1,
            value=int(persona_data.get("taille_menage",1)),
            key=f"menage_taille_{index_produit}",
            help=(
        "Entrez le nombre total de personnes vivant dans le m√©nage. "
        "Cela inclut tous les membres de la famille ou les colocataires. "
        "Le nombre de personnes peut influencer les besoins en produits, les habitudes de consommation et le budget familial."
        )
            
        )
        menage_revenu = st.number_input(
            "Revenu Mensuel du M√©nage ($)",
            min_value=0.0,
            value=float(persona_data.get("revenu_menage",0.0)),
            key=f"menage_revenu_{index_produit}",
            help=(
        "Entrez le revenu mensuel total du m√©nage en dollars. "
        "Cette information est cruciale pour √©valuer le pouvoir d'achat, la sensibilit√© au prix et les priorit√©s financi√®res du m√©nage. "
        "Assurez-vous que le revenu est r√©aliste par rapport √† la localisation g√©ographique et au nombre de personnes dans le m√©nage."
        )
            
        )
        menage_localisation = st.text_input(
            "Localisation G√©ographique (ex: Goma, Rdcongo)",
            value=persona_data.get("localisation_menage",""),
            key=f"menage_localisation_{index_produit}",
            help=(
        "Indiquez la localisation g√©ographique du m√©nage. "
        "Pr√©cisez la ville et le pays, par exemple 'Goma, Rdcongo'. "
        "Cette information aide √† comprendre les sp√©cificit√©s culturelles, √©conomiques et logistiques qui peuvent influencer les habitudes de consommation."
        )
            
        )
        menage_type_logement = st.text_input(
            "Type de Logement",
            value=persona_data.get("type_logement",""),
            key=f"menage_type_logement_{index_produit}",
            help=(
        "S√©lectionnez le type de logement du m√©nage. "
        "Le type de logement peut influencer les besoins en mobilier, appareils √©lectrom√©nagers, espace de vie et habitudes de consommation. "
        "Par exemple, un appartement peut n√©cessiter des solutions de rangement optimis√©es, tandis qu'une maison peut avoir des besoins diff√©rents."
        )
            
        )

        st.subheader("Param√®tres Comportementaux (M√©nage)")
        menage_sensibilite_prix = st.selectbox(
            "Sensibilit√© au Prix (M√©nage)",
            ["","Faible", "Moyenne", "√âlev√©e"],
            index=["","Faible","Moyenne","√âlev√©e"].index(persona_data.get("sensibilite_prix","")) if persona_data.get("sensibilite_prix","") in ["","Faible","Moyenne","√âlev√©e"] else 0,
            key=f"menage_sensibilite_prix_{index_produit}",
            help=(
        "Indiquez la sensibilit√© au prix du m√©nage. "
        "Un m√©nage avec une 'Tr√®s √âlev√©e' sensibilit√© au prix privil√©giera les produits abordables, tandis qu'un m√©nage avec une 'Tr√®s Faible' sensibilit√© pourrait privil√©gier la qualit√© ou les marques, m√™me √† un co√ªt plus √©lev√©."
        )
            
        )
        menage_frequence_achat = st.text_input(
            "Fr√©quence d'Achat (M√©nage) - Rarement, Mensuellement, Hebdomadairement",
            value=persona_data.get("frequence_achat",""),
            key=f"menage_frequence_achat_{index_produit}",
            help=(
        "S√©lectionnez la fr√©quence √† laquelle le m√©nage ach√®te des produits ou services similaires. "
        "Cela permet d'estimer la r√©gularit√© des d√©penses et d'ajuster les strat√©gies marketing en cons√©quence."
        )
            
        )
        
        menage_volume_achat = st.text_input(
            "Volume d'Achat (M√©nage) - Faible, Moyen, √âlev√©",
            value=persona_data.get("volume_achat",""),
            key=f"menage_volume_achat_{index_produit}",
            help=(
        "Entrez le volume d'achat habituel du m√©nage. "
        "Cela peut repr√©senter le nombre d'articles achet√©s par transaction ou la quantit√© totale d√©pens√©e. "
        "Cette information aide √† pr√©voir les besoins en stock et √† adapter les campagnes de vente."
        )
            
        )
        menage_perception_qualite = st.text_area(
            "Perception de la Qualit√© (M√©nage)",
            value=persona_data.get("perception_qualite",""),
            key=f"menage_perception_qualite_{index_produit}",
            help=(
        "D√©crivez comment le m√©nage per√ßoit la qualit√© des produits ou services qu'il ach√®te. "
        "Par exemple, le m√©nage pourrait valoriser la durabilit√©, le design, ou la fonctionnalit√©. "
        "Comprendre cette perception aide √† aligner les caract√©ristiques du produit avec les attentes des clients."
        )
            
        )
        menage_utilisation_tech = st.text_area(
            "Utilisation Technologique (M√©nage)",
            value=persona_data.get("utilisation_tech",""),
            key=f"menage_utilisation_tech_{index_produit}",
            help=(
        "D√©crivez l'utilisation technologique au sein du m√©nage. "
        "Cela inclut les appareils utilis√©s (Smartphones, tablettes, ordinateurs, etc.), les plateformes en ligne pr√©f√©r√©es, et le niveau de comp√©tence technologique. "
        "Ces informations sont essentielles pour d√©terminer les canaux de communication et les types de produits technologiques adapt√©s."
        )
            
        )
        menage_acces_transport = st.text_area(
            "Accessibilit√© (Transport) (M√©nage)",
            value=persona_data.get("acces_transport",""),
            key=f"menage_acces_transport_{index_produit}",
            help=(
        "D√©crivez les moyens de transport que le m√©nage utilise r√©guli√®rement. "
        "Cela peut influencer la logistique de livraison, l'emplacement des points de vente, ou la mani√®re dont les services sont offerts (en ligne vs. physique). "
        "Par exemple, un m√©nage sans acc√®s facile √† une voiture peut pr√©f√©rer les livraisons √† domicile."
        )
            
        )
        menage_temps_disponible = st.text_area(
            "Temps Disponible (M√©nage)",
            value=persona_data.get("temps_disponible",""),
            key=f"menage_temps_disponible_{index_produit}",
            help=(
        "D√©crivez le temps que le m√©nage peut consacrer √† l'utilisation de votre produit ou service. "
        "Par exemple, s'il s'agit d'une application mobile, le temps disponible pour l'utiliser quotidiennement est crucial. "
        "Cette information aide √† adapter la complexit√© et la convivialit√© du produit."
        )
            
        )
        menage_besoins_specifiques = st.text_area(
            "Besoins Sp√©cifiques (M√©nage)",
            value=persona_data.get("besoins_specifiques",""),
            key=f"menage_besoins_specifiques_{index_produit}",
            help=(
        "D√©crivez les besoins sp√©cifiques du m√©nage que votre produit ou service vise √† satisfaire. "
        "Cela peut inclure des besoins fonctionnels, √©motionnels, ou sociaux. "
        "Comprendre ces besoins permet de mieux cibler les fonctionnalit√©s et les avantages propos√©s."
        )
            
        )
        menage_motivations = st.text_area(
            "Motivations (M√©nage)",
            value=persona_data.get("motivations",""),
            key=f"menage_motivations_{index_produit}",
            help=(
        "D√©crivez les motivations qui poussent le m√©nage √† utiliser votre produit ou service. "
        "Cela peut inclure le d√©sir de gain de temps, l'am√©lioration de la qualit√© de vie, l'atteinte d'objectifs personnels ou familiaux, etc. "
        "Identifier ces motivations aide √† cr√©er des messages marketing efficaces."
        )
            
        )

        st.subheader("Capacit√© d‚ÄôAdoption de l‚ÄôInnovation (M√©nage)")
        menage_familiarite_tech = st.text_area(
            "Familiarit√© avec certaines Technologies (M√©nage)",
            value=persona_data.get("familiarite_tech",""),
            key=f"menage_familiarite_tech_{index_produit}",
            help=(
        "D√©crivez le niveau de familiarit√© technologique du m√©nage. "
        "Par exemple, utilise-t-il r√©guli√®rement des smartphones, des applications sp√©cifiques, des plateformes en ligne, etc. "
        "Cette information est essentielle pour d√©velopper des produits intuitifs et compatibles avec les habitudes technologiques du m√©nage."
        )
            
        )
        menage_ouverture_changement = st.text_input(
            "Ouverture au Changement (M√©nage) - Faible, Moyenne, √âlev√©e",
            value=persona_data.get("ouverture_changement",""),
            key=f"menage_ouverture_changement_{index_produit}",
            help=(
        "Indiquez le niveau d'ouverture au changement du m√©nage. "
        "Un m√©nage avec une '√âlev√©e' ouverture sera plus enclin √† essayer de nouveaux produits ou services, tandis qu'un m√©nage avec une 'Faible' ouverture pourrait pr√©f√©rer les solutions √©prouv√©es et famili√®res."
        )
            
        )
        menage_barrieres = st.text_area(
            "Barri√®res Psychologiques/Culturelles (M√©nage)",
            value=persona_data.get("barrieres",""),
            key=f"menage_barrieres_{index_produit}",
            help=(
        "D√©crivez les barri√®res psychologiques ou culturelles qui pourraient emp√™cher le m√©nage d'adopter votre produit ou service. "
        "Cela peut inclure des croyances, des habitudes, des normes sociales, ou des craintes sp√©cifiques. "
        "Comprendre ces barri√®res permet de les adresser dans votre strat√©gie marketing."
        )
            
        )

        # Mise √† jour du dictionnaire persona_data
        persona_data.update({
            "type": "M√©nage",
            "taille_menage": menage_taille,
            "revenu_menage": menage_revenu,
            "localisation_menage": menage_localisation,
            "type_logement": menage_type_logement,
            "sensibilite_prix": menage_sensibilite_prix,
            "frequence_achat": menage_frequence_achat,
            "volume_achat": menage_volume_achat,
            "perception_qualite": menage_perception_qualite,
            "utilisation_tech": menage_utilisation_tech,
            "acces_transport": menage_acces_transport,
            "temps_disponible": menage_temps_disponible,
            "besoins_specifiques": menage_besoins_specifiques,
            "motivations": menage_motivations,
            "familiarite_tech": menage_familiarite_tech,
            "ouverture_changement": menage_ouverture_changement,
            "barrieres": menage_barrieres
        })

    # Enfin, on sauvegarde ce persona_data dans le produit
    produit["persona"] = persona_data
    st.session_state["produits_data"][index_produit] = produit



def collect_arbre_probleme(index_produit):
    """
    Collecte et/ou met √† jour l'Arbre √† Probl√®me pour le produit index_produit.
    Pr√©-remplit les champs avec les donn√©es existantes si disponibles.
    """
    st.header("Arbre √† Probl√®me")
    
    # R√©cup√©ration des donn√©es existantes
    produit = st.session_state["produits_data"][index_produit]
    data = produit.get("problem_tree", {})
    
    # 1. Contexte
    st.subheader("Contexte")
    contexte = st.text_area(
        "D√©crire le Contexte",
        placeholder="Exemple : Dans le domaine de la sant√© publique dans les zones rurales...",
        value=data.get("contexte", ""),
        help=(
            "D√©crivez le contexte g√©n√©ral dans lequel le probl√®me se situe. "
            "Incluez des informations pertinentes sur le secteur d'activit√©, la localisation g√©ographique, "
            "les conditions socio-√©conomiques, les tendances actuelles, et tout autre √©l√©ment contextuel important. "
            "Cette section doit fournir une vue d'ensemble qui aide √† comprendre les facteurs externes et internes influen√ßant le probl√®me. "
            "Par exemple : 'Dans le domaine de la sant√© publique dans les zones rurales de la R√©publique D√©mocratique du Congo, l'acc√®s aux soins de sant√© est limit√© en raison de l'insuffisance des infrastructures m√©dicales et du manque de personnel qualifi√©.'"
        )
    )
    
    st.markdown("---")  # S√©parateur visuel
    
    # 2. Probl√®me Principal
    st.subheader("Probl√®me Principal")
    probleme_principal = st.text_area(
        "D√©crire le Probl√®me Principal",
        placeholder="Exemple : Un acc√®s limit√© aux soins de sant√© de base.",
        value=data.get("probleme_principal", ""),
        help=(
            "Formulez clairement le probl√®me central que vous souhaitez aborder. "
            "Assurez-vous que la description est pr√©cise, concise et refl√®te bien la nature et l'ampleur du probl√®me. "
            "Cette section doit identifier le c≈ìur du d√©fi ou de la difficult√© rencontr√©e. "
            "Par exemple : 'Un acc√®s limit√© aux soins de sant√© de base dans les zones rurales, entra√Ænant une augmentation des taux de mortalit√© infantile et une d√©t√©rioration de la sant√© g√©n√©rale de la population.'"
        )
    )
    
    st.markdown("---")  # S√©parateur visuel
    
    # 3. Causes Principales
    st.subheader("Causes Principales")
    causes = data.get("causes_principales", ["", "", ""])
    cause1 = st.text_input(
        "Cause 1",
        placeholder="Exemple : Manque d'infrastructures m√©dicales...",
        value=causes[0] if len(causes) > 0 else "",
        help=(
            "Identifiez et d√©crivez la premi√®re cause principale du probl√®me. "
            "Cette cause doit √™tre directement li√©e au probl√®me principal et contribuer de mani√®re significative √† sa persistance. "
            "Analysez les facteurs sous-jacents qui g√©n√®rent ou exacerbent le probl√®me. "
            "Par exemple : 'Manque d'infrastructures m√©dicales ad√©quates dans les zones rurales, rendant difficile l'acc√®s aux services de sant√© essentiels.'"
        )
    )
    cause2 = st.text_input(
        "Cause 2",
        placeholder="Exemple : Faible financement gouvernemental...",
        value=causes[1] if len(causes) > 1 else "",
        help=(
            "Identifiez et d√©crivez la deuxi√®me cause principale du probl√®me. "
            "Assurez-vous qu'elle est √©galement directement li√©e au probl√®me principal et qu'elle joue un r√¥le important dans sa manifestation. "
            "Par exemple : 'Faible financement gouvernemental allou√© aux services de sant√© ruraux, limitant les ressources disponibles pour le personnel m√©dical et les √©quipements n√©cessaires.'"
        )
    )
    cause3 = st.text_input(
        "Cause 3 (Facultatif)",
        placeholder="Exemple : Isolement g√©ographique...",
        value=causes[2] if len(causes) > 2 else "",
        help=(
            "Identifiez et d√©crivez une troisi√®me cause principale du probl√®me, si n√©cessaire. "
            "Ce champ est facultatif et peut √™tre laiss√© vide si une troisi√®me cause n'est pas pertinente ou n√©cessaire. "
            "Par exemple : 'Isolement g√©ographique des communaut√©s rurales, compliquant la distribution des m√©dicaments et la mobilit√© des professionnels de sant√©.'"
        )
    )
    
    st.markdown("---")  # S√©parateur visuel
    
    # 4. Impact
    st.subheader("Impact")
    impact = st.text_area(
        "D√©crire l'Impact",
        placeholder="Exemple : Augmentation de la mortalit√© infantile, retard de d√©veloppement √©conomique.",
        value=data.get("impact", ""),
        help=(
            "D√©crivez les cons√©quences du probl√®me principal sur les parties prenantes et l'environnement. "
            "Incluez les impacts sociaux, √©conomiques, environnementaux, et sanitaires. "
            "Cette section doit illustrer l'ampleur et la gravit√© des effets n√©gatifs engendr√©s par le probl√®me. "
            "Par exemple : 'Augmentation de la mortalit√© infantile, retard de d√©veloppement √©conomique, d√©t√©rioration de la qualit√© de vie des r√©sidents, et surmenage des services de sant√© existants.'"
        )
    )
    
    st.markdown("---")  # S√©parateur visuel
    
    # 5. Parties Prenantes
    st.subheader("Parties Prenantes")
    parties = data.get("parties_prenantes", ["", "", ""])
    partie1 = st.text_input(
        "Partie Prenante 1",
        placeholder="Exemple : Gouvernement local...",
        value=parties[0] if len(parties) > 0 else "",
        help=(
            "Identifiez et d√©crivez la premi√®re partie prenante impliqu√©e ou affect√©e par le probl√®me. "
            "Les parties prenantes peuvent √™tre des individus, des groupes, des organisations ou des institutions ayant un int√©r√™t direct ou indirect dans le probl√®me. "
            "Par exemple : 'Gouvernement local responsable de la gestion des services de sant√© dans les zones rurales.'"
        )
    )
    partie2 = st.text_input(
        "Partie Prenante 2",
        placeholder="Exemple : ONG...",
        value=parties[1] if len(parties) > 1 else "",
        help=(
            "Identifiez et d√©crivez la deuxi√®me partie prenante impliqu√©e ou affect√©e par le probl√®me. "
            "Ces parties peuvent jouer un r√¥le cl√© dans la r√©solution du probl√®me ou √™tre affect√©es par ses cons√©quences. "
            "Par exemple : 'Organisations non gouvernementales (ONG) travaillant √† am√©liorer les services de sant√© dans les r√©gions d√©favoris√©es.'"
        )
    )
    partie3 = st.text_input(
        "Partie Prenante 3 (Facultatif)",
        placeholder="Exemple : R√©sidents des zones rurales...",
        value=parties[2] if len(parties) > 2 else "",
        help=(
            "Identifiez et d√©crivez une troisi√®me partie prenante impliqu√©e ou affect√©e par le probl√®me, si n√©cessaire. "
            "Ce champ est facultatif et peut √™tre laiss√© vide si une troisi√®me partie prenante n'est pas pertinente ou n√©cessaire. "
            "Par exemple : 'R√©sidents des zones rurales ayant un acc√®s limit√© aux services de sant√© essentiels.'"
        )
    )
    
    st.markdown("---")  # S√©parateur visuel
    
    # 6. Opportunit√©s
    st.subheader("Opportunit√©s")
    opportunites = data.get("opportunites", ["", "", ""])
    opportunite1 = st.text_input(
        "Opportunit√© 1",
        placeholder="Exemple : Introduction de cliniques mobiles...",
        value=opportunites[0] if len(opportunites) > 0 else "",
        help=(
            "Identifiez et d√©crivez la premi√®re opportunit√© pour r√©soudre le probl√®me. "
            "Les opportunit√©s peuvent provenir de changements technologiques, de nouvelles politiques, de financements disponibles, ou de partenariats potentiels. "
            "Par exemple : 'Introduction de cliniques mobiles pour fournir des services de sant√© directement dans les communaut√©s rurales isol√©es.'"
        )
    )
    opportunite2 = st.text_input(
        "Opportunit√© 2",
        placeholder="Exemple : Formation d'agents de sant√© communautaire...",
        value=opportunites[1] if len(opportunites) > 1 else "",
        help=(
            "Identifiez et d√©crivez la deuxi√®me opportunit√© pour r√©soudre le probl√®me. "
            "Assurez-vous que cette opportunit√© est r√©alisable et align√©e avec les ressources et les capacit√©s disponibles. "
            "Par exemple : 'Formation d'agents de sant√© communautaire locaux pour assurer une pr√©sence continue et un soutien m√©dical dans les villages recul√©s.'"
        )
    )
    opportunite3 = st.text_input(
        "Opportunit√© 3 (Facultatif)",
        placeholder="Exemple : Partenariats avec des organisations internationales...",
        value=opportunites[2] if len(opportunites) > 2 else "",
        help=(
            "Identifiez et d√©crivez une troisi√®me opportunit√© pour r√©soudre le probl√®me, si n√©cessaire. "
            "Ce champ est facultatif et peut √™tre laiss√© vide si une troisi√®me opportunit√© n'est pas pertinente ou n√©cessaire. "
            "Par exemple : '√âtablissement de partenariats avec des organisations internationales pour obtenir des financements et des ressources suppl√©mentaires.'"
        )
    )
    
    # Collecte des donn√©es
    problem_tree = {
        "contexte": contexte,
        "probleme_principal": probleme_principal,
        "causes_principales": [cause for cause in [cause1, cause2, cause3] if cause.strip()],
        "impact": impact,
        "parties_prenantes": [partie for partie in [partie1, partie2, partie3] if partie.strip()],
        "opportunites": [opp for opp in [opportunite1, opportunite2, opportunite3] if opp.strip()]
    }
    
    # Stockage des donn√©es dans la session
    st.session_state["produits_data"][index_produit]["problem_tree"] = problem_tree

def collect_analyse_marche_pme(index_produit):
    """
    Collecte et/ou met √† jour l'Analyse du March√© pour le produit index_produit.
    Pr√©-remplit les champs avec les donn√©es existantes si disponibles.
    """
    st.header("Analyse du March√© - PME")
    
    # R√©cup√©ration des donn√©es existantes
    produit = st.session_state["produits_data"][index_produit]
    data = produit.get("analyse_marche", {})
    
    # Taille du March√©
    st.subheader("Taille du March√©")
    taille_marche = st.text_area(
        "Taille du March√©", 
        placeholder="D√©crivez la taille du march√©, les segments et la valeur totale.",
        value=data.get("taille_marche", ""),
        help=(
            "D√©crivez la taille du march√© que vous visez. Incluez des informations sur la port√©e g√©ographique, les segments de client√®le, "
            "et la valeur totale du march√©. Cette section doit fournir une vue d'ensemble quantitative et qualitative du march√© potentiel. "
            "Par exemple : 'Le march√© de la sant√© num√©rique en Afrique de l'Ouest repr√©sente environ 2 milliards de dollars avec un taux de croissance annuel de 15%.'"
        )
    )
    
    # Segments du March√©
    st.subheader("Segments du March√©")
    segments_marche = st.text_area(
        "Segments du March√©",
        placeholder="D√©crivez les segments du march√©...",
        value=data.get("segments_marche", ""),
        help=(
            "D√©crivez les diff√©rents segments de march√© que vous ciblez. Identifiez les sous-groupes sp√©cifiques au sein du march√© global, "
            "bas√©s sur des crit√®res tels que la d√©mographie, la g√©ographie, le comportement, ou les besoins sp√©cifiques. "
            "Par exemple : 'Segments incluant les jeunes professionnels urbains, les familles avec enfants, et les seniors recherchant des solutions de sant√© √† domicile.'"
        )
    )
    
    # Valeur Totale du March√© ($)
    st.subheader("Valeur Totale du March√© ($)")
    valeur_totale = st.text_area(
        "Valeur Totale du March√© ($)", 
        placeholder="D√©crivez la valeur totale du march√©...",
        value=data.get("valeur_totale", ""),
        help=(
            "Entrez la valeur totale estim√©e du march√© en dollars. Cette estimation doit refl√©ter la taille financi√®re du march√© que vous ciblez. "
            "Utilisez des donn√©es secondaires fiables, des √©tudes de march√© ou des rapports industriels pour appuyer votre estimation. "
            "Par exemple : 'La valeur totale du march√© de l'e-commerce en Europe est estim√©e √† 700 milliards de dollars en 2024.'"
        )
    )
    
    # Offres Concurrentes
    st.subheader("Offres Concurrentes")
    offres_concurrentes = st.text_area(
        "Offres Concurrentes", 
        placeholder="D√©crivez les offres concurrentes...",
        value=data.get("offres_concurrentes", ""),
        help=(
            "D√©crivez les principales offres concurrentes sur le march√©. Identifiez les entreprises ou les produits qui r√©pondent d√©j√† aux besoins de vos segments cibles. "
            "Analysez leurs forces et faiblesses, leurs parts de march√©, leurs strat√©gies de prix, et leurs propositions de valeur. "
            "Par exemple : 'Les principaux concurrents incluent HealthPlus et MedTech Solutions, offrant des applications de gestion de sant√© avec des fonctionnalit√©s similaires mais √† des prix plus √©lev√©s.'"
        )
    )
    
    # Niveau de Satisfaction
    st.subheader("Niveau de Satisfaction")
    niveau_satisfaction = st.text_area(
        "Niveau de Satisfaction", 
        placeholder="D√©crivez le niveau de satisfaction...",
        value=data.get("niveau_satisfaction", ""),
        help=(
            "√âvaluez le niveau de satisfaction actuel des clients vis-√†-vis des offres concurrentes. Utilisez des enqu√™tes, des avis clients, ou des √©tudes de satisfaction pour recueillir ces informations. "
            "Identifiez les points forts et les lacunes des offres existantes du point de vue des clients. "
            "Par exemple : 'Les clients appr√©cient la facilit√© d'utilisation des applications concurrentes, mais signalent un manque de support client r√©actif et de fonctionnalit√©s personnalisables.'"
        )
    )
    
    # Tendances du March√©
    st.subheader("Tendances du March√©")
    tendances = st.text_area(
        "Tendances du March√©", 
        placeholder="D√©crivez les tendances du march√©...",
        value=data.get("tendances", ""),
        help=(
            "D√©crivez les principales tendances qui influencent actuellement le march√© et qui pourraient avoir un impact futur. "
            "Cela peut inclure des √©volutions technologiques, des changements r√©glementaires, des variations des comportements des consommateurs, etc. "
            "Par exemple : 'Croissance de l'utilisation des smartphones, augmentation de la demande pour des solutions de sant√© personnalis√©es, et renforcement des r√©gulations sur la protection des donn√©es de sant√©.'"
        )
    )
    
    # Innovations √âmergentes
    st.subheader("Innovations √âmergentes")
    innovations = st.text_area(
        "Innovations √âmergentes", 
        placeholder="D√©crivez les innovations √©mergentes...",
        value=data.get("innovations", ""),
        help=(
            "Identifiez et d√©crivez les innovations √©mergentes dans votre secteur qui pourraient cr√©er de nouvelles opportunit√©s ou menacer les acteurs existants. "
            "Cela peut inclure des technologies disruptives, des nouveaux mod√®les d'affaires, ou des avanc√©es scientifiques. "
            "Par exemple : 'D√©veloppement de l'intelligence artificielle pour le diagnostic m√©dical, adoption croissante de la t√©l√©m√©decine, et utilisation de la blockchain pour s√©curiser les donn√©es de sant√©.'"
        )
    )
    
    # Comportements √âmergents
    st.subheader("Comportements √âmergents")
    comportements_emergents = st.text_area(
        "Comportements √âmergents", 
        placeholder="D√©crivez les comportements √©mergents...",
        value=data.get("comportements_emergents", ""),
        help=(
            "Analysez les changements dans les comportements des consommateurs qui pourraient influencer la demande sur le march√©. "
            "Cela peut inclure des pr√©f√©rences accrues pour des produits durables, une tendance vers l'achat en ligne, ou une demande pour des services personnalis√©s. "
            "Par exemple : 'Les consommateurs montrent une pr√©f√©rence croissante pour les solutions de sant√© int√©gr√©es et personnalis√©es, avec une utilisation accrue des applications mobiles pour le suivi de la sant√©.'"
        )
    )
    
    # Collecte des donn√©es
    analyse_marche = {
        "taille_marche": taille_marche,
        "segments_marche": segments_marche,
        "valeur_totale": valeur_totale,
        "offres_concurrentes": offres_concurrentes,
        "niveau_satisfaction": niveau_satisfaction,
        "tendances": tendances,
        "innovations": innovations,
        "comportements_emergents": comportements_emergents
    }
    
    # Stockage des donn√©es dans la session
    st.session_state["produits_data"][index_produit]["analyse_marche"] = analyse_marche

def collect_facteurs_limitants_pme(index_produit):
    st.subheader("Facteurs Limitants")
    data = st.session_state["produits_data"][index_produit]["facteurs_limitants"]

    techno_description = st.text_area("Contraintes Technologiques", 
                                      value=data.get("contraintes_technologiques",""),
                                      key=f"techno_description_{index_produit}",
                                      help=(
        "D√©crivez les contraintes technologiques qui peuvent limiter le d√©veloppement ou la mise en ≈ìuvre de votre produit ou service. "
        "Cela peut inclure des limitations en termes d'infrastructure, de capacit√©s techniques, de disponibilit√© des technologies n√©cessaires, "
        "ou des d√©fis li√©s √† l'int√©gration avec des syst√®mes existants. "
        "Par exemple : 'Manque d'acc√®s √† des technologies de pointe pour le d√©veloppement de logiciels personnalis√©s, rendant difficile la cr√©ation de fonctionnalit√©s avanc√©es.'"
    ))
    economiques_description = st.text_area("Contraintes √âconomiques",
                                           value=data.get("contraintes_economiques",""),
                                           key=f"economiques_description_{index_produit}",
                                           help=(
        "D√©crivez les contraintes √©conomiques qui peuvent affecter votre projet ou entreprise. "
        "Cela peut inclure des limitations budg√©taires, des fluctuations de march√©, des co√ªts √©lev√©s de production, "
        "ou des difficult√©s √† obtenir des financements. "
        "Par exemple : 'Budget limit√© pour le marketing, ce qui restreint la port√©e des campagnes publicitaires et la visibilit√© du produit sur le march√©.'"
    ))
    culturelles_description = st.text_area("Contraintes Culturelles",
                                           value=data.get("contraintes_culturelles",""),
                                           key=f"culturelles_description_{index_produit}",
                                           help=(
        "D√©crivez les contraintes culturelles qui peuvent influencer votre projet ou entreprise. "
        "Cela peut inclure des diff√©rences culturelles, des normes sociales, des pr√©f√©rences des consommateurs, ou des r√©sistances au changement. "
        "Par exemple : 'Pr√©f√©rences culturelles pour des produits traditionnels, rendant difficile l'adoption de nouvelles solutions innovantes.'"
    ))
    psych_phys_description = st.text_area("Contraintes Psychologiques et Physiologiques",
                                          value=data.get("contraintes_psych_phys",""),
                                          key=f"psych_phys_description_{index_produit}",
                                          help=(
        "D√©crivez les contraintes psychologiques et physiologiques qui peuvent impacter votre projet ou entreprise. "
        "Cela peut inclure des facteurs tels que la r√©sistance au changement, le stress des employ√©s, des limitations physiques li√©es √† la sant√©, "
        "ou des d√©fis li√©s √† la motivation et √† la productivit√©. "
        "Par exemple : 'R√©sistance des employ√©s √† l'adoption de nouveaux outils technologiques en raison de la peur de la perte d'emploi.'"
    ))
    regulatoires_description = st.text_area("Contraintes R√©glementaires",
                                            value=data.get("contraintes_reglementaires",""),
                                            key=f"regulatoires_description_{index_produit}",
                                            help=(
        "D√©crivez les contraintes r√©glementaires qui peuvent affecter votre projet ou entreprise. "
        "Cela peut inclure des lois, des r√©gulations, des normes industrielles, des exigences de conformit√©, ou des barri√®res administratives. "
        "Par exemple : 'Conformit√© stricte aux r√©gulations de protection des donn√©es, n√©cessitant des investissements suppl√©mentaires en s√©curit√© informatique.'"
    ))

    st.session_state["produits_data"][index_produit]["facteurs_limitants"] = {
        "contraintes_technologiques": techno_description,
        "contraintes_economiques": economiques_description,
        "contraintes_culturelles": culturelles_description,
        "contraintes_psych_phys": psych_phys_description,
        "contraintes_reglementaires": regulatoires_description
    }

if 'competitors' not in st.session_state:
    st.session_state.competitors = []

# Fonction de dialogue pour ajouter un concurrent
@st.dialog ("Ajouter un Concurrent", width="large")
def add_competitor_dialog():
    with st.form("add_competitor_form", clear_on_submit=True):
        # Cr√©ation de deux colonnes
        col1, col2 = st.columns(2)
        
        with col1:
            concurrent_nom = st.text_input(
                "Nom du Concurrent", 
                placeholder="Nom du concurrent...",
                help="Entrez le nom complet du concurrent."
            )
        
        with col2:
            type_concurrent = st.selectbox(
                "Type de Concurrent", 
                options=["Directe", "Indirecte"],
                help="S√©lectionnez le type de concurrent."
            )
        # Cr√©ation de deux colonnes pour le slider et le bouton de soumission
        col3, col4 = st.columns([2, 2])
        with col3:
            force = st.text_area(
                "Forces du Concurrent", 
                placeholder="D√©crivez les forces...",
                help="D√©crivez les forces de ce concurrent."
            )
        with col4:
            faiblesse = st.text_area(
                "Faiblesses du Concurrent", 
                placeholder="D√©crivez les faiblesses...",
                help="D√©crivez les faiblesses de ce concurrent."
            )
        # Cr√©ation de trois colonnes pour la perception et le bouton de soumission
        col5, col6, col7 = st.columns([4, 2, 1])
        
        with col5:
            perception =  st.text_area(
                "Perception de l‚Äôoffre de la concurrence (Niveau de Satisfaction)", 
                placeholder="D√©crivez la satisfaction des clients envers ce concurrent... (par ex: Produit de bonne qualit√© mais prix √©lev√©)",
                help="√âvaluez la satisfaction des clients envers ce concurrent."
            )
        
        with col7:
            submit = st.form_submit_button("Ajouter")
            if submit:
                if concurrent_nom.strip() == "":
                    st.error("Le nom du concurrent ne peut pas √™tre vide.")
                else:
                    competitor = {
                        "Nom": concurrent_nom,
                        "Forces": force,
                        "Faiblesses": faiblesse,
                        "Type": type_concurrent,
                        "Perception": perception
                    }
                    st.session_state.competitors.append(competitor)
                    st.success(f"Concurrent **{concurrent_nom}** ajout√© avec succ√®s!")
                    st.rerun()


# Fonction de dialogue pour modifier un concurrent
@st.dialog ("Modifier un Concurrent", width="large")
def edit_competitor_dialog(index):
    competitor = st.session_state.competitors[index]
    with st.form(f"edit_competitor_form_{index}", clear_on_submit=False):
        col1, col2 = st.columns(2)
        
        with col1:
            concurrent_nom = st.text_input(
                "Nom du Concurrent", 
                value=competitor['Nom'],
                help="Entrez le nom complet du concurrent."
            )
        with col2:
            type_concurrent = st.selectbox(
                "Type de Concurrent", 
                options=["Directe", "Indirecte"], 
                index=["Directe", "Indirecte"].index(competitor['Type']),
                help="S√©lectionnez le type de concurrent."
            )
        col3, col4 = st.columns([2, 2])
        
        with col3:    
            force = st.text_area(
                "Forces du Concurrent", 
                value=competitor['Forces'],
                help="D√©crivez les forces de ce concurrent."
            )
            
        with col4:
            faiblesse = st.text_area(
                "Faiblesses du Concurrent", 
                value=competitor['Faiblesses'],
                help="D√©crivez les faiblesses de ce concurrent."
            )
        
        # Cr√©ation de trois colonnes pour la perception et le bouton de soumission
        col5, col6, col7 = st.columns([4, 2, 1])

        with col5:
            perception = st.text_area(
                "Perception de l‚Äôoffre de la concurrence (Niveau de Satisfaction)", 
                competitor['Perception'],
                help="√âvaluez la satisfaction des clients envers ce concurrent."
            )
            
        with col7:    
            submit = st.form_submit_button("Mettre √† jour")
            if submit:
                if concurrent_nom.strip() == "":
                    st.error("Le nom du concurrent ne peut pas √™tre vide.")
                else:
                    st.session_state.competitors[index] = {
                        "Nom": concurrent_nom,
                        "Forces": force,
                        "Faiblesses": faiblesse,
                        "Type": type_concurrent,
                        "Perception": perception
                    }
                    st.success(f"Concurrent **{concurrent_nom}** mis √† jour avec succ√®s!")
                    st.rerun()  # Ferme automatiquement le modal

# Fonction pour supprimer un concurrent
def delete_competitor(index):
    competitor = st.session_state.competitors.pop(index)
    st.success(f"Concurrent **{competitor['Nom']}** supprim√© avec succ√®s!")
    st.rerun()  # Rafra√Æchir l'application pour mettre √† jour la liste

# Fonction pour tronquer le texte
def tronquer_texte(texte, max_caracteres=100):
    if len(texte) > max_caracteres:
        return texte[:max_caracteres] + "..."
    else:
        return texte

# Fonction pour collecter la concurrence
def collect_concurrence_pme_multi():
    """
    Ancienne fonction qui affiche la liste des concurrents et permet d'ajouter, modifier ou supprimer.
    Utilise st.session_state.competitors.
    Retourne la liste mise √† jour des concurrents.
    """
    st.subheader("Liste des Concurrents")
    if st.session_state.competitors:
        # Cr√©er une ligne d'en-t√™te
        header_cols = st.columns([2, 2, 2, 2, 2, 1, 1])
        header_cols[0].markdown("**Nom**")
        header_cols[1].markdown("**Forces**")
        header_cols[2].markdown("**Faiblesses**")
        header_cols[3].markdown("**Type**")
        header_cols[4].markdown("**Perception**")
        header_cols[5].markdown("**Act**")
        header_cols[6].markdown("**Act**")
        
        # Afficher les boutons d'action pour chaque concurrent
        for index, competitor in enumerate(st.session_state.competitors):
            cols = st.columns([2, 2, 2, 2, 2, 1, 1])  # Ajuster les proportions selon vos besoins
            nom_tronque = tronquer_texte(competitor['Nom'], max_caracteres=15)
            forces_tronque = tronquer_texte(competitor['Forces'], max_caracteres=15)
            faiblesse_tronque = tronquer_texte(competitor['Faiblesses'], max_caracteres=15)
            perception_tronque = tronquer_texte(competitor['Perception'], max_caracteres=15)
            
            cols[0].write(nom_tronque)
            cols[1].write(forces_tronque)
            cols[2].write(faiblesse_tronque)
            cols[3].write(competitor['Type'])
            cols[4].write(perception_tronque)
            # Bouton Modifier
            if cols[5].button("‚úèÔ∏è", key=f"modify_{index}"):
                edit_competitor_dialog(index)
            # Bouton Supprimer
            if cols[6].button("üóëÔ∏è", key=f"delete_{index}"):
                delete_competitor(index)
    else:
        st.info("Aucun concurrent ajout√© pour le moment.")
    
    # Bouton pour ouvrir le dialogue d'ajout en dehors du formulaire
    if st.button("Ajouter un Concurrent"):
        add_competitor_dialog()
    
    # Retourner la liste des concurrents
    return st.session_state.competitors


def collect_concurrence_pme(index_produit):
    """
    Collecte et/ou met √† jour la Concurrence pour le produit index_produit.
    Synchronise la liste des concurrents sp√©cifiques au produit avec la logique existante.
    """
    # 1. R√©cup√©rer le produit courant
    produit = st.session_state["produits_data"][index_produit]
    
    # 2. Initialiser la liste des concurrents si absente
    if "competitors" not in produit:
        produit["competitors"] = []
    
    # 3. Synchroniser la liste sp√©cifique au produit avec la variable globale
    st.session_state.competitors = produit["competitors"]
    
    # 4. Appeler la fonction legacy qui manipule st.session_state.competitors
    collect_concurrence_pme_multi()
    
    # 5. Re-synchroniser la liste mise √† jour dans le produit
    produit["competitors"] = st.session_state.competitors
    
    # 6. Mettre √† jour la session
    st.session_state["produits_data"][index_produit] = produit


# ----------------------------------------------------------------------------
# 2) Fonctions de collecte des donn√©es pour Startups
# ----------------------------------------------------------------------------

def collect_persona_startup():
    st.header("Persona - Startup")
    
    # Donn√©es D√©mographiques
    st.subheader("Donn√©es D√©mographiques")
    age = st.number_input("√Çge", min_value=18, max_value=100, value=30)
    sexe = st.text_input("Sexe", "Homme/Femme/Autre")
    localisation_detail = st.text_input("Localisation G√©ographique (ex: Paris, France)", "Paris, France")
    education = st.text_input("Niveau d'√âducation", "Ex: Licence, Master")
    profession = st.text_input("Profession", "Ex: Ing√©nieur, Designer")
    revenu_moyen = st.number_input("Revenu Moyen ($)", min_value=0, step=100, value=1000)
    
    # Param√®tres Comportementaux
    st.subheader("Param√®tres Comportementaux")
    
    sensibilite_prix = st.text_input("Sensibilit√© au Prix", placeholder="D√©crivez la sensibilit√© au prix...")
    frequence_achat = st.text_input("Fr√©quence d'Achat", placeholder="D√©crivez la fr√©quence d'achat...")
    volume_achat = st.text_input("Volume d'Achat", placeholder="D√©crivez le volume d'achat...")
    perception_qualite = st.text_area("Perception de la Qualit√©", placeholder="D√©crivez la perception de la qualit√©...")
    utilisation_tech = st.text_area("Utilisation Technologique", placeholder="D√©crivez l'utilisation technologique...")
    acces_transport = st.text_area("Accessibilit√© (Transport)", placeholder="D√©crivez l'accessibilit√© via le transport...")
    temps_disponible = st.text_area("Temps Disponible", placeholder="D√©crivez le temps disponible...")
    besoins_specifiques = st.text_area("Besoins Sp√©cifiques",placeholder= "D√©crivez les besoins sp√©cifiques...")
    motivations = st.text_area("Motivations", placeholder="D√©crivez les motivations des clients...")
    
    # Capacit√© d‚ÄôAdoption de l‚ÄôInnovation
    st.subheader("Capacit√© d‚ÄôAdoption de l‚ÄôInnovation")
    
    familiarite_tech = st.text_area("Familiarit√© avec certaines Technologies", placeholder="D√©crivez la familiarit√© technologique...")
    ouverture_changement = st.text_input("Ouverture au Changement", placeholder="Faible/Moyenne/√âlev√©e")
    barri√®res = st.text_area("Barri√®res Psychologiques/Culturelles", placeholder="D√©crivez les barri√®res psychologiques ou culturelles...")
    
    persona = {
        "√¢ge": age,
        "sexe": sexe,
        "localisation": localisation_detail,
        "√©ducation": education,
        "profession": profession,
        "revenu_moyen": revenu_moyen,
        "sensibilite_prix": sensibilite_prix,
        "frequence_achat": frequence_achat,
        "volume_achat": volume_achat,
        "perception_qualite": perception_qualite,
        "utilisation_tech": utilisation_tech,
        "acces_transport": acces_transport,
        "temps_disponible": temps_disponible,
        "besoins_specifiques": besoins_specifiques,
        "motivations": motivations,
        "familiarite_tech": familiarite_tech,
        "ouverture_changement": ouverture_changement,
        "barrieres": barri√®res
    }
    
    return persona

def collect_analyse_marche_startup():
    st.header("Analyse du March√© - Startup")
    
    # Taille du March√©
    st.subheader("Taille du March√©")
    taille_marche = st.text_area("Taille du March√©", 
                                 placeholder="D√©crivez la taille du march√©, les segments et la valeur totale.",
                                 help=(
        "D√©crivez la taille du march√© que vous visez. Incluez des informations sur la port√©e g√©ographique, les segments de client√®le, "
        "et la valeur totale du march√©. Cette section doit fournir une vue d'ensemble quantitative et qualitative du march√© potentiel. "
        "Par exemple : 'Le march√© de la sant√© num√©rique en Afrique de l'Ouest repr√©sente environ 2 milliards de dollars avec un taux de croissance annuel de 15%.'"
    ))
    
    # Segments du March√©
    st.subheader("Segments du March√©")
    segments_marche = st.text_area("Segments du March√©",
                                   placeholder="D√©crivez les segments du march√©...",
                                   help=(
        "D√©crivez les diff√©rents segments de march√© que vous ciblez. Identifiez les sous-groupes sp√©cifiques au sein du march√© global, "
        "bas√©s sur des crit√®res tels que la d√©mographie, la g√©ographie, le comportement, ou les besoins sp√©cifiques. "
        "Par exemple : 'Segments incluant les jeunes professionnels urbains, les familles avec enfants, et les seniors recherchant des solutions de sant√© √† domicile.'"
    ))
    
    # Valeur Totale du March√© ($)
    st.subheader("Valeur Totale du March√© ($)")
    valeur_totale = st.text_area("Valeur Totale du March√© ($)", 
                                 placeholder="D√©crivez la valeur totale du march√©...",
                                 help=(
        "Entrez la valeur totale estim√©e du march√© en dollars. Cette estimation doit refl√©ter la taille financi√®re du march√© que vous ciblez. "
        "Utilisez des donn√©es secondaires fiables, des √©tudes de march√© ou des rapports industriels pour appuyer votre estimation. "
        "Par exemple : 'La valeur totale du march√© de l'e-commerce en Europe est estim√©e √† 700 milliards de dollars en 2024.'"
    ))
    
    # Offres Concurrentes
    st.subheader("Offres Concurrentes")
    offres_concurrentes = st.text_area("Offres Concurrentes", 
                                       placeholder="D√©crivez les offres concurrentes...",
                                       help=(
        "D√©crivez les principales offres concurrentes sur le march√©. Identifiez les entreprises ou les produits qui r√©pondent d√©j√† aux besoins de vos segments cibles. "
        "Analysez leurs forces et faiblesses, leurs parts de march√©, leurs strat√©gies de prix, et leurs propositions de valeur. "
        "Par exemple : 'Les principaux concurrents incluent HealthPlus et MedTech Solutions, offrant des applications de gestion de sant√© avec des fonctionnalit√©s similaires mais √† des prix plus √©lev√©s.'"
    ))
    
    # Niveau de Satisfaction
    st.subheader("Niveau de Satisfaction")
    niveau_satisfaction = st.text_area("Niveau de Satisfaction", 
                                       placeholder="D√©crivez le niveau de satisfaction...",
                                       help=(
        "√âvaluez le niveau de satisfaction actuel des clients vis-√†-vis des offres concurrentes. Utilisez des enqu√™tes, des avis clients, ou des √©tudes de satisfaction pour recueillir ces informations. "
        "Identifiez les points forts et les lacunes des offres existantes du point de vue des clients. "
        "Par exemple : 'Les clients appr√©cient la facilit√© d'utilisation des applications concurrentes, mais signalent un manque de support client r√©actif et de fonctionnalit√©s personnalisables.'"
    ))
    
    # Tendances du March√©
    st.subheader("Tendances du March√©")
    tendances = st.text_area("Tendances du March√©", 
                             placeholder="D√©crivez les tendances du march√©...",
                            help=(
        "D√©crivez les principales tendances qui influencent actuellement le march√© et qui pourraient avoir un impact futur. "
        "Cela peut inclure des √©volutions technologiques, des changements r√©glementaires, des variations des comportements des consommateurs, etc. "
        "Par exemple : 'Croissance de l'utilisation des smartphones, augmentation de la demande pour des solutions de sant√© personnalis√©es, et renforcement des r√©gulations sur la protection des donn√©es de sant√©.'"
    ))
    
    # Innovations √âmergentes
    st.subheader("Innovations √âmergentes")
    innovations = st.text_area("Innovations √âmergentes", 
                               help=(
        "Identifiez et d√©crivez les innovations √©mergentes dans votre secteur qui pourraient cr√©er de nouvelles opportunit√©s ou menacer les acteurs existants. "
        "Cela peut inclure des technologies disruptives, des nouveaux mod√®les d'affaires, ou des avanc√©es scientifiques. "
        "Par exemple : 'D√©veloppement de l'intelligence artificielle pour le diagnostic m√©dical, adoption croissante de la t√©l√©m√©decine, et utilisation de la blockchain pour s√©curiser les donn√©es de sant√©.'"
    ))
    
    # Comportements √âmergents
    st.subheader("Comportements √âmergents")
    comportements_emergents = st.text_area("Comportements √âmergents", 
                                           placeholder="D√©crivez les comportements √©mergents...",
                                           help=(
        "Analysez les changements dans les comportements des consommateurs qui pourraient influencer la demande sur le march√©. "
        "Cela peut inclure des pr√©f√©rences accrues pour des produits durables, une tendance vers l'achat en ligne, ou une demande pour des services personnalis√©s. "
        "Par exemple : 'Les consommateurs montrent une pr√©f√©rence croissante pour les solutions de sant√© int√©gr√©es et personnalis√©es, avec une utilisation accrue des applications mobiles pour le suivi de la sant√©.'"
    ))
    
    analyse_marche = {
        "taille_marche": taille_marche,
        "segments_marche": segments_marche,
        "valeur_totale": valeur_totale,
        "offres_concurrentes": offres_concurrentes,
        "niveau_satisfaction": niveau_satisfaction,
        "tendances": tendances,
        "innovations": innovations,
        "comportements_emergents": comportements_emergents
    }
    
    return analyse_marche

def collect_facteurs_limitants_startup():
    st.header("Facteurs Limitants - Startup")
    
    # Contraintes Technologiques
    st.subheader("Contraintes Technologiques")
    contraintes_techno = st.text_area("Contraintes Technologiques", 
                                      placeholder="D√©crivez les contraintes technologiques...",
                                      help=(
        "D√©crivez les contraintes technologiques qui peuvent limiter le d√©veloppement ou la mise en ≈ìuvre de votre produit ou service. "
        "Cela peut inclure des limitations en termes d'infrastructure, de capacit√©s techniques, de disponibilit√© des technologies n√©cessaires, "
        "ou des d√©fis li√©s √† l'int√©gration avec des syst√®mes existants. "
        "Par exemple : 'Manque d'acc√®s √† des technologies de pointe pour le d√©veloppement de logiciels personnalis√©s, rendant difficile la cr√©ation de fonctionnalit√©s avanc√©es.'"
    ))
    
    # Contraintes √âconomiques
    st.subheader("Contraintes √âconomiques")
    contraintes_economiques = st.text_area("Contraintes √âconomiques", 
                                           placeholder="D√©crivez les contraintes √©conomiques...",
                                           help=(
        "D√©crivez les contraintes √©conomiques qui peuvent affecter votre projet ou entreprise. "
        "Cela peut inclure des limitations budg√©taires, des fluctuations de march√©, des co√ªts √©lev√©s de production, "
        "ou des difficult√©s √† obtenir des financements. "
        "Par exemple : 'Budget limit√© pour le marketing, ce qui restreint la port√©e des campagnes publicitaires et la visibilit√© du produit sur le march√©.'"
    ))
    
    # Contraintes Culturelles
    st.subheader("Contraintes Culturelles")
    contraintes_culturelles = st.text_area("Contraintes Culturelles", 
                                           placeholder="D√©crivez les contraintes culturelles...",
                                           help=(
        "D√©crivez les contraintes culturelles qui peuvent influencer votre projet ou entreprise. "
        "Cela peut inclure des diff√©rences culturelles, des normes sociales, des pr√©f√©rences des consommateurs, ou des r√©sistances au changement. "
        "Par exemple : 'Pr√©f√©rences culturelles pour des produits traditionnels, rendant difficile l'adoption de nouvelles solutions innovantes.'"
    ))
    
    # Contraintes Psychologiques et Physiologiques
    st.subheader("Contraintes Psychologiques et Physiologiques")
    contraintes_psych_phys = st.text_area("Contraintes Psychologiques et Physiologiques", 
                                          placeholder="D√©crivez ces contraintes...",
                                          help=(
        "D√©crivez les contraintes psychologiques et physiologiques qui peuvent impacter votre projet ou entreprise. "
        "Cela peut inclure des facteurs tels que la r√©sistance au changement, le stress des employ√©s, des limitations physiques li√©es √† la sant√©, "
        "ou des d√©fis li√©s √† la motivation et √† la productivit√©. "
        "Par exemple : 'R√©sistance des employ√©s √† l'adoption de nouveaux outils technologiques en raison de la peur de la perte d'emploi.'"
    ))
    
    # Contraintes R√©glementaires
    st.subheader("Contraintes R√©glementaires")
    contraintes_reglementaires = st.text_area("Contraintes R√©glementaires", 
                                              placeholder="D√©crivez les contraintes r√©glementaires...",
                                              help=(
        "D√©crivez les contraintes r√©glementaires qui peuvent affecter votre projet ou entreprise. "
        "Cela peut inclure des lois, des r√©gulations, des normes industrielles, des exigences de conformit√©, ou des barri√®res administratives. "
        "Par exemple : 'Conformit√© stricte aux r√©gulations de protection des donn√©es, n√©cessitant des investissements suppl√©mentaires en s√©curit√© informatique.'"
    ))
    
    facteurs_limitants = {
        "contraintes_technologiques": contraintes_techno,
        "contraintes_economiques": contraintes_economiques,
        "contraintes_culturelles": contraintes_culturelles,
        "contraintes_psych_phys": contraintes_psych_phys,
        "contraintes_reglementaires": contraintes_reglementaires
    }
    
    return facteurs_limitants

def collect_concurrence_startup():
    st.header("√âvaluation de la Concurrence - Startup")
    
    # Concurrents Directs
    concurrents_directs = st.text_area("Concurrents Directs", placeholder="Listez les concurrents directs...")
    
    # Concurrents Indirects
    concurrents_indirects = st.text_area("Concurrents Indirects", placeholder="Listez les concurrents indirects...")
    
    # Forces des Concurrents
    forces_concurrents = st.text_area("Forces des Concurrents", placeholder="D√©crivez les forces des concurrents...")
    
    # Faiblesses des Concurrents
    faiblesses_concurrents = st.text_area("Faiblesses des Concurrents", placeholder="D√©crivez les faiblesses des concurrents...")
    
    # Niveau de Satisfaction des Clients envers les Concurrents
    satisfaction_concurrence = st.slider("Satisfaction des Clients envers les Concurrents", 0, 10, 5)
    
    # Niveau de Confiance des Clients envers les Concurrents
    confiance_concurrence = st.slider("Confiance des Clients envers les Concurrents", 0, 10, 5)
    
    concurrence = {
        "concurrents_directs": concurrents_directs,
        "concurrents_indirects": concurrents_indirects,
        "forces_concurrents": forces_concurrents,
        "faiblesses_concurrents": faiblesses_concurrents,
        "satisfaction_concurrence": satisfaction_concurrence,
        "confiance_concurrence": confiance_concurrence
    }
    
    return concurrence




def get_metaprompt(type_entreprise):
    """
    Retourne un metaprompt sp√©cifique bas√© sur le type d'entreprise.
    """
    metaprompts = {
        "PME": """**M√©ta-Prompt pour l‚Äô√âlaboration d‚Äôun Business Model pour PME Traditionnelle (Int√©grant des Innovations Low-Tech et Adapt√©es aux Contextes Africains ou √âmergents)**

        **Votre R√¥le :**  
        Vous √™tes un expert en strat√©gie d‚Äôentreprise, marketing, UX, innovation frugale (low-tech et √©ventuellement high-tech), et √©laboration de Business Models. Vous devez g√©n√©rer un Business Model complet, clair, chiffr√©, coh√©rent et innovant, adapt√© √† une PME qui op√®re dans un environnement local (par exemple en Afrique ou dans d‚Äôautres pays √©mergents) o√π les r√©alit√©s technologiques, √©conomiques, culturelles et r√©glementaires diff√®rent des contextes occidentaux fortement num√©ris√©s.  
        L‚Äôinnovation ne sera pas seulement technologique de pointe (high-tech), mais aussi low-tech (solutions simples, robustes, faciles d‚Äôentretien, peu consommatrices de ressources), et tenant compte des infrastructures limit√©es, des pr√©f√©rences culturelles, de la disponibilit√© intermittente de l‚Äô√©lectricit√©, du co√ªt de la connectivit√©, de l‚Äôimportance du lien social, etc.

        Votre t√¢che s‚Äôorganise en trois phases :  
        1. Configuration Initiale (Collecte et Structuration des Donn√©es)  
        2. √âtapes Interm√©diaires (Analyse, Contexte, Empathie, Parcours Client, Optimisation)  
        3. Production Finale (Business Model Canvas)

        Pour chaque phase, suivez les instructions et veillez √† :  
        - Prendre en compte la persona (donn√©es d√©mographiques, comportementales, capacit√©s d‚Äôadoption de l‚Äôinnovation)
        - Pendre en compte l'arbre √† problemes(Probl√®me Principal,Causes Principales,Impact,Parties Prenantes , Opportunit√©s)  
        - Analyser le march√© (taille, segments, offres existantes formelles et informelles, niveau de satisfaction, tendances locales, disponibilit√© de ressources, logistique)  
        - Int√©grer les facteurs limitants (technologiques, √©conomiques, culturels, psychologiques, physiologiques, r√©glementaires, infrastructures limit√©es)  
        - √âvaluer la concurrence (locale, informelle, substituts traditionnels), comprendre les niveaux de satisfaction et de confiance  
        - Comprendre le parcours client (avant, pendant, apr√®s), int√©grer la carte d‚Äôempathie, identifier les gains et souffrances sp√©cifiques au contexte (par exemple : importance du bouche-√†-oreille, confiance interpersonnelle, exigence de robustesse, maintenance locale)  
        - V√©rifier syst√©matiquement la coh√©rence, proposer des optimisations et ajustements  
        - Avant d‚Äôintroduire une innovation (low-tech ou high-tech), s‚Äôassurer que la persona est pr√™te √† l‚Äôadopter, en tenant compte de l‚Äôaccessibilit√©, du co√ªt, de la simplicit√© et de la r√©putation  
        - Produire un Business Model Canvas complet (9 blocs), avec des m√©ta-prompts sp√©cifiques pour chacun des blocs, adapt√©s au contexte local

        ---

        ### Phase 1 : Configuration Initiale (Entr√©e de Donn√©es)

        1. **Recueille et structure les informations suivantes :**  
        - **Persona** :  
            - Donn√©es d√©mographiques : √¢ge, sexe, localisation (zones urbaines, p√©ri-urbaines, rurales), niveau d‚Äô√©ducation (alphab√©tisation, langues parl√©es), profession (artisans, commer√ßants, agriculteurs, employ√©s, ind√©pendants), revenu moyen.  
            - Param√®tres comportementaux : sensibilit√© au prix (budgets limit√©s, n√©cessit√© de micro-paiements), fr√©quence et volume d‚Äôachat (achats ponctuels, saisonniers, hebdomadaires), perception de la qualit√© (fiabilit√©, durabilit√©), utilisation technologique (t√©l√©phones basiques, smartphones d‚Äôentr√©e de gamme, acc√®s limit√© √† Internet), accessibilit√© (distance aux points de vente, transport limit√©), temps disponible (horaires de travail, saison des r√©coltes), besoins sp√©cifiques (ex : acc√®s √† l‚Äôeau, √©nergie, outils agricoles, services financiers de base, √©ducation des enfants, soins de sant√©).  
            - Capacit√© d‚Äôadoption de l‚Äôinnovation : Familiarit√© avec certaines technologies (mobile money, radios communautaires, solutions solaires), ouverture au changement d√©pendant de la preuve sociale, de la confiance dans la communaut√©, de la simplicit√© et robustesse du produit/service. Barri√®res psychologiques/culturelles (m√©fiance envers les nouvelles solutions √©trang√®res, pr√©f√©rence pour le contact humain, importance de la recommandation de la famille ou du chef de village).  
        
        - **Arbre √† Probl√®me** :
            - Contexte:Description g√©n√©rale du domaine ou de la situation actuelle (secteur d'activit√©, environnement g√©ographique, tendances actuelles du march√©), Facteurs externes influen√ßant la situation (r√©glementations, conditions √©conomiques, technologies √©mergentes),Facteurs internes pertinents (ressources disponibles, comp√©tences cl√©s, structure organisationnelle).
            - Probl√®me Principal : Identification du d√©fi ou de l'obstacle central (nature du probl√®me, circonstances sp√©cifiques),Impact imm√©diat sur l'organisation ou le projet (effets sur les op√©rations, la performance financi√®re, la r√©putation).
            - Causes Principales :Causes internes contribuant au probl√®me (processus inefficaces, manque de comp√©tences, ressources limit√©es),Causes externes contribuant au probl√®me (concurrence accrue, changements de march√©, √©volutions technologiques),Interaction entre les causes internes et externes (comment elles se renforcent mutuellement).
            - Impact:Cons√©quences financi√®res du probl√®me (pertes de revenus, augmentation des co√ªts, rentabilit√© r√©duite),Effets op√©rationnels (d√©lai dans les projets, baisse de productivit√©, qualit√© des services ou produits affect√©e),Impact sur les parties prenantes (satisfaction des clients, moral des employ√©s, relations avec les partenaires).
            - Parties Prenantes :Identification des acteurs concern√©s ou impact√©s (clients, employ√©s, fournisseurs, investisseurs, communaut√© locale),Int√©r√™ts et attentes de chaque partie prenante vis-√†-vis du probl√®me (besoins sp√©cifiques, priorit√©s, pr√©occupations).
            - Opportunit√©s :Pistes d‚Äôam√©lioration ou de r√©solution du probl√®me (solutions innovantes, meilleures pratiques),Strat√©gies pour att√©nuer les causes principales (formation, r√©organisation, investissement technologique),Actions pour maximiser les impacts positifs (exploitation des forces, diversification, partenariats strat√©giques),

        - **Analyse du March√©** :  
            - Taille du march√© local : estimer la population concern√©e, le pouvoir d‚Äôachat moyen, les infrastructures disponibles.  
            - Segments : populations urbaines vs rurales, artisans, commer√ßants, coop√©ratives, PME locales, secteur informel.  
            - Offres concurrentes existantes : solutions traditionnelles (artisanales, informelles), importations bas de gamme, programmes d‚ÄôONG, concurrents locaux ou √©trangers, mod√®les low-cost.  
            - Niveau de satisfaction actuel : Les clients sont-ils satisfaits des solutions actuelles ? Y a-t-il un manque de fiabilit√©, de formation, de SAV ?  
            - Tendances : adoption progressive du mobile money, sensibilisation croissante √† l‚Äô√©nergie solaire, √©mergence de petites coop√©ratives, engouement pour des solutions durables et r√©parables.  
            - Innovations et comportements √©mergents : r√©emploi, √©conomie circulaire, mise en commun de ressources, augmentation des transferts d‚Äôargent via mobile.  
        
        - **Facteurs Limitants** :  
            - Contraintes technologiques : faible acc√®s √† l‚Äô√©lectricit√© stable, couverture internet in√©gale, outils technologiques rudimentaires, importance de solutions low-tech (pompes manuelles, panneaux solaires simples, syst√®mes de filtration d‚Äôeau basiques).  
            - Contraintes √©conomiques : revenus limit√©s, volatilit√© des prix, acc√®s restreint au cr√©dit, n√©cessit√© d‚Äô√©taler les paiements (micro-paiements, cr√©dit rotatif, tontines).  
            - Contraintes culturelles : langues locales, importance de la confiance interpersonnelle, r√©ticence √† adopter des produits inconnus sans d√©monstration ou validation par la communaut√©.  
            - Contraintes psychologiques et physiologiques : besoin de solutions simples d‚Äôutilisation, ergonomiques, adapt√©es aux conditions climatiques (chaleur, poussi√®re), faible taux d‚Äôalphab√©tisation n√©cessitant des modes d‚Äôemploi visuels.  
            - Contraintes r√©glementaires : normes locales, barri√®res douani√®res, absence de normes formelles dans certains secteurs, difficult√© √† obtenir des certifications officielles.  

        **Apr√®s avoir recueilli ces donn√©es, effectue une premi√®re analyse critique** :  
        - V√©rifie la coh√©rence des informations.  
        - Identifie les lacunes (par exemple, manque d‚Äôinformations sur le pouvoir d‚Äôachat r√©el, sur le r√©seau de distribution informel, sur le r√¥le des leaders d‚Äôopinion locaux).  
        - Propose des compl√©ments ou ajustements pour optimiser la qualit√© des donn√©es (ajouter des donn√©es sur la saisonnalit√© du march√©, l‚Äôinfluence des ONG, l‚Äôimpact des conditions climatiques, la pr√©sence ou non de microfinance).

        ---

        ### Phase 2 : √âtapes Interm√©diaires (Analyse, Contexte, Empathie, Parcours Client, Optimisation)

        2. **Analyse du Parcours Client & Carte d‚ÄôEmpathie** :  
        - D√©cris le parcours client (avant, pendant, apr√®s) en tenant compte des conditions locales :  
            - Avant : Le client prend conscience de son besoin par le bouche-√†-oreille, via un ami, un voisin, un leader communautaire, ou en √©coutant la radio locale. Il compare avec les solutions d√©j√† connues (artisan local, r√©parations informelles, solutions import√©es). Il √©value la confiance, le prix, la disponibilit√©.  
            - Pendant : Achat sur un march√© local, essai d‚Äôune d√©monstration concr√®te (d√©monstration en conditions r√©elles, sur une place de village), informations donn√©es par un vendeur itin√©rant ou un agent de confiance. Utilisation d‚Äôun mode de paiement adapt√© (cash, mobile money).  
            - Apr√®s : Suivi du produit, entretien, besoin de pi√®ces d√©tach√©es, possibilit√© de contact direct avec l‚Äôentreprise (ligne t√©l√©phonique, point de service local), √©change d‚Äôexp√©riences avec d‚Äôautres utilisateurs, √©ventuel SAV simplifi√© (r√©parations locales, pi√®ces d√©tach√©es bon march√©).  
        
        - Identifie les points de contact (march√©s, boutiques, interm√©diaires locaux, radios communautaires, SMS informatifs), obstacles (faible connectivit√©, manque d‚Äôinformations d√©taill√©es, barri√®res linguistiques), moments de v√©rit√© (premier essai du produit, premi√®re panne et r√©activit√© du SAV), frustrations (produit pas adapt√©, manuel incompr√©hensible, manque de fiabilit√©).  
        
        - Int√®gre les contraintes physiologiques, psychologiques, √©conomiques, culturelles, technologiques, r√©glementaires : par exemple, l‚Äôimportance de la simplicit√© et de la robustesse pour r√©duire la crainte d‚Äôune technologie trop complexe, la n√©cessit√© de support en langue locale, la possibilit√© de s‚Äôadapter aux normes informelles.  
        
        - Cr√©e une carte d‚Äôempathie :  
            - Pens√©es : ¬´ Est-ce que cette solution est fiable, reconnue par ma communaut√© ? Est-ce que je vais perdre mon argent si √ßa ne marche pas ? ¬ª  
            - Sentiments : M√©fiance, curiosit√©, besoin de r√©assurance, fiert√© s‚Äôil s‚Äôagit d‚Äôune innovation locale valoris√©e.  
            - Actions : Demande de conseils √† d‚Äôautres, observation d‚Äôexemples concrets, volont√© d‚Äôessayer avant d‚Äôacheter.

        3. **Gains et Souffrances** :  
        - Liste les gains : par exemple, acc√®s facilit√© √† un service vital (eau, √©nergie, outil de gestion commerciale simple), r√©duction du temps et de l‚Äôeffort, robustesse (moins de pannes), acc√®s √† un SAV local, meilleure rentabilit√© ou productivit√©.  
        - Liste les souffrances : manque de solutions adapt√©es, probl√®mes de maintenance, co√ªts initiaux trop √©lev√©s sans option de paiement flexible, manque de formation pour utiliser correctement le produit.

        4. **√âlaboration de la Carte de Valeur** :  
        - D√©finis la mission de consommation principale : r√©pondre √† un besoin fondamental (ex : un outil agricole robuste, une solution d‚Äô√©clairage solaire fiable, un service financier simple via mobile, un appareil domestique low-tech adapt√© aux pannes d‚Äô√©lectricit√©).  
        - Identifie les gains d√©j√† fournis par les offres actuelles (ex : disponibilit√© locale, prix bas) et les souffrances non adress√©es (faible qualit√©, pas de SAV, pas d‚Äôadaptation aux conditions r√©elles).  
        - Esquisse une proposition de valeur pr√©liminaire adapt√©e √† la capacit√© d‚Äôadoption de l‚Äôinnovation par la persona :  
            - Une solution simple, robuste, facilement compr√©hensible, qui peut √™tre test√©e avant achat.  
            - Un mod√®le de distribution local (agents sur le terrain), un SAV accessible, un support en langue locale, des options de paiement flexible (mobile money, tontines, microcr√©dit).  
            - Int√©gration progressive d‚Äôinnovations low-tech (p. ex. appareils m√©caniques robustes, panneaux solaires portables) ou high-tech simple (SMS, USSD, application mobile l√©g√®re) si l‚Äôutilisateur est pr√™t.

        5. **D√©termination du Segment de Clients** :  
        - Choisis le type de relation (B2C direct, B2B via des coop√©ratives, B2B2C via des distributeurs locaux).  
        - Priorise les segments qui correspondent le mieux :  
            - Par exemple, petits commer√ßants urbains ayant un pouvoir d‚Äôachat limit√© mais stables, agriculteurs n√©cessitant un outil fiable en milieu rural, coop√©ratives d‚Äôartisans pr√™ts √† adopter une solution pour am√©liorer leur productivit√©.  
        - Tient compte de leur sensibilit√© au prix, de leur ouverture √† l‚Äôinnovation, de leur capacit√© √† comprendre et utiliser la solution, de la n√©cessit√© de formation.

        6. **Analyse des Probl√®mes et Solutions (Canvas de Probl√®me)** :  
        - Identifie les probl√®mes majeurs : par exemple, la difficult√© √† acc√©der √† un produit fiable, le manque d‚Äôinformations, la complexit√© du produit, le co√ªt trop √©lev√© d‚Äôune solution import√©e haut de gamme.  
        - Associe chaque probl√®me √† une solution :  
            - Probl√®me : manque de SAV ‚Üí Solution : r√©seau de r√©parateurs locaux form√©s.  
            - Probl√®me : prix √©lev√© d‚Äôentr√©e ‚Üí Solution : offres en micro-paiements, location-vente, partenariats avec microfinance.  
            - Probl√®me : manque de confiance ‚Üí Solution : d√©monstrations, t√©moignages de pairs, communication via radios locales et leaders d‚Äôopinion.  
        - Justifie en quoi les solutions sont meilleures que l‚Äôexistant : plus adapt√©es, plus abordables, plus simples, prenant en compte la r√©alit√© du terrain (faible infrastructure, besoin de r√©silience, faible taux d‚Äôalphab√©tisation).

        **Apr√®s ces √©tapes, fais une analyse interm√©diaire** :  
        - V√©rifie la coh√©rence du contexte, du parcours client, des solutions propos√©es.  
        - Assure-toi que les innovations (low-tech, partenariats locaux, solutions de paiement flexible) sont compr√©hensibles et adoptables par la persona.  
        - Propose des ajustements strat√©giques : simplification du produit, ajustement du prix, ajout d‚Äôun canal de distribution plus local, formation des utilisateurs, partenariats avec des ONG ou des radios locales.

        ---

        ### Phase 3 : Production Finale du Business Model (Business Model Canvas)

        Sur la base des analyses pr√©c√©dentes, g√©n√®re un Business Model Canvas complet. Utilise les m√©ta-prompts suivants pour chaque bloc, en tenant compte du contexte local, des solutions low-tech et des infrastructures limit√©es :

        1. **Segments de Clients**  
        M√©ta-Prompt :  
        ¬´ D√©finis pr√©cis√©ment les segments de clients cibl√©s, en tenant compte :  
        - De leurs caract√©ristiques sociod√©mographiques (√¢ge, sexe, localisation, niveau d‚Äô√©ducation, profession, revenu, langue).  
        - De leurs comportements d‚Äôachat (fr√©quence, volume, sensibilit√© au prix, recours au cr√©dit informel, canaux de confiance : march√©s locaux, revendeurs informels, chefs de village, radios).  
        - De leur maturit√© technologique (t√©l√©phones basiques, usage de SMS/USSD, familiarit√© avec le mobile money, radio, bouche-√†-oreille, rencontres physiques).  
        - De leur capacit√© d‚Äôadoption de l‚Äôinnovation (ouverture au changement si d√©monstration concr√®te, barri√®res culturelles, besoin de preuves, pr√©f√©rences pour du low-tech robuste plut√¥t que du high-tech fragile).  
        - De leurs contraintes (faible pouvoir d‚Äôachat, saisons de r√©colte, temps de disponibilit√©, acc√®s difficile √† l‚Äô√©lectricit√© ou √† internet).  
        Int√®gre √©galement des sc√©narios √©volutifs (si l‚Äô√©conomie se d√©grade, r√©duction de l‚Äôachat ou passage √† des solutions plus frugales ; si la technologie progresse, adoption graduelle de services num√©riques simples).  
        Justifie pourquoi ces segments sont retenus : potentiel de rentabilit√©, facilit√© d‚Äôacc√®s via des canaux locaux, r√©ceptivit√© √† la proposition de valeur (am√©liorer leur vie de fa√ßon concr√®te, fiable, abordable). ¬ª

        2. **Proposition de Valeur**  
        M√©ta-Prompt :  
        ¬´ D√©taille la proposition de valeur en explicitant :  
        - Les besoins fondamentaux (eau, √©nergie, information, outils productifs, services financiers simples).  
        - Les souffrances clientes (manque de fiabilit√©, difficult√© d‚Äôentretien, complexit√© des produits, m√©fiance) et comment elles sont r√©solues (simplicit√©, robustesse, support local, preuves sociales).  
        - Les gains fournis (am√©lioration de la productivit√©, √©conomies de temps, durabilit√©, r√©duction de la d√©pendance √† des syst√®mes complexes, meilleure gestion financi√®re) et inclure les b√©n√©fices √©motionnels (confiance, fiert√©, reconnaissance sociale).  
        - La diff√©renciation par rapport aux offres concurrentes : int√©gration dans le tissu local, formation d‚Äôagents locaux, facilit√© d‚Äôentretien, pricing adapt√©, low-tech combin√© avec technologie simple (mobile money), SAV local.  
        - L‚Äôintroduction progressive de l‚Äôinnovation : d√©monstrations pratiques, formation sur le terrain, tutoriels en langue locale, partenariat avec leaders communautaires.  
        - Variantes selon les segments : option premium (un meilleur SAV, une maintenance plus pouss√©e) pour les clients plus solvables, version ultra-simplifi√©e pour les segments plus conservateurs ou √† tr√®s faible pouvoir d‚Äôachat. ¬ª

        3. **Canaux de Distribution**  
        M√©ta-Prompt :  
        ¬´ D√©finis les canaux par lesquels les clients seront inform√©s, convaincus, ach√®teront et utiliseront le produit/service, en tenant compte des r√©alit√©s locales :  
        - Canaux hors ligne : march√©s locaux, boutiques physiques, vente itin√©rante, radios communautaires, affichages, d√©monstrations sur place, coop√©ratives agricoles, leaders religieux ou communautaires.  
        - Canaux digitaux l√©gers : SMS, USSD, appels t√©l√©phoniques, WhatsApp, Facebook local, mobile money.  
        - N√©cessit√© d‚Äôomnicanalit√© adapt√©e au contexte : coh√©rence entre communication radio, d√©monstration physique, et suivi par t√©l√©phone.  
        - Simplicit√© d‚Äôacc√®s et besoin d‚Äôaccompagnement p√©dagogique (formation dans les march√©s, brochures visuelles, tutoriels audio).  
        - Adaptabilit√© des canaux si le march√© √©volue (ex: introduction progressive d‚Äôune application mobile si la connectivit√© s‚Äôam√©liore).  
        Justifie chaque canal (co√ªt, accessibilit√©, confiance) et comment il r√©duit les obstacles √† l‚Äôadoption, am√©liore la satisfaction, et s‚Äôint√®gre dans le parcours client local. ¬ª

        4. **Relations Clients**  
        M√©ta-Prompt :  
        ¬´ D√©cris la nature et la qualit√© des relations √©tablies avec les clients :  
        - Personnalisation via un r√©seau d‚Äôagents locaux qui connaissent la langue, la culture, et les besoins.  
        - Communaut√© : cr√©ation de groupes d‚Äôutilisateurs, d‚Äôassociations locales, de rencontres de d√©monstration, √©v√©nements communautaires o√π les clients √©changent leurs exp√©riences.  
        - Automatisation : mise en place d‚Äôun service SMS de rappel, d‚Äôune hotline t√©l√©phonique simple, d‚Äôun chatbot vocal si la technologie le permet (ou service d‚Äôappels humains en langue locale).  
        - Fid√©lisation : r√©ductions pour clients fid√®les, options de maintenance pr√©ventive, acc√®s √† des mises √† jour techniques simples, partenariats avec des ONG pour aider √† la formation continue.  
        - Gestion des plaintes et retours : politique claire de SAV, r√©paration locale, garantie adapt√©e, d√©lais de r√©ponse rapides.  
        Int√®gre la dimension culturelle (contact humain valoris√©), psychologique (confiance, besoin de r√©assurance), r√©glementaire (respect des r√®gles locales, si existantes). Explique comment ces relations √©voluent au fil du temps et renforcent la CLV dans un contexte de march√© volatile. ¬ª

        5. **Sources de Revenus**  
        M√©ta-Prompt :
        ¬´ D√©taille les m√©canismes de g√©n√©ration de revenus :  
        - Mod√®les de tarification : vente directe √† prix abordable, options de micro-paiements √©chelonn√©s, cr√©dit via partenaire de microfinance, location-vente, abonnement l√©ger (maintenance), freemium (d√©monstration gratuite, paiement pour les pi√®ces d√©tach√©es).  
        - Justification des prix : aligner le prix sur le pouvoir d‚Äôachat, offrir un excellent rapport qualit√©/durabilit√©/prix, tenir compte des r√©f√©rentiels locaux (si les concurrents informels sont tr√®s bon march√©, justifier la valeur par la fiabilit√©).  
        - R√©ductions des freins √©conomiques : essai avant achat, garantie satisfait ou rembours√©, partenariats avec ONG ou institutions locales.  
        - Diversification des revenus : ventes crois√©es (pi√®ces d√©tach√©es, formation), partenariats B2B (ventes en gros √† des coop√©ratives), publicit√© locale, sponsorisation par des institutions de d√©veloppement.  
        - Adaptation aux changements : si le march√© se contracte, proposer des mod√®les encore plus frugaux, si la r√©glementation change, s‚Äôadapter par des produits conformes.  
        Explique comment cette structure de revenus soutient la viabilit√© √† long terme et reste coh√©rente avec la proposition de valeur et la sensibilit√© au prix de la persona. ¬ª

        6. **Ressources Cl√©s**  
        M√©ta-Prompt :  
        ¬´ Identifie toutes les ressources indispensables :  
        - Ressources Humaines : agents locaux (form√©s aux langues et contextes locaux), r√©parateurs, formateurs, personnels de SAV.  
        - Ressources Technologiques : outils de communication simples (t√©l√©phones basiques, logiciels l√©gers), syst√®mes de paiement mobile, √©ventuellement une plateforme centralis√©e mais l√©g√®re.  
        - Ressources Intellectuelles : savoir-faire sur l‚Äôadaptation du produit au contexte local, guides visuels, partenariats de R&D avec des instituts techniques locaux.  
        - Ressources Mat√©rielles : pi√®ces d√©tach√©es robustes, mat√©riaux durables, √©quipements simples qui ne n√©cessitent pas une infrastructure complexe.  
        - Ressources Financi√®res : capital initial, fonds de roulement, acc√®s √† la microfinance ou √† des investisseurs sociaux, tr√©sorerie pour faire face aux saisons difficiles.  
        - Ressources Relationnelles : liens solides avec les communaut√©s, chefs traditionnels, radios locales, ONG, institutions de d√©veloppement.  
        Pour chaque ressource, justifie pourquoi elle est critique (ex. sans agents locaux, pas de confiance ; sans mat√©riaux robustes, produit inutilisable), et comment ces ressources assurent un avantage concurrentiel durable. ¬ª

        7. **Activit√©s Cl√©s**  
        M√©ta-Prompt :  
        ¬´ D√©cris les activit√©s indispensables :  
        - D√©veloppement & Innovation : adapter le produit aux conditions locales (climat, langue), am√©liorer la durabilit√©, simplifier l‚Äôusage.  
        - Production & Livraison : fabrication locale ou semi-locale, contr√¥le de la qualit√©, approvisionnement en pi√®ces robustes, logistique simple (transport par camions, motos, √¢nes si n√©cessaire).  
        - Marketing & Ventes : communication via radios communautaires, d√©monstrations physiques, formation d‚Äôagents, distribution de brochures visuelles.  
        - Relation Client & Support : formation du personnel de SAV, mise en place d‚Äôune hotline t√©l√©phonique, ateliers pratiques, visites r√©guli√®res sur le terrain.  
        - Partenariats & N√©gociations : conclure des partenariats avec ONG, coop√©ratives, associations villageoises, n√©gocier des conditions avantageuses avec fournisseurs locaux.  
        Int√®gre une perspective adaptative : si la demande fluctue, ajuster les stocks, si une nouvelle r√©glementation appara√Æt, adapter le produit. Justifie comment chaque activit√© soutient la proposition de valeur. ¬ª

        8. **Partenaires Cl√©s**  
        M√©ta-Prompt :  
        ¬´ Liste et justifie les partenaires strat√©giques :  
        - Fournisseurs locaux : garantissant disponibilit√© et qualit√© des mati√®res premi√®res.  
        - Distributeurs locaux et interm√©diaires informels : acc√®s direct √† la client√®le, r√©duction des co√ªts d‚Äôacquisition.  
        - Partenaires technologiques locaux ou ONG : formation, maintenance, R&D adapt√©e.  
        - Organismes de certification locaux, influenceurs communautaires, m√©dias (radios, journaux locaux) : augmentent la cr√©dibilit√© et la confiance.  
        - Institutions financi√®res (microfinance) : faciliter l‚Äôacc√®s au cr√©dit, au paiement √©chelonn√©.  
        Anticipe les risques (un partenaire cl√© fait d√©faut, troubles politiques, p√©nuries) et pr√©vois des alternatives (autres fournisseurs, diversification g√©ographique). Explique comment ces partenariats renforcent la proposition de valeur et l‚Äôefficacit√© op√©rationnelle. ¬ª

        9. **Structure de Co√ªts**  
        M√©ta-Prompt :  
        ¬´ D√©taille les co√ªts :  
        - Co√ªts fixes : salaires des agents locaux, loyers de petits entrep√¥ts, licences minimales, amortissement de mat√©riel de base.  
        - Co√ªts variables : achat des mati√®res premi√®res, commission aux revendeurs, campagnes radio, formation continue, SAV.  
        - Co√ªts li√©s √† l‚Äôinnovation : R&D pour adapter le produit, formation des √©quipes, tests terrain.  
        Analyse la rentabilit√© :  
        - Le mod√®le de revenus couvre-t-il ces co√ªts ?  
        - Possibilit√©s de r√©duire les co√ªts (sourcing local moins cher, √©conomies d‚Äô√©chelle, recyclage, revente de pi√®ces usag√©es).  
        - Strat√©gies pour faire face aux fluctuations (augmenter la part de services, moduler les prix, limiter le stock).  
        Explique comment la structure de co√ªts reste en ligne avec la proposition de valeur, le niveau de vie local, et comment elle assure la p√©rennit√© financi√®re √† long terme. ¬ª

        ---

        **Instructions Finales** :  
        Apr√®s avoir utilis√© ces m√©ta-prompts pour chaque bloc du Business Model Canvas, effectue une derni√®re v√©rification :  
        - Assure-toi que tous les blocs sont coh√©rents et align√©s avec la proposition de valeur, le parcours client et les r√©alit√©s locales.  
        - V√©rifie que l‚Äôinnovation (low-tech ou high-tech adapt√©e) est r√©ellement adoptable par la persona, apporte un avantage concurrentiel durable, et que les contraintes (culturelles, √©conomiques, r√©glementaires, infrastructurelles) sont prises en compte.  
        - Contr√¥le la rentabilit√©, la viabilit√© √† long terme, et la flexibilit√© face aux changements (variations saisonni√®res, crises √©conomiques, √©volution des r√©glementations ou de la p√©n√©tration technologique).  
        - Ajuste les √©l√©ments (segments, prix, canaux, partenariats) si n√©cessaire pour am√©liorer la robustesse du mod√®le.  
        - Fournis un r√©capitulatif global du Business Model, mettant en avant la logique, la coh√©rence, la proposition de valeur diff√©renciante et quelques chiffres (taille du march√© estim√©e, co√ªts, revenus, marge, etc.) pour valider la viabilit√© √©conomique.

        Le r√©sultat final doit √™tre un Business Model clair, complet, adapt√© au contexte local, pr√™t √† √™tre test√© ou impl√©ment√©, avec une feuille de route pour l‚Äôadoption progressive de l‚Äôinnovation et une vision claire des points de diff√©renciation face aux solutions traditionnelles ou informelles existantes.
        """,
        
        
        "Startup": """ Tu es un assistant expert en strat√©gie d‚Äôentreprise, marketing, UX, innovation et √©laboration de Business Models. Ton r√¥le est de g√©n√©rer un Business Model complet, clair, chiffr√©, coh√©rent et innovant, en suivant trois phases : Configuration Initiale, √âtapes Interm√©diaires (Analyse, Contexte, Empathie, Parcours Client, Optimisation) et Production Finale (Business Model Canvas).

        Tout au long du processus, tu dois :
        - Prendre en compte la persona (donn√©es d√©mographiques, comportementales, capacit√©s d‚Äôadoption de l‚Äôinnovation).
        - Pendre en compte l'arbre √† problemes(Probl√®me Principal,Causes Principales,Impact,Parties Prenantes , Opportunit√©s)  
        - Analyser le march√© (taille, segments, offres existantes, niveau de satisfaction, tendances).
        - Int√©grer les facteurs limitants (technologiques, √©conomiques, culturels, psychologiques, physiologiques, r√©glementaires).
        - √âvaluer la concurrence et comprendre le niveau de satisfaction actuel.
        - Comprendre le parcours client (avant, pendant, apr√®s), la carte d‚Äôempathie, les gains et souffrances.
        - V√©rifier syst√©matiquement la coh√©rence, proposer des optimisations et ajustements.
        - Avant d‚Äôintroduire une innovation, t‚Äôassurer que la persona est pr√™te √† l‚Äôadopter.
        - Produire un Business Model Canvas complet (9 blocs), avec des meta-prompts sp√©cifiques pour chacun des blocs.

        Voici les √©tapes :

        ### Phase 1 : Configuration Initiale (Entr√©e de Donn√©es)

        1. Recueille et structure les informations suivantes :
        - **Persona :**
            - Donn√©es d√©mographiques : √Çge, sexe, localisation, niveau d‚Äô√©ducation, profession, revenu.
            - Param√®tres comportementaux : Sensibilit√© au prix, budget, fr√©quence et volume d‚Äôachat, perception de la qualit√©, utilisation technologique, accessibilit√©, temps disponible, besoins, motivations.
            - Capacit√© d‚Äôadoption de l‚Äôinnovation : Familiarit√© technologique, ouverture au changement, barri√®res psychologiques ou culturelles.
        
        - **Arbre √† Probl√®me** :
            - Contexte:Description g√©n√©rale du domaine ou de la situation actuelle (secteur d'activit√©, environnement g√©ographique, tendances actuelles du march√©), Facteurs externes influen√ßant la situation (r√©glementations, conditions √©conomiques, technologies √©mergentes),Facteurs internes pertinents (ressources disponibles, comp√©tences cl√©s, structure organisationnelle).
            - Probl√®me Principal : Identification du d√©fi ou de l'obstacle central (nature du probl√®me, circonstances sp√©cifiques),Impact imm√©diat sur l'organisation ou le projet (effets sur les op√©rations, la performance financi√®re, la r√©putation).
            - Causes Principales :Causes internes contribuant au probl√®me (processus inefficaces, manque de comp√©tences, ressources limit√©es),Causes externes contribuant au probl√®me (concurrence accrue, changements de march√©, √©volutions technologiques),Interaction entre les causes internes et externes (comment elles se renforcent mutuellement).
            - Impact:Cons√©quences financi√®res du probl√®me (pertes de revenus, augmentation des co√ªts, rentabilit√© r√©duite),Effets op√©rationnels (d√©lai dans les projets, baisse de productivit√©, qualit√© des services ou produits affect√©e),Impact sur les parties prenantes (satisfaction des clients, moral des employ√©s, relations avec les partenaires).
            - Parties Prenantes :Identification des acteurs concern√©s ou impact√©s (clients, employ√©s, fournisseurs, investisseurs, communaut√© locale),Int√©r√™ts et attentes de chaque partie prenante vis-√†-vis du probl√®me (besoins sp√©cifiques, priorit√©s, pr√©occupations).
            - Opportunit√©s :Pistes d‚Äôam√©lioration ou de r√©solution du probl√®me (solutions innovantes, meilleures pratiques),Strat√©gies pour att√©nuer les causes principales (formation, r√©organisation, investissement technologique),Actions pour maximiser les impacts positifs (exploitation des forces, diversification, partenariats strat√©giques),
        
        - **Analyse du March√© :**
            - Taille du march√©, segments, valeur totale.
            - Offres concurrentes, niveau de satisfaction, tendances, innovations, comportements √©mergents.
        - **Facteurs Limitants :**
            - Contraintes technologiques, √©conomiques, culturelles, r√©glementaires, physiologiques, psychologiques.
        
        Apr√®s avoir recueilli ces donn√©es, effectue une premi√®re analyse critique :
        - V√©rifie la coh√©rence des informations.
        - Identifie les lacunes.
        - Propose des compl√©ments ou ajustements pour optimiser la qualit√© des donn√©es.

        ### Phase 2 : √âtapes Interm√©diaires (Analyse, Contexte, Empathie, Parcours Client, Optimisation)

        2. **Analyse du Parcours Client & Carte d‚ÄôEmpathie :**
        - D√©cris le parcours client (avant, pendant, apr√®s consommation).
        - Identifie les points de contact, obstacles, moments de v√©rit√©, frustrations.
        - Int√®gre les contraintes physiologiques, psychologiques, √©conomiques, culturelles, technologiques, r√©glementaires.
        - Cr√©e une carte d‚Äôempathie (pens√©es, sentiments, actions) pour comprendre l‚Äôexp√©rience du client √† chaque √©tape.

        3. **Gains et Souffrances :**
        - √Ä partir du parcours client et de la carte d‚Äôempathie, liste les gains (b√©n√©fices, r√©assurance, sentiment de comp√©tence) et les souffrances (probl√®mes non r√©solus, frustrations, co√ªts d‚Äôopportunit√©).

        4. **√âlaboration de la Carte de Valeur :**
        - D√©finis la mission de consommation principale (besoin fondamental).
        - Identifie les gains d√©j√† fournis par les offres actuelles.
        - Mets en √©vidence les souffrances non adress√©es.
        - Esquisse une proposition de valeur pr√©liminaire, adapt√©e √† la capacit√© d‚Äôadoption de l‚Äôinnovation par la persona.

        5. **D√©termination du Segment de Clients :**
        - Choisis le type de relation (B2C, B2B, B2B2C‚Ä¶).
        - Priorise les segments (taille, pouvoir d‚Äôachat, sensibilit√© au prix, ouverture √† l‚Äôinnovation, contraintes) qui correspondent le mieux √† la proposition de valeur.

        6. **Analyse des Probl√®mes et Solutions (Canvas de Probl√®me) :**
        - Identifie clairement les probl√®mes majeurs √† r√©soudre.
        - Associe chaque probl√®me √† une solution sp√©cifique, justifie en quoi elle est meilleure que les offres existantes.

        Apr√®s ces √©tapes, effectue une analyse interm√©diaire :
        - V√©rifie la coh√©rence du contexte, du parcours client, des solutions propos√©es.
        - Assure-toi que les innovations sont compr√©hensibles, utiles et adoptables par la persona.
        - Propose des ajustements strat√©giques (simplification de l‚Äôoffre, ajustement du prix, s√©lection de segments plus pertinents, etc.) si n√©cessaire.

        ### Phase 3 : Production Finale du Business Model (Business Model Canvas)

        Sur la base des analyses pr√©c√©dentes, g√©n√®re un Business Model Canvas complet. Utilise les meta-prompts suivants pour chaque bloc :

        1. **Segments de Clients**  
        M√©ta-Prompt :  
        ¬´ D√©finis pr√©cis√©ment les segments de clients cibl√©s, en tenant compte :  
        - De leurs caract√©ristiques sociod√©mographiques (√¢ge, sexe, localisation, niveau d‚Äô√©ducation, profession, revenu).  
        - De leurs comportements d‚Äôachat (fr√©quence, volume, sensibilit√© au prix, crit√®res de qualit√©) et de leur maturit√© technologique (utilisation d‚Äôoutils num√©riques, appareils connect√©s, plateformes en ligne).  
        - De leur capacit√© d‚Äôadoption de l‚Äôinnovation (ouverture au changement, barri√®res psychologiques, √©ventuelle r√©ticence culturelle).  
        - De leurs contraintes physiologiques (accessibilit√©, ergonomie), psychologiques (stress, anxi√©t√©, besoin de r√©assurance), √©conomiques (pouvoir d‚Äôachat, rapport qualit√©/prix), culturelles (normes, tabous) et r√©glementaires (normes l√©gales, certifications).  
        Int√®gre √©galement des sc√©narios √©volutifs :  
        - Si la technologie √©volue, comment ce segment r√©agit-il ?  
        - S‚Äôil y a une crise √©conomique, ces clients r√©duisent-ils leur consommation ?  
        - Une partie du segment est-elle pr√™te √† payer plus pour des options premium ?  
        Justifie pourquoi ces segments sont retenus, comment ils se distinguent de segments non cibl√©s, et comment leur potentiel de rentabilit√©, leur facilit√© d‚Äôacc√®s, et leur r√©ceptivit√© √† la proposition de valeur justifient leur inclusion. ¬ª

        2. **Proposition de Valeur**  
        M√©ta-Prompt :  
        ¬´ D√©taille la proposition de valeur en explicitant :  
        - Les besoins fondamentaux adress√©s (mission de consommation principale).  
        - Les souffrances clientes (manque de temps, complexit√©, mauvaise qualit√©, manque de confiance, crainte face √† l‚Äôinnovation) et comment elles sont r√©solues.  
        - Les gains fournis (gain de temps, √©conomie d‚Äôargent, facilit√© d‚Äôutilisation, statut social, tranquillit√© d‚Äôesprit), y compris les b√©n√©fices √©motionnels et symboliques.  
        - La diff√©renciation par rapport aux offres concurrentes (qualit√© sup√©rieure, innovation plus accessible, prix comp√©titifs, service client exemplaire, partenariats de prestige).  
        - L‚Äôint√©gration de l‚Äôinnovation : montre comment elle est introduite progressivement, comment l‚Äô√©ducation ou la formation du client est assur√©e, et comment les barri√®res √† l‚Äôadoption sont lev√©es (essais gratuits, d√©monstrations, tutoriels, certifications reconnues).  
        - Pr√©vois des variantes de proposition de valeur en fonction des segments, si n√©cessaire (une version premium pour les early adopters innovants, une version simplifi√©e pour les plus conservateurs). ¬ª

        3. **Canaux de Distribution**  
        M√©ta-Prompt :  
        ¬´ D√©finis les canaux par lesquels les clients seront inform√©s, convaincus, ach√®teront et utiliseront le produit/service. Consid√®re :  
        - Les canaux en ligne (site web, application mobile, plateformes e-learning, r√©seaux sociaux, partenariats avec marketplaces, influenceurs, SEO, SEA).  
        - Les canaux hors ligne (magasins physiques, salons professionnels, conf√©rences, revendeurs, agents sur le terrain).  
        - La n√©cessit√© de coh√©rence entre les points de contact (omnicanal), la simplicit√© d‚Äôacc√®s, le besoin d‚Äôaccompagnement p√©dagogique (webinaires, tutoriels vid√©o), et les contraintes technologiques de la persona (faible bande passante, pr√©f√©rence pour un canal mobile vs desktop).  
        - L‚Äôadaptabilit√© des canaux si les conditions du march√© changent (p√©nurie d‚Äôun canal, √©volution l√©gale, concurrence d‚Äôun nouveau canal).  
        Justifie pourquoi chaque canal est choisi, comment il s‚Äôint√®gre dans le parcours client, comment il favorise l‚Äôadoption de l‚Äôinnovation, et comment il est optimis√© pour r√©duire les co√ªts d‚Äôacquisition et am√©liorer la satisfaction. ¬ª

        4. **Relations Clients**  
        M√©ta-Prompt :  
        ¬´ D√©cris la nature et la qualit√© des relations que l‚Äôentreprise √©tablira avec ses clients :  
        - Personnalisation : existe-t-il un accompagnement individuel, des conseils sur mesure, une assistance humaine ou une IA conversationnelle ?  
        - Communaut√© : les clients peuvent-ils interagir entre eux (forums, r√©seaux sociaux, clubs, rencontres physiques) pour renforcer leur sentiment d‚Äôappartenance et √©changer des exp√©riences ?  
        - Automatisation : y a-t-il des √©l√©ments de self-service, de chatbots, de bases de connaissances en ligne ? Est-ce adapt√© aux cibles moins technophiles ?  
        - Fid√©lisation : cartes de fid√©lit√©, programmes de r√©compenses, contenus exclusifs, mises √† jour gratuites, offres sp√©ciales pour clients fid√®les.  
        - Gestion des plaintes et retours : proc√©dures de remboursement, garantie de satisfaction, SLA pour r√©pondre aux demandes critiques.  
        Int√®gre la dimension psychologique (rassurer les clients sur l‚Äôinnovation), culturelle (certains clients pr√©f√®rent un contact humain), r√©glementaire (besoin de conformit√© avec les lois sur la protection des donn√©es).  
        Explique comment ces relations √©voluent au fil du temps (du premier contact √† la fid√©lisation), comment elles am√©liorent la CLV, et comment elles s‚Äôadaptent aux changements de march√© (nouveaux concurrents, crises √©conomiques). ¬ª

        5. **Sources de Revenus**  
        M√©ta-Prompt :  
        ¬´ D√©taille les m√©canismes de g√©n√©ration de revenus :  
        - Mod√®le de tarification : abonnement mensuel, paiement √† l‚Äôusage, achat unique, freemium avec options premium, licences, commissions.  
        - Justification des prix : comment le prix refl√®te-t-il la valeur per√ßue par le client ? Est-il align√© avec le pouvoir d‚Äôachat du segment, la concurrence, la qualit√© et l‚Äôinnovation propos√©e ?  
        - Options de r√©duction des freins √©conomiques : essais gratuits, garantie satisfait ou rembours√©, paiement √©chelonn√©, remises pour les early adopters.  
        - Diversification des revenus : ventes crois√©es, upselling, partenariats, publicit√©, formation compl√©mentaire, mon√©tisation de donn√©es (en respectant la r√©glementation).  
        - Adaptation √† des changements de contexte : si le march√© se contracte, proposer un mod√®le plus flexible ? Si une r√©glementation limite certains types de revenus, anticiper une alternative ?  
        Explique comment cette structure de revenus soutient la croissance, la rentabilit√©, et s‚Äôint√®gre avec les co√ªts pr√©vus. V√©rifie la coh√©rence avec la proposition de valeur et la sensibilit√© au prix de la persona. ¬ª

        6. **Ressources Cl√©s**  
        M√©ta-Prompt :  
        ¬´ Identifie toutes les ressources indispensables :  
        - Ressources Humaines : √©quipes multidisciplinaires (ing√©nieurs, designers UX, experts marketing, formateurs, support client multilingue) n√©cessaires √† la cr√©ation, maintenance, am√©lioration de l‚Äôoffre.  
        - Ressources Technologiques : plateformes e-learning, serveurs, logiciels de personnalisation, outils d‚ÄôIA, applications mobiles, infrastructure IT s√©curis√©e.  
        - Ressources Intellectuelles : brevets, marques, contenus propri√©taires, m√©thodologies exclusives, licences de tiers, donn√©es clients prot√©g√©es.  
        - Ressources Financi√®res : capitaux n√©cessaires au lancement, tr√©sorerie pour r√©sister √† une p√©riode de faible demande, fonds pour R&D.  
        - Ressources Relationnelles : partenariats strat√©giques, acc√®s √† un r√©seau d‚Äôinfluenceurs, certification par des organismes reconnus.  
        Explique pour chaque ressource pourquoi elle est critique, comment elle se combine avec les autres pour d√©livrer la proposition de valeur, soutenir l‚Äôadoption de l‚Äôinnovation, et maintenir un avantage concurrentiel. Prends en compte la robustesse de la cha√Æne d‚Äôapprovisionnement, la r√©silience face aux crises, et la propri√©t√© intellectuelle. ¬ª

        7. **Activit√©s Cl√©s**  
        M√©ta-Prompt :  
        ¬´ D√©cris les activit√©s indispensables pour que le Business Model fonctionne :  
        - D√©veloppement & Innovation : R&D, am√©lioration continue, int√©gration de nouvelles fonctionnalit√©s, veille concurrentielle, tests utilisateurs.  
        - Production & Livraison : cr√©ation de contenu, mise √† jour r√©guli√®re, gestion du stock (si produit physique), maintenance technique, logistique.  
        - Marketing & Ventes : campagnes publicitaires, r√©f√©rencement, webinaires de d√©monstration, √©ducation du march√©, gestion des promotions.  
        - Relation Client & Support : formation du personnel du support, chatbots, assistance multicanal, traitement des plaintes, suivi de la satisfaction.  
        - Partenariats & N√©gociations : recherche, signature et entretien des partenariats cl√©s, mise en place de conditions avantageuses.  
        Int√®gre une perspective adaptative :  
        - Quelles activit√©s mener si la demande fluctue fortement ?  
        - Comment r√©allouer les ressources si une nouvelle r√©glementation √©merge ?  
        Justifie comment chaque activit√© soutient la proposition de valeur, favorise l‚Äôadoption de l‚Äôinnovation, et contribue √† la rentabilit√© globale. ¬ª

        8. **Partenaires Cl√©s**  
        M√©ta-Prompt :  
        ¬´ Liste et justifie les partenaires strat√©giques critiques :  
        - Fournisseurs : apportant des ressources rares, de haute qualit√© ou √† un co√ªt avantageux.  
        - Distributeurs : offrant un acc√®s facilit√© √† certains segments, r√©duisant les co√ªts d‚Äôacquisition, am√©liorant la visibilit√©.  
        - Partenaires technologiques : fournissant une infrastructure fiable, des outils d‚ÄôIA performants, ou des solutions compl√©mentaires (API, int√©grations).  
        - Organismes de certification, influenceurs, m√©dias sp√©cialis√©s : augmentant la cr√©dibilit√©, validant la qualit√©, rassurant sur l‚Äôinnovation.  
        - Associations professionnelles, clusters, √©cosyst√®mes sectoriels : permettant de suivre les tendances, d‚Äôanticiper les changements r√©glementaires, d‚Äô√©changer les bonnes pratiques.  
        Explique comment ces partenariats renforcent la proposition de valeur, am√©liorent la confiance du client, augmentent l‚Äôefficacit√© op√©rationnelle, r√©duisent les co√ªts ou les risques, et soutiennent la strat√©gie √† long terme. Anticipe les risques : et si un partenaire cl√© fait d√©faut ? Quels sont les plans B ? ¬ª

        9. **Structure de Co√ªts**  
        M√©ta-Prompt :  
        ¬´ D√©taille tous les co√ªts engendr√©s par les ressources, activit√©s et partenariats cl√©s :  
        - Co√ªts fixes (salaires, loyers, licences, amortissement de l‚Äôinfrastructure).  
        - Co√ªts variables (marketing, support client, acquisition de nouveaux outils, commission aux partenaires).  
        - Co√ªts li√©s √† l‚Äôinnovation (R&D, tests, formations du personnel), et comment ils sont amortis dans le temps.  
        Analyse la rentabilit√© :  
        - Le mod√®le de revenus couvre-t-il ces co√ªts ?  
        - Quelles mesures de r√©duction de co√ªts sont possibles (automatisation, sourcing moins cher, √©conomies d‚Äô√©chelle) ?  
        - Comment r√©agir face √† des fluctuations du march√© (baisse de la demande, hausse des prix des ressources) ?  
        Explique comment la structure de co√ªts reste align√©e avec la proposition de valeur, les segments, et les moyens financiers de l‚Äôentreprise. Justifie la p√©rennit√© financi√®re en montrant que les marges sont satisfaisantes, que le CAC est raisonnable par rapport √† la CLV, et que le mod√®le reste rentable m√™me en cas de stress. ¬ª

        ### Instructions Finales

        Apr√®s avoir utilis√© ces m√©ta-prompts pour chaque bloc du Business Model Canvas, effectue une derni√®re v√©rification :

        - Assure-toi que tous les blocs sont coh√©rents entre eux et s‚Äôalignent parfaitement avec la proposition de valeur et le parcours client.
        - V√©rifie que l‚Äôinnovation propos√©e est bien adoptable par la persona, qu‚Äôelle apporte un avantage concurrentiel durable, et que les contraintes sont g√©r√©es.  
        - Contr√¥le la rentabilit√©, la viabilit√© √† long terme, et la flexibilit√© pour s‚Äôadapter aux changements de march√©.
        - Ajuste les √©l√©ments (segments, prix, canaux, partenariats) si n√©cessaire pour am√©liorer la robustesse du mod√®le.

        Le r√©sultat final doit √™tre un Business Model clair, complet, et pr√™t √† √™tre test√© ou impl√©ment√©, avec une feuille de route pour l‚Äôadoption de l‚Äôinnovation et une vision claire des points de diff√©renciation face √† la concurrence.


        Enfin, fournis un r√©capitulatif global du Business Model, mettant en avant la logique, la coh√©rence, et la proposition de valeur diff√©renciante. Indique, si possible, des chiffres (taille du march√©, CAC, CLV, taux de conversion, CA projet√©) pour valider la viabilit√© √©conomique.""",
       
        "Autre": "Fournissez une approche g√©n√©rale adapt√©e √† votre entreprise."
    }
    return metaprompts.get(type_entreprise, metaprompts["Autre"])



def obtenir_business_model(nom_entreprise, type_entreprise, montant_projet ,previousdata, rubriques, ameliorations, generation=1):
    
    """
    Interroge ChatGPT (API OpenAI) pour g√©n√©rer le contenu textuel
    des diff√©rents blocs du Business Model Canvas.
    'type_entreprise' peut √™tre "PME", "Startup", "Grande Entreprise", etc.
    'previousdata' peut etre du contenue html generer precedement par chatgpt
    """
    MODEL="gpt-4o"
    MAX_TOKENS_PER_REQUEST = 150
    utilisateur = get_current_user()
    
    # Calculer les tokens restants
    tokens_purchased = utilisateur.get('tokens_purchased', 0)
    tokens_consumed = utilisateur.get('tokens_consumed', 0)
    tokens_remaining = tokens_purchased - tokens_consumed
    
    
    # R√©cup√©rer le metaprompt bas√© sur le type d'entreprise
    metaprompt = get_metaprompt(type_entreprise)

    
    if generation == 1:
        # Premi√®re g√©n√©ration avec les nouvelles rubriques
        prompt = f"""
        {metaprompt}
        
        Mener la reflexions du generation du business modele sur base des indications(M√©ta-Prompt) precedents du metaprompts; 
        Chercher les chiffres et autres donn√©es sur internet, assurer-vous d'etre trop precis et excat en fonction fonction des donn√©es collecter sur internet 
        G√©n√®re le contenu d'un Business Model Canvas en format HTML et CSS encapsul√© dans des blocs de code sans aucun autre texte pour une entreprise nomm√©e '{nom_entreprise}'.
        Le type d'entreprise est : {type_entreprise}.
        Le montant que le proprietaire est en mesure d'investir dans le projet est:{montant_projet} veuillez considerer ce montant lors de generation de ressources cl√©s, Canaux de Distribution, Relation client 
        
        Utilisez les donn√©es ci apr√®s(dans la rubriques) comme donn√©es collect√© lors de la Phase 1 (Configuration Initiale (Entr√©e de Donn√©es)): {rubriques}
        Certains partie du rubriques peuvent etre vide, si c'est les cas generer les donn√©es manquantes. les chiffres entrer pour l'utilisateur doivent etre imperativement tenue en compte
        
        √Ä faire imp√©rativement :
        Je veux imp√©rativement 9 blocs distincts, r√©dig√©s en fran√ßais, avec les titres en gras et des listes √† puces si n√©cessaire :
          - Partenaires cl√©s
          - Activit√©s cl√©s
          - Offre (proposition de valeur)
          - Relation client
          - Segments de client√®le
          - Ressources cl√©s
          - Canaux de distribution
          - Structure des co√ªts
          - Sources de revenus
        Fournissez 5 √† 10 points ou √©l√©ments (phrases) par bloc pour un contenu riche et adapt√©, soyez concis.
        """
    else:
        # Deuxi√®me g√©n√©ration (am√©lioration) en utilisant le BMC pr√©c√©dent et les nouvelles rubriques
        # Prompt ajust√© sans num√©rotation dans les titres
        prompt = f"""
        {metaprompt}
        
        Voici les autres recommandations pour generer un business model ameliorer:{ameliorations}.
        
        Voici le business model √† ameliorer generer precedement {previousdata}.
        
        Ameliorer ces business modeles modeles sur bases de metaprompt 
        Mener la reflexions du generation du business modele sur base des indications(M√©ta-Prompt) precedents du metaprompts; 
        Chercher les chiffres et autres donn√©es sur internet, assurer-vous d'etre trop precis et excat en fonction fonction des donn√©es collecter sur internet 
        G√©n√®re le contenu d'un Business Model Canvas en format HTML pour une entreprise nomm√©e '{nom_entreprise}'.
        Le type d'entreprise est : {type_entreprise}.
        Le montant que le proprietaire est en mesure d'investir dans le projet est:{montant_projet} veuillez considerer ce montant lors de generation de ressources cl√©s, Canaux de Distribution, Relation client 
        
        
        
        sachant que les donn√©es qui ont permit la generation du precedent business model sont: {rubriques}.
        si l'utlisateur a donner les donn√©es complementaires, veuillez en tenir compte dans la generation, et ca doit etre imperativement prioritaire.
        Si dans un bloque un utilisateur n'as pas donner des informations (elements), veuillez generer,
        Si l'utilisateur √† donn√© des elements que vous juger peu, generer d'autres et les ajout√©es √† ce que l'utlisateur √† fournit.
        
        √† faire imperativement est:
        Je veux imp√©rativement 9 blocs distincts, r√©dig√©s en fran√ßais, avec les titres en gras et des listes √† puces si n√©cessaire :
        - Partenaires cl√©s
        - Activit√©s cl√©s
        - Offre (proposition de valeur)
        - Relation client
        - Segments de client√®le
        - Ressources cl√©s
        - Canaux de distribution
        - Structure des co√ªts
        - Sources de revenus
        Fournis 5 √† 10 points ou √©lements(phrases) , meme plus pour chacun afin d'avoir un contenu riche et adapt√©, soyez concis.
        """
    # Calculer les tokens n√©cessaires (entr√©e + r√©ponse pr√©vue)
    # Calculer le nombre de tokens dans l'entr√©e utilisateur
    
    tokens_in_input = count_tokens(nom_entreprise+""+type_entreprise+""+previousdata+""+json.dumps(rubriques) +""+ameliorations, MODEL)
    tokens_needed = tokens_in_input + MAX_TOKENS_PER_REQUEST
    # V√©rifier si l'utilisateur a assez de tokens
    if tokens_remaining < tokens_needed:
        st.error("Vous n'avez pas assez de tokens pour effectuer cette action. Veuillez acheter plus de tokens.")
        return
    else:
        try:
            response = openai.ChatCompletion.create(
                model=MODEL,
                messages=[
                    {"role": "system", "content": "Tu es un assistant expert en g√©n√©ration de business  et business plan."},
                    {"role": "user", "content": prompt},
                ],
                max_tokens=5000,
                temperature=0.7
            )
            html_genere = response.choices[0].message.content.strip()
            tokens_utilises = response['usage']['total_tokens']
                    # Consommer les tokens
            success, message = consommer_tokens(st.session_state['user_info'], tokens_utilises)
            
            if success:
                st.success(message)
            else:
                st.error(f"Erreur")
            return html_genere
        except Exception as e:
            st.error(f"Erreur lors de la g√©n√©ration du contenu  {e}")
            return ""




# ----------------------------------------------------------------------------
# 3) CHAIN OF THOUGTHTS
# ----------------------------------------------------------------------------


def get_metaprompt_chain_of_thougtht(type_chain_of_thougtht):
    """
    Retourne un metaprompt sp√©cifique bas√© sur le type de Chain of Thought.
    """
    metaprompts = {
                "Creativite":"""M√©ta-Prompt : Chain of Thought pour la V√©rification de Coh√©rence 
                1. Contexte et Typologie (B2B / B2C / B2B2C)
                Identifier le type de cible : B2B, B2C ou B2B2C.
                M√©thode : V√©rifier si la solution s‚Äôadresse √† des entreprises, √† des clients finaux, ou √† une cha√Æne mixte.
                V√©rification : Le document ou la matrice de conception mentionne-t-il explicitement la nature de la relation commerciale ?
                V√©rifier l‚Äôadaptation au contexte choisi (enjeux de volume, personnalisation, cycle de d√©cision‚Ä¶).
                Suggestion si incoh√©rence :
                Ajuster la persona (profil acheteur / utilisateur) pour qu‚Äôelle refl√®te la bonne cible (ex. acheteur d‚Äôentreprise, consommateur final‚Ä¶).
                2. Analyse de la Persona avec l‚ÄôApproche Sinus Milieu
                Identifier le(s) milieu(x) Sinus le plus proche de la persona
                Objectif : Situer la persona sur un axe socioculturel pr√©cis (ex. ‚ÄúTraditionnel‚Äù, ‚ÄúH√©doniste‚Äù, ‚ÄúModerne mat√©rialiste‚Äù, ‚ÄúPragmatique adaptatif‚Äù‚Ä¶).
                M√©thode : Analyser les valeurs, le style de vie, les motivations profondes d√©crites dans la fiche persona.
                V√©rification : La persona est-elle coh√©rente avec un segment Sinus (pouvoir d‚Äôachat, rapport √† l‚Äôinnovation, etc.) ?
                Adapter la proposition de valeur aux valeurs du milieu Sinus
                Objectif : V√©rifier la compatibilit√© entre les valeurs du milieu (ex. s√©curit√©, h√©donisme, √©thique, recherche de statut) et les b√©n√©fices propos√©s.
                Suggestion si incoh√©rence :
                Revoir la concurrence : y a-t-il un rival d√©j√† bien ancr√© dans ce milieu ?
                R√©ajuster la persona : la persona peut appartenir √† un autre milieu Sinus (ex. plus ‚Äúprogressiste‚Äù ou plus ‚Äútraditionnel‚Äù) si les donn√©es terrain le justifient.
                Chiffrer la taille du milieu Sinus vis√©
                Objectif : √âvaluer la port√©e de la cible (quel % de la population ou du march√© total).
                Suggestion d‚Äôit√©ration :
                Si ce milieu repr√©sente moins de 5% du march√©, envisager un ciblage compl√©mentaire (deuxi√®me milieu Sinus proche) ou affiner la proposition.
                3. Arbre √† Probl√®mes et Pertinence du Besoin
                Racines du Probl√®me : Les causes profondes du besoin sont-elles bien d√©finies ?
                M√©thode : Faire correspondre chaque branche de l‚Äôarbre √† un aspect concret de la ‚Äúdouleur client‚Äù (en lien avec les motivations Sinus).
                V√©rification : Les causes sont-elles valid√©es par des retours terrain (sondages, interviews) ?
                Si incoh√©rence (branches peu justifi√©es, besoin trop faible) :
                Liste de points √† creuser :
                Ajuster la persona (r√©√©valuer ses motivations ou son budget) si la ‚Äúdouleur‚Äù n‚Äôest pas si forte pour ce milieu Sinus.
                V√©rifier les contraintes (techniques, l√©gales) : la solution propos√©e pourrait √™tre trop ambitieuse ou sous-dimensionn√©e.
                Examiner la concurrence : un acteur r√©pond-il d√©j√† mieux √† ce probl√®me ?
                4. Contraintes Limitantes (L√©gales, Techniques, Budg√©taires)
                Clart√© et r√©alisme des contraintes
                M√©thode : Associer chaque contrainte (budg√©taire, l√©gale‚Ä¶) aux fonctionnalit√©s cl√©s.
                V√©rification : Compatibilit√© avec le milieu Sinus vis√© (pouvoir d‚Äôachat, ouverture √† l‚Äôinnovation, etc.).
                Si incoh√©rence (conflit entre besoin et contrainte) :
                Liste d‚Äôactions :
                R√©duire la port√©e du produit si le budget d√©passe trop la capacit√© de paiement de la cible Sinus.
                Ajuster la persona : si les utilisateurs cibl√©s ont un budget plus √©lev√©, resegmenter le milieu Sinus.
                5. Analyse de la Concurrence
                Comparaison fonctionnelle et tarifs
                M√©thode : V√©rifier qu‚Äôil existe un tableau comparant fonctionnalit√©s, prix, positionnement.
                V√©rification : La concurrence vise-t-elle le m√™me milieu Sinus ou un autre ? Les arguments marketing sont-ils comparables ?
                Si incoh√©rence (prix trop √©lev√© par rapport au milieu Sinus, attributs redondants) :
                Liste d‚Äôinvestigations :
                Revoir la persona (et donc le milieu Sinus) : surestime-t-on le pouvoir d‚Äôachat ?
                Ajuster l‚Äôarbre √† probl√®mes : la proposition de valeur est-elle unique ?
                Revoir les contraintes budg√©taires (peut-on proposer une version all√©g√©e pour √™tre comp√©titif ?).
                6. Caract√©ristiques du Produit / Service / Processus
                Clart√© de la Proposition de Valeur
                M√©thode : √âtablir la correspondance ‚Äúpain point -> fonctionnalit√© -> b√©n√©fice‚Äù en tenant compte du style de consommation du milieu Sinus.
                V√©rification : Les fonctionnalit√©s r√©pondent-elles r√©ellement aux valeurs/besoins du milieu ?
                Priorisation (Kano ou autre)
                V√©rification : Les ‚Äúmust-have‚Äù sont-ils align√©s avec les besoins profonds de la cible Sinus ? Les ‚Äúattractives‚Äù sont-elles pertinentes culturellement ?
                Si incoh√©rence :
                Revoir la concurrence (les must-have sont-ils d√©j√† standardis√©s chez les concurrents ?).
                Retester la persona (motivation vs. nouvelles options de solution).
                7. √âvaluation de la Coh√©rence Globale (Inclusion Sinus Milieu)
                Cat√©gories d‚Äô√©valuation

                On √©value 6 cat√©gories :
                Persona & Sinus Milieu
                Arbre √† Probl√®mes
                Contraintes
                Concurrence
                Caract√©ristiques du produit (valeur ajout√©e, priorisation)
                Ad√©quation Sinus Milieu (styles de vie, valeurs, budget)
                Noter chaque cat√©gorie de 1 √† 5

                1 = Tr√®s faible coh√©rence
                5 = Coh√©rence compl√®te
                Calcul du Taux de Coh√©rence

                Taux de coheÀärence=6√ó5‚àë(notes sur 5)√ó100%
                Exemple : Si la somme des notes est 24/30, la coh√©rence = (24/30)√ó100% = 80%.
                Interpr√©tation :

                ‚â•80% : Coh√©rence satisfaisante. Ajustements mineurs.
                60-79% : Coh√©rence moyenne. Des interventions cibl√©es sont n√©cessaires.
                ‚â§59% : Coh√©rence insuffisante. Il faut prioritairement revoir la persona/Sinus Milieu ou l‚Äôarbre √† probl√®mes.
                8. Instructions en cas de Coh√©rence Faible ou Moyenne
                Ajuster la Persona & le Milieu Sinus
                Ex. : Affiner le revenu, le degr√© d‚Äôouverture √† l‚Äôinnovation, la sensibilit√© aux arguments ‚Äústatus / s√©curit√© / fun‚Äù.
                Compl√©ter ou Corriger l‚ÄôArbre √† Probl√®mes
                Ex. : Ajouter des donn√©es terrain, r√©√©valuer l‚Äôimpact r√©el du probl√®me, distinguer causes primaires/secondaires.
                Modifier les Contraintes
                Ex. : Revoir le budget ou la faisabilit√© technique si en contradiction avec les attentes du milieu Sinus.
                Actualiser la Concurrence
                Ex. : Mettre √† jour le benchmark (nouveaux entrants, changements de prix) ou r√©√©valuer le positionnement.
                9. Synth√®se et Relance du Processus de Cr√©ativit√©
                Mettre en ≈ìuvre les Ajustements Autoris√©s
                Persona (et milieu Sinus), Arbre √† probl√®mes, Contraintes, Concurrence.
                Recalculer la Note de Coh√©rence
                V√©rifier si elle d√©passe maintenant 80%.
                Boucler la Mise √† Jour
                Valider que les fonctionnalit√©s et la proposition de valeur restent en accord avec les nouvelles informations.
                Obtenir la Version Finalis√©e
                √ânoncer clairement la proposition de valeur, la cible Sinus, les contraintes, et la position concurrentielle mises √† jour.
                """,
                
                "BM":"""Chain of Thought pour Analyser et V√©rifier le Business Model
                1. Identification des 9 blocs du Business Model
                Pour rappel, les 9 blocs du Business Model Canvas sont :

                Segments de client√®le
                Proposition de valeur
                Canaux de distribution
                Relations client
                Flux de revenus
                Ressources cl√©s
                Activit√©s cl√©s
                Partenaires cl√©s
                Structure de co√ªts
                But : S‚Äôassurer que chaque bloc est clairement d√©crit et chiffr√© si n√©cessaire (√©quipements, ressources humaines, co√ªts estim√©s, etc.).

                2. V√©rifier la coh√©rence entre les ‚Äúr√©sultats de cr√©ativit√©‚Äù et le Business Model
                Alignement avec la Persona

                M√©thode : V√©rifier que le segment de client√®le (bloc 1) correspond √† la persona issue de la cr√©ativit√© (habitudes, pouvoir d‚Äôachat, milieu socioculturel, etc.).
                Si incoh√©rence :
                Revoir la Persona (ex. si le segment de client√®le est trop large ou trop restreint par rapport aux insights de la phase de cr√©ativit√©).
                Ajuster la Proposition de valeur (bloc 2) pour qu‚Äôelle r√©pondre aux vrais besoins de la persona.
                Int√©gration de l‚ÄôArbre √† probl√®mes / Empathy Map

                M√©thode : Chaque douleur (pain point) identifi√©e doit trouver une r√©ponse claire dans la Proposition de valeur et dans les Activit√©s cl√©s.
                Si incoh√©rence :
                Compl√©ter ou r√©viser la Proposition de valeur (bloc 2) pour couvrir les probl√®mes fondamentaux rep√©r√©s.
                V√©rifier que les Activit√©s cl√©s (bloc 7) et Ressources cl√©s (bloc 6) permettent concr√®tement de r√©soudre ces probl√®mes.
                Priorisation des fonctionnalit√©s (Kano) et impact sur le BM

                M√©thode : Les fonctionnalit√©s ‚ÄúMust-be‚Äù (basique) et ‚ÄúOne-Dimensional‚Äù (attendues) doivent appara√Ætre en priorit√© dans les Activit√©s cl√©s et Ressources cl√©s. Les fonctionnalit√©s ‚ÄúAttractives‚Äù peuvent √™tre pr√©vues mais doivent √™tre budg√©t√©es avec prudence.
                Si incoh√©rence :
                V√©rifier la Structure de co√ªts (bloc 9) pour √©viter un investissement disproportionn√© dans des fonctionnalit√©s ‚Äúattractives‚Äù non essentielles.
                R√©duire le p√©rim√®tre initial du produit (MVP) pour limiter les investissements et assurer une rentabilit√© progressive.
                3. Analyse et Validation de chaque Bloc
                Passons en revue les 9 blocs pour un contr√¥le de coh√©rence plus approfondi.

                3.1. Segments de client√®le (Bloc 1)
                Objectif : V√©rifier la pr√©cision du ou des segments cibles (B2C, B2B, B2B2C, sous-segments, etc.).
                V√©rification :
                Les segments sont-ils clairement reli√©s √† la persona ?
                Les volumes (nombre d‚Äôentreprises, nombre de clients particuliers) et la localisation sont-ils estim√©s ?
                Si incoh√©rence :
                Points √† chercher :
                Ajuster la persona (profil, pouvoir d‚Äôachat, localisation).
                V√©rifier l‚Äôarbre √† probl√®mes (la douleur est-elle trop diff√©rente d‚Äôun segment √† l‚Äôautre ?)
                3.2. Proposition de valeur (Bloc 2)
                Objectif : S‚Äôassurer que la solution (produit/service/processus) d√©crit bien comment elle r√©sout les probl√®mes identifi√©s.
                V√©rification :
                Texte clair et concis : ‚ÄúNous r√©solvons [probl√®me X] pour [segment Y] gr√¢ce √† [caract√©ristique unique Z].‚Äù
                Inclus les retours de la phase de cr√©ativit√© (pains/gains).
                Si incoh√©rence :
                Points √† pr√©ciser :
                Manque d‚Äô√©l√©ments diff√©renciateurs ?
                Proposition trop vague vs. attentes concr√®tes de la persona ?
                Alignement insuffisant avec la priorisation Kano (focus sur des features non-essentielles).
                3.3. Canaux de distribution (Bloc 3)
                Objectif : V√©rifier comment la proposition de valeur est livr√©e au client (physique, digital, vente directe, etc.).
                V√©rification :
                Les canaux sont-ils coh√©rents avec la persona (milieu urbain/rural, habilet√© num√©rique, budget pub) ?
                Est-ce que le co√ªt logistique (transport, plateforme e-commerce) est estim√© ?
                Si incoh√©rence :
                Points √† rechercher :
                Persona mal d√©finie (ex. utilisation d‚Äôun canal digital alors que la cible est peu connect√©e).
                Contradiction avec la structure de co√ªts (oublier les frais de distribution).
                3.4. Relations client (Bloc 4)
                Objectif : √âvaluer la strat√©gie de gestion de la relation (service client, SAV, self-service, communaut√©).
                V√©rification :
                Les formes de relation sont-elles adapt√©es au volume de clients (B2B vs. B2C) et aux attentes rep√©r√©es (arbre √† probl√®mes) ?
                Si incoh√©rence :
                Points √† √©claircir :
                Besoin de SAV important ? Est-il budg√©t√© ?
                La concurrence propose-t-elle un meilleur accompagnement ?
                3.5. Flux de revenus (Bloc 5)
                Objectif : Contr√¥ler le mod√®le de mon√©tisation (abonnement, vente √† l‚Äôunit√©, location, freemium‚Ä¶).
                V√©rification :
                Prix fix√©s en accord avec le pouvoir d‚Äôachat du segment, le positionnement (premium/entr√©e de gamme), et la concurrence.
                Les montants de CA pr√©visionnels sont-ils plausibles (bas√©s sur un volume de ventes r√©aliste) ?
                Si incoh√©rence :
                Points √† corriger :
                Pricing trop ambitieux vs. revenu moyen de la persona.
                Sous-estimation du co√ªt d‚Äôacquisition client (marketing, pub).
                3.6. Ressources cl√©s (Bloc 6)
                Objectif : Lister pr√©cis√©ment les ressources (humaines, mat√©rielles, financi√®res, intellectuelles) n√©cessaires.
                V√©rification :
                Les √©quipements sont-ils nomm√©s (ex. ‚Äú2 imprimantes 3D de marque X‚Äù, ‚Äúlicence CRM Y‚Äù‚Ä¶) ?
                Le budget RH (salaires, comp√©tences requises) est-il coh√©rent avec la taille du projet ?
                Si incoh√©rence :
                Points √† rechercher :
                Manque d‚Äô√©quipement critique (laboratoire, logiciel, entrep√¥t).
                Contradiction avec le mod√®le Kano : trop de ressources pour des fonctionnalit√©s ‚Äúattractives‚Äù mais non prioritaires.
                3.7. Activit√©s cl√©s (Bloc 7)
                Objectif : Quelles sont les actions indispensables pour cr√©er et d√©livrer la proposition de valeur (production, R&D, marketing, maintenance‚Ä¶) ?
                V√©rification :
                Activit√©s en ad√©quation avec les fonctionnalit√©s ‚Äúmust-have‚Äù et ‚Äúone-dimensional‚Äù (Kano).
                Planning / roadmap (et/ou phasage MVP) permettant de ma√Ætriser les co√ªts.
                Si incoh√©rence :
                Points √† clarifier :
                Activit√©s non n√©cessaires (gaspillage de ressources).
                Absence de marketing / support alors que l‚Äôarbre √† probl√®mes montre un besoin de forte √©ducation du march√©.
                3.8. Partenaires cl√©s (Bloc 8)
                Objectif : Identifier tous les acteurs externes qui renforcent la cha√Æne de valeur (fournisseurs, distributeurs, co-d√©veloppeurs).
                V√©rification :
                Contrats (ou MoU) mentionn√©s ? R√¥le pr√©cis de chaque partenaire ?
                D√©l√©gation d‚Äôactivit√©s (sous-traitance) clairement estim√©e dans la structure de co√ªts ?
                Si incoh√©rence :
                Points √† v√©rifier :
                Un partenaire existe-t-il r√©ellement ou n‚Äôest-ce qu‚Äôune hypoth√®se non valid√©e ?
                Y a-t-il un risque de d√©pendance majeure ?
                3.9. Structure de co√ªts (Bloc 9)
                Objectif : Dresser la liste de tous les co√ªts (fixes, variables), incluant les √©quipements, salaires, marketing, etc.
                V√©rification :
                Alignement avec les Ressources cl√©s et les Activit√©s cl√©s.
                Ratio co√ªt/revenu : la marge est-elle suffisante pour √™tre viable ?
                Si incoh√©rence :
                Points √† rectifier :
                Oubli de certains postes de d√©penses (maintenance, licences logicielles).
                Sur-investissement dans des fonctionnalit√©s ‚Äúattractives‚Äù au d√©triment de la rentabilit√© court terme.
                4. √âtablir un Score de Coh√©rence (en %)
                M√©thode de notation : √âvaluer chacun des 9 blocs sur une √©chelle de 1 √† 5 (1 = faible coh√©rence, 5 = parfaite coh√©rence).
                Exemple de calcul : Taux de coheÀärence=9√ó5‚àë(notes sur 5 pour chaque bloc)√ó100%
                Si la somme des notes est 35/45 (9 blocs √ó 5 = 45 points), alors la coh√©rence = (35/45)√ó100 = 78%.
                Interpr√©tation :
                ‚â•80% : Coh√©rence satisfaisante ; quelques optimisations mineures.
                60-79% : Coh√©rence moyenne ; r√©viser les points faibles identifi√©s.
                ‚â§59% : Coh√©rence insuffisante ; retravailler fortement Persona / Proposition de Valeur / Co√ªts.
                5. Guidelines en cas d‚ÄôIncoh√©rences
                Si le Taux de coh√©rence est faible ou moyen, proposez des pistes d‚Äôaction, en vous limitant (selon les r√®gles) √† :

                Persona
                Ajuster la segmentation, le pouvoir d‚Äôachat, le comportement d‚Äôachat.
                Arbre √† probl√®mes
                R√©examiner les causes profondes, v√©rifier si la proposition de valeur r√©pond vraiment aux souffrances majeures.
                Contraintes
                R√©duire l‚Äôambition technique ou le scope initial pour r√©duire les co√ªts (MVP).
                Concurrence
                Actualiser le benchmark, revoir l‚Äôargumentaire de diff√©renciation ou la tarification.
                But : Rendre le Business Model r√©aliste et conforme aux insights de la cr√©ativit√© (notamment le mod√®le de Kano, pour √©viter les surinvestissements inutiles).

                6. Optimisation du Business Model
                Limiter les investissements superflus
                Approche Kano : se concentrer d‚Äôabord sur les fonctionnalit√©s ‚Äúmust-have‚Äù et ‚Äúone-dimensional‚Äù.
                Clarifier le chiffrage
                Exemple : Nommer pr√©cis√©ment les √©quipements (‚ÄúImprimante 3D Stratasys, 2 machines CNC, 3 licences CRM Salesforce, etc.‚Äù) et leur co√ªt.
                Budg√©ter la masse salariale (nombre de postes, salaires annuels, charges sociales).
                Planifier une strat√©gie MVP
                Objectif : Tester le march√© avec un investissement minimal, prouver la traction avant de d√©ployer des fonctionnalit√©s ‚Äúattractives‚Äù.
                7. Conclusion de la Chain of Thought
                Application :
                Parcourir chaque bloc du Business Model en v√©rifiant l‚Äôint√©gration des r√©sultats de la cr√©ativit√© (persona, pains, priorisation Kano).
                Noter la coh√©rence sur 9 blocs (sur 5 points chacun) pour obtenir un score en %.
                Si le score <80%, orienter l‚Äôutilisateur vers des actions correctrices pr√©cises (sur la persona, l‚Äôarbre √† probl√®mes, les contraintes, la concurrence).
                Mettre √† jour les co√ªts, ressources et planning de mani√®re √† obtenir un Business Model viable et coh√©rent.
                """,
                
                "Analisis":"""Chain of Thought pour Analyser les Analyses Financi√®res
                
                1. V√©rification du Contexte et des Hypoth√®ses Initiales
                Alignement avec le Business Model
                Objectif : Contr√¥ler que les hypoth√®ses financi√®res (volumes de vente, prix, co√ªts fixes/variables, etc.) d√©coulent du Business Model valid√©.
                V√©rification :
                Les segments de client√®le et la proposition de valeur (ex. prix moyen, cycle d‚Äôachat) sont-ils bien traduits en chiffres ?
                Les hypoth√®ses de volume/ventes sont-elles coh√©rentes avec le march√© cibl√© et la concurrence ?
                R√©f√©rence √† la Phase de Cr√©ativit√©
                Objectif : V√©rifier que la connaissance des pains et gains clients, issue de la phase de cr√©ativit√© (persona, arbre √† probl√®mes), se refl√®te dans la politique tarifaire et dans la structure de co√ªts.
                Si incoh√©rence d√©tect√©e :
                Liste d‚Äôinformations √† chercher :
                Revoir la persona (niveau de revenu, budget moyen, fr√©quence d‚Äôachat) ;
                Recalibrer la taille du march√© ou la part de march√© vis√©e ;
                V√©rifier la strat√©gie (B2B/B2C) vs. les hypoth√®ses de prix ou volumes.
                2. Identification et Chiffrage des Ressources
                Noms des √âquipements et Ressources
                Objectif : L‚Äôanalyse financi√®re doit mentionner clairement les √©quipements (machines, serveurs, v√©hicules, etc.) et ressources humaines (profils, salaires).
                V√©rification :
                Existe-t-il une liste d√©taill√©e des ressources (ex. 3 postes de d√©veloppeurs, 1 local de 50 m¬≤, 2 machines CNC‚Ä¶) ?
                Les co√ªts associ√©s (achat, location, maintenance, salaires) sont-ils chiffr√©s de mani√®re r√©aliste (devis, r√©f√©rences march√©) ?
                Optimisation via le Mod√®le de Kano
                Objectif : V√©rifier que l‚Äôon ne surinvestit pas dans des ressources pour des fonctionnalit√©s ‚Äúindiff√©rentes‚Äù ou ‚Äúmineures‚Äù.
                Si incoh√©rence d√©tect√©e :
                Liste d‚Äôactions :
                R√©√©valuer les fonctionnalit√©s ‚Äúattractives‚Äù vs. ‚Äúindiff√©rentes‚Äù et limiter l‚Äôachat d‚Äô√©quipements s‚Äôil s‚Äôagit d‚Äôune option non prioritaire ;
                R√©attribuer le budget aux ‚Äúmust-have‚Äù identifi√©s dans le mod√®le de Kano.
                3. Plan de Tr√©sorerie et Financement
                Chronologie des Flux
                Objectif : V√©rifier que les d√©penses (investissements initiaux, co√ªts r√©currents) et les encaissements (ventes, subventions, lev√©es de fonds) sont planifi√©s dans un calendrier r√©aliste.
                V√©rification :
                Y a-t-il un tableau mensuel/trimestriel des flux de tr√©sorerie (cash in / cash out) ?
                Le besoin en fonds de roulement (BFR) est-il estim√© en tenant compte des d√©lais de paiement (B2B) ou de la saisonnalit√© (B2C) ?
                Plan de Financement
                Objectif : Confirmer la source des financements (apport personnel, pr√™t bancaire, investisseurs, crowdfunding) et leur correspondance avec les besoins chiffr√©s.
                Si incoh√©rence d√©tect√©e :
                Liste de v√©rifications :
                Les montants allou√©s couvrent-ils vraiment l‚Äôinvestissement n√©cessaire √† la mise en place des fonctionnalit√©s ‚Äúmust-have‚Äù ?
                Les investissements ‚Äúfacultatifs‚Äù (features attractives mais secondaires) peuvent-ils √™tre report√©s ou financ√©s plus tard ?
                4. Compteur de R√©sultat Pr√©visionnel (CRP) et Structure des Co√ªts
                Estimation des Ventes
                Objectif : S‚Äôassurer que les recettes attendues sont coh√©rentes avec les hypoth√®ses de volume/prix et l‚Äô√©tude de march√©.
                V√©rification : Les quantit√©s annuelles (ou mensuelles) de ventes sont-elles cr√©dibles (ex. 10 000 ventes/an) au regard de la cible ?
                Charges Variables et Fixes
                Objectif : V√©rifier le niveau de charges (mati√®res premi√®res, sous-traitance, marketing, etc.).
                Si incoh√©rence d√©tect√©e :
                Liste d‚Äôactions :
                Revoir la tarification si la marge unitaire est trop faible ou trop √©lev√©e ;
                R√©duire certaines charges li√©es aux fonctionnalit√©s jug√©es ‚Äúnon essentielles‚Äù (Kano) pour ne pas alourdir les co√ªts.
                5. Bilan Pr√©visionnel et Amortissements
                Clart√© sur les √âquipements
                Objectif : Retrouver, dans l‚Äôactif du bilan, les biens d‚Äô√©quipement cit√©s (ordinateur, serveurs, machines).
                V√©rification : Les amortissements sont-ils calcul√©s sur une dur√©e r√©aliste ? Les taux d‚Äôamortissement sont-ils coh√©rents avec les normes comptables (ex. 3 ans, 5 ans) ?
                Patrimoine et Fonds Propres
                Objectif : S‚Äôassurer que la structure du financement (capitaux propres vs. dettes) est en ad√©quation avec la capacit√© de l‚Äôentreprise √† rembourser.
                Si incoh√©rence d√©tect√©e :
                Liste de v√©rifications :
                Les capitaux propres initiaux du porteur de projet sont-ils sous-estim√©s ou surestim√©s ?
                Les immobilisations superflues (cf. Kano) peuvent-elles √™tre all√©g√©es ou diff√©r√©es ?
                6. Seuil de Rentabilit√© et Point Mort
                Calcul du Seuil de Rentabilit√©
                Objectif : Identifier le chiffre d‚Äôaffaires minimal √† atteindre pour couvrir tous les co√ªts (fixes + variables).
                V√©rification : La m√©thode de calcul (marge sur co√ªts variables ou autre) est-elle explicit√©e ?
                Temps d‚ÄôAtteinte du Point Mort
                Objectif : V√©rifier la dur√©e n√©cessaire pour √™tre rentable (6 mois, 1 an, 2 ans ?).
                Si incoh√©rence d√©tect√©e :
                Liste de questions :
                Les projections de ventes sont-elles trop optimistes ?
                Existe-t-il une solution pour r√©duire les co√ªts (et donc le point mort) en s√©lectionnant moins de fonctionnalit√©s ?
                7. Analyse de Sensibilit√© et Sc√©narios
                Sc√©narios Pessimiste / Moyen / Optimiste
                Objectif : Mesurer la robustesse du projet face √† des variations (ventes 20% plus faibles, co√ªts 10% plus √©lev√©s‚Ä¶).
                V√©rification : L‚Äôanalyse financi√®re pr√©sente-t-elle 2 ou 3 sc√©narios ? Les impacts sur le cash-flow ou la rentabilit√© sont-ils clairs ?
                Mesures d‚ÄôAjustement
                Objectif : Anticiper des plans B (ex. reporter un investissement, r√©duire les effectifs).
                Si incoh√©rence d√©tect√©e :
                Liste de contr√¥les :
                Les ressources ‚Äúnon prioritaires‚Äù (Kano) peuvent-elles √™tre r√©duites en cas de sc√©nario pessimiste ?
                Les partenariats (co√ªteux) sont-ils flexibles ?
                8. Coh√©rence avec les Ressources du Porteur de Projet
                V√©rifier l‚ÄôAd√©quation avec le Profil du Porteur
                Objectif : Comparer les besoins financiers totaux (investissements, BFR) avec les ressources r√©elles du porteur (apports, capacit√©s d‚Äôendettement).
                V√©rification :
                Les apports personnels sont-ils en phase avec le plan de financement ?
                L‚Äôendettement pr√©vu (taux, dur√©e) est-il r√©aliste au vu du niveau de risque ?
                Si incoh√©rence :
                Liste d‚Äôactions :
                R√©duire les d√©penses initiales en priorisant les fonctionnalit√©s via Kano.
                Chercher un co-investisseur ou des subventions.
                9. Calcul du Taux de Coh√©rence
                Pour aboutir √† un score global, on peut √©valuer 7 cat√©gories financi√®res (chacune not√©e de 1 √† 5) :

                Hypoth√®ses de Chiffre d‚ÄôAffaires (alignement march√©, volumes, prix)
                Co√ªts Variables et Fixes (r√©alisme, coh√©rence avec ressources)
                Plan de Tr√©sorerie (flux mensuels/trimestriels, BFR, timing)
                Financement et Fonds Propres (source, niveau d‚Äôendettement)
                Amortissements et Bilan Pr√©visionnel (dur√©es, co√ªts d‚Äô√©quipement)
                Seuil de Rentabilit√© / Point Mort (r√©alisme, timing)
                Analyse de Sensibilit√© (sc√©narios, options de r√©duction via Kano)
                Notation : 1 = tr√®s faible, 5 = tr√®s bonne coh√©rence.
                Formule : Taux de coheÀärence=7√ó5‚àë(notes sur 5)√ó100%
                Exemple : si la somme des notes est 26/35, le taux = (26/35)√ó100% ‚âà 74%.
                Interpr√©tation :

                ‚â•80% : Analyses financi√®res coh√©rentes. Ajustements mineurs.
                60-79% : Coh√©rence moyenne. Des ajustements cibl√©s sont requis.
                ‚â§59% : Coh√©rence insuffisante. Il faut revoir en profondeur les hypoth√®ses, la structure des co√ªts ou les ressources du porteur.
                10. Suggestions si Coh√©rence Insuffisante
                Hypoth√®ses de Ventes
                Revoir la persona et la taille de march√©. Valider la disposition √† payer via un sondage rapide (budget ~2% du total).
                Mod√®le de Kano
                Supprimer ou reporter les fonctionnalit√©s ‚Äúindiff√©rentes‚Äù pour r√©duire l‚Äôinvestissement initial.
                Ressources / √âquipements
                Lister clairement les besoins. V√©rifier s‚Äôil existe une solution moins co√ªteuse (ex. location vs. achat).
                Financement
                V√©rifier si les apports et les pr√™ts sont suffisants pour couvrir la tr√©sorerie pendant x mois.
                R√©alisme des Marges
                S‚Äôassurer que la marge unitaire permet de couvrir les frais fixes √† moyen terme.
                11. Conclusion et It√©ration Finale
                Mettre √† Jour le Dossier Financier
                Ajuster les donn√©es (prix, volume, ressources, plan de tr√©sorerie) en fonction des incoh√©rences d√©tect√©es.
                Recalculer le Taux de Coh√©rence
                V√©rifier si le score s‚Äôam√©liore (objectif : ‚â•80%).
                Validation Globale
                S‚Äôassurer que la phase de cr√©ativit√© (pains/gains, persona), le business model (segments, ressources, co√ªts) et les analyses financi√®res (r√©alistes, chiffr√©es, optimis√©es) forment un ensemble coh√©rent.
                Utilisation de cette Chain of Thought
                Appliquer les √©tapes (1 √† 11) pour analyser l‚Äôexistant (documents financiers, hypoth√®ses de recettes, co√ªts, plan de financement, etc.).
                Attribuer une note de 1 √† 5 √† chaque cat√©gorie (hypoth√®ses de CA, plan de tr√©sorerie, etc.).
                Calculer le Taux de Coh√©rence final en %.
                Si le score est <80%, suivre la liste de suggestions (priorisation via Kano, r√©vision de la persona, etc.).
                Revalider jusqu‚Äô√† ce que les analyses financi√®res soient suffisamment r√©alistes, claires et ajust√©es aux ressources du porteur et aux strat√©gies du Business Model.
                """,
                
                "BP":""" Chain of Thought pour Analyser le Plan d‚ÄôAffaires Global
                1. V√©rification du Cadre Global et du Contexte du Projet
                Clarifier la port√©e du plan d‚Äôaffaires
                Objectif : Savoir si ce plan couvre un nouveau produit, un service, une activit√© globale ou l‚Äôensemble de l‚Äôentreprise.
                V√©rification : L‚Äôintroduction ou le sommaire mentionne-t-il explicitement le p√©rim√®tre (ex. ‚ÄúD√©veloppement d‚Äôune nouvelle gamme B2C‚Äù ou ‚ÄúPlan global de l‚Äôentreprise‚Äù)?
                Alignement avec les analyses macro-micro
                Objectif : S‚Äôassurer que les diagnostics PESTEL & PORTER (environnement politique, √©conomique, social, technologique, environnemental, l√©gal, ainsi que concurrence) sont bien pris en compte.
                V√©rification : Les menaces et opportunit√©s identifi√©es (ex. cadre r√©glementaire, forces concurrentielles) sont-elles int√©gr√©es √† la strat√©gie finale du plan ?
                But : Confirmer que le plan d‚Äôaffaires s‚Äôancre dans un contexte clairement d√©fini et prend en compte l‚Äôenvironnement macro et micro.

                2. Validation de la Coh√©rence G√©n√©rale avec les Phases Pr√©c√©dentes
                R√©sultats de la Cr√©ativit√©
                Objectif : V√©rifier que les insights cl√©s (persona, arbre √† probl√®mes, proposition de valeur, priorisations via Kano) sont bien retranscrits dans le plan.
                V√©rification : Les pains et gains clients, les fonctionnalit√©s must-have ou attractive sont-elles pr√©sentes dans la description du produit/service ?
                Business Model et Analyses Financi√®res
                Objectif : Contr√¥ler la coh√©rence entre le Business Model (9 blocs) et les documents financiers (hypoth√®ses de ventes, structure de co√ªts, plan de financement).
                V√©rification : Les chiffres mentionn√©s (CA pr√©visionnel, budget marketing, co√ªts de production) correspondent-ils √† ce qui appara√Æt dans les annexes financi√®res ?
                But : √âviter tout d√©calage entre les blocs de cr√©ation de valeur et les tableaux financiers.

                3. V√©rification de la Planification et des Objectifs SMART
                Nature et Formulation des Objectifs
                Objectif : Les objectifs (de vente, de rentabilit√©, de d√©veloppement‚Ä¶) sont-ils Sp√©cifiques, Mesurables, Atteignables, R√©alistes et Temporellement d√©finis ?
                V√©rification : Existe-t-il un plan d‚Äôaction avec des indicateurs quantitatifs (ex. ‚ÄúAtteindre 100k‚Ç¨ de CA au 2e trimestre‚Äù ou ‚ÄúConqu√©rir 10% de part de march√© local en un an‚Äù) ?
                Coh√©rence avec les Param√®tres du Projet
                Objectif : V√©rifier que la taille de l‚Äôentreprise, le niveau de ressources, et le stade de d√©veloppement (start-up, PME, scale-up) sont en accord avec ces objectifs.
                Si incoh√©rence d√©tect√©e :
                Liste d‚Äôactions :
                R√©duire ou √©chelonner l‚Äôambition si les ressources ne suffisent pas.
                D√©tailler plus clairement le calendrier de r√©alisation (ex. plan Gantt).
                But : S‚Äôassurer que les objectifs ne sont pas seulement ambitieux, mais √©galement r√©alistes et planifi√©s.

                4. V√©rification des Informations Critiques et Identifiants de l‚ÄôEntreprise
                Informations L√©gales & Forme Juridique
                Objectif : S‚Äôassurer que le plan inclut la forme juridique (SARL, SA, SAS, etc.), le num√©ro RCCM, le num√©ro d‚ÄôImp√¥t, le num√©ro d‚Äôidentification nationale, etc.
                V√©rification : Ces informations sont-elles pr√©sentes ? Si l‚Äôentreprise n‚Äôest pas encore cr√©√©e, y a-t-il une mention sur la forme pr√©vue et les formalit√©s √† venir ?
                Identit√© Bancaire et Dates Cl√©s
                Objectif : V√©rifier que le plan renseigne (ou pr√©voit) les comptes bancaires, la date de cr√©ation, les √©volutions majeures (lev√©es de fonds, changements de statuts).
                Si incoh√©rence d√©tect√©e :
                Liste de donn√©es manquantes :
                Absence d‚ÄôIBAN ou de compte d√©di√© ?
                Prochaines √©ch√©ances d‚Äôimmatriculation non pr√©cis√©es ?
                But : Garantir que toutes les mentions l√©gales et coordonn√©es n√©cessaires sont pr√©sentes pour un dossier professionnel et complet.

                5. V√©rification de la Section ‚ÄúMarch√©, Concurrence et Marketing‚Äù
                Pr√©cisions sur le March√©
                Objectif : Confirmer la taille du march√©, la segmentation, la dynamique (croissance, saisonnalit√©) et les preuves associ√©es (√©tudes, sondages).
                V√©rification : Les donn√©es sont-elles r√©elles ou simplement estim√©es ? Y a-t-il des sources cit√©es ?
                Concurrence et Strat√©gie Marketing
                Objectif : V√©rifier que le plan mentionne les acteurs concurrents (directs, indirects) et la strat√©gie pour se positionner (prix, distribution, communication).
                Si incoh√©rence d√©tect√©e :
                Liste de questions :
                Les concurrents majeurs identifi√©s lors de l‚Äôanalyse de l‚Äôenvironnement (Porter) apparaissent-ils ici ?
                Les 4P (Produit, Prix, Place, Promotion) sont-ils d√©taill√©s ?
                But : S‚Äôassurer que la vision du march√© est fond√©e, et que la strat√©gie marketing est adapt√©e et √©tay√©e.

                6. V√©rification de la Section ‚ÄúOrganisation, Personnel et Associ√©s‚Äù
                Pr√©sentation du Personnel Cl√©
                Objectif : V√©rifier que le plan nomme les dirigeants, les fondateurs, les associ√©s strat√©giques, leurs r√¥les et leurs comp√©tences.
                V√©rification : Les CV, exp√©riences, ou atouts sont-ils bri√®vement √©voqu√©s ? Les postes manquants (recrutements √† venir) sont-ils identifi√©s ?
                Co√ªt de la Main-d‚Äô≈íuvre et Fiches de Poste
                Objectif : S‚Äôassurer que le plan financier inclut le co√ªt du personnel et la r√©partition des r√¥les (ex. 2 commerciaux, 1 community manager, etc.).
                Si incoh√©rence d√©tect√©e :
                Liste d‚Äôactions :
                Ajouter une section d√©crivant chaque poste cl√©, son salaire, ses missions.
                V√©rifier la formation ou l‚Äôaccompagnement √©ventuel (co√ªts suppl√©mentaires ?).
                But : Garantir la clart√© sur l‚Äôorganisation humaine du projet et la r√©alit√© des co√ªts salariaux.

                7. V√©rification des Aspects ‚ÄúProduction et Am√©nagements‚Äù
                Production / Prestations
                Objectif : D√©tailler les moyens de production, la cha√Æne d‚Äôapprovisionnement, la logistique.
                V√©rification : Les √©quipements (machines, locaux, serveurs) d√©crits sont-ils en coh√©rence avec le Business Model et les analyses financi√®res (CAPEX/OPEX) ?
                Conformit√© Juridique / R√©glementaire
                Objectif : S‚Äôassurer que le plan int√®gre les √©ventuels certificats, licences, normes √† respecter selon le secteur (alimentaire, cosm√©tique, num√©rique, etc.).
                Si incoh√©rence d√©tect√©e :
                Liste de v√©rifications :
                Les risques r√©glementaires identifi√©s dans la PESTEL sont-ils trait√©s (DGCCRF, autorisations, douanes) ?
                Les co√ªts induits (inspection, homologation) sont-ils budg√©tis√©s ?
                But : V√©rifier qu‚Äôaucun angle mort technique ou r√©glementaire ne compromet l‚Äôensemble.

                8. Analyse des Risques et Coh√©rence avec PESTEL & PORTER
                Liste des Risques Identifi√©s
                Objectif : Le plan d‚Äôaffaires inclut-il une liste de risques (concurrence agressive, √©volution r√©glementaire, √©volution technologique, etc.) ?
                V√©rification : Les facteurs issus de la PESTEL (ex. instabilit√© politique, nouvelles lois √©cologiques) et de la concurrence (5 Forces de Porter) sont-ils mentionn√©s ?
                Strat√©gie de Gestion des Risques
                Objectif : Les mesures pour att√©nuer/√©viter ces risques sont-elles d√©finies (plans B, assurance, R&D altern√©e) ?
                Si incoh√©rence d√©tect√©e :
                Liste d‚Äôajustements :
                Ajouter un tableau de risques croisant la probabilit√© et l‚Äôimpact.
                Pr√©voir des sc√©narios (pessimiste/mod√©r√©/optimiste) pour la croissance ou la r√©glementation.
                But : Garantir que la strat√©gie tient compte des risques r√©els, en lien direct avec l‚Äôenvironnement macro et micro analys√©.

                9. R√©alit√© et Faisabilit√© du Plan (Coh√©rence Finale)
                Appr√©ciation Globale
                Objectif : V√©rifier la faisabilit√© au regard des ressources (humaines, financi√®res, techniques) et du calendrier propos√©.
                M√©thode : Relire la synth√®se et les annexes (tableaux financiers, organisation, partenariats) pour un contr√¥le crois√©.
                Estimation du Taux de Coh√©rence
                Proposition : Noter 7 crit√®res (march√© & concurrence, organisation & personnel, production & am√©nagements, aspects juridiques, objectifs SMART, analyses financi√®res, int√©gration macro-micro) de 1 √† 5.
                Formule : Taux de coheÀärence=7√ó5‚àë(notes sur 5)√ó100%
                Exemple : Si la somme atteint 30/35, on obtient (30/35) √ó 100% ‚âà 85%.
                But : Fournir une mesure synth√©tique pour √©valuer la maturit√© globale du plan d‚Äôaffaires.

                10. Proposition d‚ÄôAjustements ou Corrections
                (En cas d‚Äôincoh√©rence ou de note <80%.)

                √âtape : March√© et Concurrence
                Am√©lioration : Apporter des donn√©es chiffr√©es issues d‚Äô√©tudes r√©centes ; pr√©ciser la strat√©gie face aux concurrents directs.
                √âtape : Personnel et Associ√©s
                Am√©lioration : Clarifier l‚Äôidentit√© des associ√©s, le r√¥le de chacun, la politique de r√©mun√©ration.
                √âtape : Analyse des Risques
                Am√©lioration : Ajouter un tableau de suivi des risques (facteur, impact, probabilit√©, solutions).
                √âtape : Formalisation et Identifiants
                Am√©lioration : Indiquer la forme juridique, le RCCM, le num√©ro d‚ÄôImp√¥t, etc. ou pr√©ciser la proc√©dure pour les obtenir.
                √âtape : Objectifs SMART
                Am√©lioration : Rendre les objectifs plus quantifiables (ex. ‚ÄúAtteindre 1 000 utilisateurs actifs d‚Äôici 6 mois‚Äù), lier chaque objectif √† un responsable et une deadline.
                But : Permettre √† l‚Äôutilisateur de corriger pr√©cis√©ment les points faibles, afin de finaliser un plan d‚Äôaffaires complet et cr√©dible.

                Synth√®se de la M√©thodologie
                Balayage G√©n√©ral : S‚Äôassurer que le plan reprend toutes les √©tapes pr√©c√©dentes (cr√©ativit√©, BM, finances) et les met en coh√©rence.
                Contr√¥le de la Compl√©tude : V√©rifier la pr√©sence des informations l√©gales, des donn√©es de march√©, de la structure organisationnelle, etc.
                Analyse de la Coh√©rence : Checker la coh√©sion interne via la notation (voir Taux de coh√©rence).
                Ajustements : Proposer une liste structur√©e d‚Äôam√©liorations √† r√©aliser si le score de coh√©rence est insuffisant.
                De cette mani√®re, on assure que le Business Plan final est :

                R√©aliste : en phase avec les moyens (humains, financiers, techniques).
                Conforme aux R√©sultats de la Cr√©ativit√© : propositions de valeur coh√©rentes, fonctionnalit√©s justifi√©es.
                Align√© sur l‚ÄôEnvironnement Macro-Micro : PESTEL et PORTER int√©gr√©s.
                Fiable : avec des objectifs SMART, des mentions l√©gales, une organisation claire, une analyse des risques document√©e. """,
                "Autre": ""
    }
    return metaprompts.get(type_chain_of_thougtht, metaprompts["Autre"])



def chain_of_thougtht(type_chain_of_thougtht, montant_projet, nom_entreprise, previousdata, rubriques, Analisis, previousbp, generation=1):
    
    """
    Interroge ChatGPT (API OpenAI) pour g√©n√©rer le contenu textuel
    des de verifier la coherence, generer precedement par chatgpt. 
    """
    
    MODEL="gpt-4o"
    MAX_TOKENS_PER_REQUEST = 150
    utilisateur = get_current_user()
    
    # Calculer les tokens restants
    tokens_purchased = utilisateur.get('tokens_purchased', 0)
    tokens_consumed = utilisateur.get('tokens_consumed', 0)
    tokens_remaining = tokens_purchased - tokens_consumed

    # R√©cup√©rer le metaprompt bas√© sur le type d'entreprise
    metaprompt = get_metaprompt_chain_of_thougtht(type_chain_of_thougtht)

   
    if generation == 1:
        # Premi√®re g√©n√©ration avec les nouvelles rubriques
        prompt = f"""
        {metaprompt}
        voici les donn√©es √† considerer: {rubriques}
        Format :
            - R√©sumer l‚Äôanalyse en expliquant chaque point de v√©rification.
            - Dire si c'est coherent ou pas.
            - Proposer un plan d‚Äôaction (liste structur√©e).
        """
    elif generation == 2:
        # Deuxi√®me g√©n√©ration (am√©lioration) en utilisant le BMC pr√©c√©dent et les nouvelles rubriques
        # Prompt ajust√© sans num√©rotation dans les titres
        prompt = f"""
        voici le metaprompt:{metaprompt}
        
        
        Voici le business model genener precedement: {previousdata}
        Ameliorer ces business modeles modeles sur bases de metaprompt
        Mener la reflexions du generation du business modele sur base des indications(M√©ta-Prompt) precedents du metaprompts; 
        Chercher les chiffres et autres donn√©es sur internet, assurer-vous d'etre trop precis et excat en fonction fonction des donn√©es collecter sur internet 
        G√©n√®re le contenu d'un Business Model Canvas en format HTML pour une entreprise nomm√©e '{nom_entreprise}'.
        
        sachant que les donn√©es qui ont permit la generation du precedent business model sont: {rubriques}.
        si l'utlisateur a donner les donn√©es complementaires, veuillez en tenir compte dans la generation, et ca doit etre imperativement prioritaire.
        Si dans un bloque un utilisateur n'as pas donner des informations (elements), veuillez generer,
        Si l'utilisateur √† donn√© des elements que vous juger peu, generer d'autres et les ajout√©es √† ce que l'utlisateur √† fournit.
        
        √† faire imperativement est:
        Format:
            - R√©sumer l‚Äôanalyse en expliquant chaque point de v√©rification.
            - Dire si c'est coherent ou pas.
            - Proposer un plan d‚Äôaction (liste structur√©e) en se basant sur le metaprompt.
        
        """
    elif generation == 3:
        # Premi√®re g√©n√©ration avec les nouvelles rubriques
        prompt = f"""
        {metaprompt}
        voici les donn√©es √† qu'on a utliser pour generer le business model: {rubriques}.
        voici le business model generer: {previousdata} .
        voici le donn√©es des analyses financier : {Analisis} .
        
        Format :
            - R√©sumer l‚Äôanalyse en expliquant chaque point de v√©rification.
            - Dire si c'est coherent ou pas.
            - Proposer un plan d‚Äôaction (liste structur√©e).
        """
    else :
        # Deuxi√®me g√©n√©ration (am√©lioration) en utilisant le BMC pr√©c√©dent et les nouvelles rubriques
        # Prompt ajust√© sans num√©rotation dans les titres
        prompt = f"""
        voici le metaprompt:{metaprompt}
        
        voici les donn√©es √† qu'on a utliser pour generer le business model: {rubriques}.
        voici le business model generer: {previousdata} .
        voici le donn√©es des analyses financier : {Analisis} .
        voici le business plan generer pecedement: {previousbp} .
        
        Ameliorer ces business plan sur bases de metaprompt
        Mener la reflexions du generation du business modele sur base des indications(M√©ta-Prompt) precedents du metaprompts; 
        Chercher les chiffres et autres donn√©es sur internet, assurer-vous d'etre trop precis et excat en fonction fonction des donn√©es collecter sur internet 
        G√©n√®re le contenu d'un Business Model Canvas en format HTML pour une entreprise nomm√©e '{nom_entreprise}'.
        
        sachant que les donn√©es qui ont permit la generation du precedent business model sont: {rubriques}.
        si l'utlisateur a donner les donn√©es complementaires, veuillez en tenir compte dans la generation, et ca doit etre imperativement prioritaire.
        Si dans un bloque un utilisateur n'as pas donner des informations (elements), veuillez generer,
        Si l'utilisateur √† donn√© des elements que vous juger peu, generer d'autres et les ajout√©es √† ce que l'utlisateur √† fournit.
        
        √† faire imperativement est:
        Format:
            - R√©sumer l‚Äôanalyse en expliquant chaque point de v√©rification.
            - Dire si c'est coherent ou pas.
            - Proposer un plan d‚Äôaction (liste structur√©e) en se basant sur le metaprompt.
        
        """
    # Calculer les tokens n√©cessaires (entr√©e + r√©ponse pr√©vue)
    # Calculer le nombre de tokens dans l'entr√©e utilisateur
    tokens_in_input = count_tokens(type_chain_of_thougtht+""+json.dumps(previousdata)+""+json.dumps(rubriques)+""+Analisis+""+previousbp, MODEL)
    tokens_needed = tokens_in_input + MAX_TOKENS_PER_REQUEST
    # V√©rifier si l'utilisateur a assez de tokens
    if tokens_remaining < tokens_needed:
        st.error("Vous n'avez pas assez de tokens pour effectuer cette action. Veuillez acheter plus de tokens.")
        return
    else:
        try:
            response = openai.ChatCompletion.create(
                model=MODEL,
                messages=[
                    {"role": "system", "content": "Tu es un assistant expert en g√©n√©ration de business  et business plan."},
                    {"role": "user", "content": prompt},
                ],
                max_tokens=5000,
                temperature=0.7
            )
            html_genere = response.choices[0].message.content.strip()
            tokens_utilises = response['usage']['total_tokens']
            # Consommer les tokens
            success, message = consommer_tokens(st.session_state['user_info'], tokens_utilises)
            return html_genere
        except Exception as e:
            st.error(f"Erreur lors de la g√©n√©ration du contenu : {e}")
            return ""


# ----------------------------------------------------------------------------
# 2) Fonction pour cr√©er le fichier Word (format tableau) avec python-docx
# ----------------------------------------------------------------------------

def get_produit(index_produit):
    if 0 <= index_produit < len(st.session_state["produits_data"]):
        return st.session_state["produits_data"][index_produit]
    else:
        st.error("Index du produit invalide.")
        return None


def get_business_model_by_product_index(product_idx):
    """
    R√©cup√®re le Business Model (BMC) d'un produit donn√© par son index.

    Parameters:
    - product_idx (int): L'index du produit dans st.session_state["produits_data"].

    Returns:
    - dict: Le Business Model du produit, contenant 'titre', 'description', et 'date_bmc'.
    - None: Si aucun Business Model n'est trouv√© ou si l'index est invalide.
    """
    # V√©rifier que 'produits_data' existe dans session_state
    if "produits_data" not in st.session_state:
        st.error("Aucune donn√©e de produit trouv√©e. Veuillez d'abord charger les donn√©es.")
        return None
    
    produits = st.session_state["produits_data"]
    
    # V√©rifier que l'index est un entier
    if not isinstance(product_idx, int):
        st.error("L'index du produit doit √™tre un entier.")
        return None
    
    # V√©rifier que l'index est dans la plage valide
    if product_idx < 0 or product_idx >= len(produits):
        st.error(f"Index du produit invalide. Il doit √™tre entre 0 et {len(produits) - 1}.")
        return None
    
    produit = produits[product_idx]
    nom_produit = produit.get("nom_produit", f"Produit_{product_idx}")
    
    # V√©rifier si le produit poss√®de un Business Model
    business_models = produit.get("business_models", [])
    
    if len(business_models) == 0:
        st.info(f"Aucun Business Model trouv√© pour le produit '{nom_produit}'.")
        return None
    
    # Puisqu'il y a au maximum un BMC, on acc√®de au premier √©l√©ment
    business_model = business_models[0]
    titre = business_model.get("titre", "Titre non disponible")
    description = business_model.get("description", "Description non disponible")
    date_bmc = business_model.get("date_bmc", "Date non disponible")
    
    # Retourner le Business Model
    return {
        "titre": titre,
        "description": description,
        "date_bmc": date_bmc
    }

def add_business_model(index_produit, business_model):
    produit = get_produit(index_produit)
    if produit is not None:
        if "business_models" not in produit:
            produit["business_models"] = []
            st.warning(f"'business_models' initialis√© pour le produit '{produit['nom_produit']}'")
        if len(produit["business_models"]) >= 1:
            # Remplacer le BMC existant
            produit["business_models"][0] = business_model
            st.success("Business Model remplac√© avec succ√®s!")
        else:
            # Ajouter un nouveau BMC
            produit["business_models"].append(business_model)
            st.success("Business Model ajout√© avec succ√®s!")

def update_business_model(index_produit, business_model):
    produit = get_produit(index_produit)
    if produit is not None:
        if "business_models" in produit and len(produit["business_models"]) >= 1:
            produit["business_models"][0] = business_model
            st.success("Business Model mis √† jour avec succ√®s!")
        else:
            st.error("Aucun Business Model existant √† mettre √† jour.")

def delete_business_model(index_produit):
    produit = get_produit(index_produit)
    if produit is not None:
        if "business_models" in produit and len(produit["business_models"]) >= 1:
            bm = produit["business_models"].pop(0)
            st.success(f"Business Model '{bm['titre']}' supprim√© avec succ√®s!")
            
            # Gestion de 'business_model_precedent'
            if 'business_model_precedent' in st.session_state:
                bm_p = st.session_state['business_model_precedent'].get('product_idx')
                
                if bm_p == index_produit:
                    # Le Business Model supprim√© appartenait au produit s√©lectionn√©
                    st.session_state['business_model_precedent'] = {}
        else:
            st.error("Aucun Business Model √† supprimer.")





def generer_docx_business_modelss(nom_entreprise, date_bmc, contenu_business_model, doc, value=1):
    """
    Construit un document Word reproduisant un tableau avec la disposition souhait√©e
    pour le Business Model Canvas. La mise en forme inclut des titres en gras et
    des listes √† puces.
    'contenu_business_model' : le contenu HTML renvoy√© par ChatGPT,
    qu'on d√©coupe ensuite pour remplir chaque bloc.
    """
    # Cr√©er un nouveau document Word
    if value == 1:
        doc = Document()

    # D√©finir les styles de base
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Calibri'
    font.size = Pt(11)

    # Titre principal
    titre = doc.add_heading(level=1)
    titre_run = titre.add_run(f"Business Model Canvas de {nom_entreprise}")
    titre_run.bold = True
    titre.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # Date
    date_paragraph = doc.add_paragraph()
    date_run = date_paragraph.add_run(f"Date : {date_bmc}")
    date_run.bold = True
    date_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT

    # Ajouter un saut de ligne
    doc.add_paragraph("")

    # Cr√©er un tableau de 6 lignes √ó 5 colonnes
    table = doc.add_table(rows=6, cols=5)
    table.style = 'Table Grid'

    # Ajuster les largeurs des colonnes (en pouces)
    for col in table.columns:
        for cell in col.cells:
            cell.width = Inches(1.8)  # Ajustez selon vos besoins

    # 1) Ligne 0 : Titre (fusion des 5 colonnes)
    cell00 = table.cell(0, 0)
    cell00_merge = cell00.merge(table.cell(0, 4))
    cell00_merge.text = f"Business Model Canvas de {nom_entreprise}"
    for paragraph in cell00_merge.paragraphs:
        for run in paragraph.runs:
            run.bold = True
            run.font.size = Pt(14)
        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # 2) Ligne 1 : Nom de l'entreprise et Date (fusion des colonnes)
    cell10 = table.cell(1, 0)
    cell10_merge = cell10.merge(table.cell(1, 2))
    cell10_merge.text = f"**Nom de l'entreprise**: {nom_entreprise}"
    for paragraph in cell10_merge.paragraphs:
        for run in paragraph.runs:
            run.bold = True
        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT

    cell13 = table.cell(1, 3)
    cell13_merge = cell13.merge(table.cell(1, 4))
    cell13_merge.text = f"**Date**: {date_bmc}"
    for paragraph in cell13_merge.paragraphs:
        for run in paragraph.runs:
            run.bold = True
        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT

    # 3) Ligne 2 : Headers des 5 blocs
    headers = ["Partenaires cl√©s", "Activit√©s cl√©s", "Offre (proposition de valeur)", 
               "Relation client", "Segments de client√®le"]
    for idx, header in enumerate(headers):
        cell = table.cell(2, idx)
        paragraphe = cell.paragraphs[0]
        run = paragraphe.add_run(header)
        run.bold = True
        paragraphe.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # 4) Ligne 3 : Contenus des 5 blocs
    # Initialiser les blocs
    blocs = {
        "Partenaires cl√©s": "",
        "Activit√©s cl√©s": "",
        "Offre (proposition de valeur)": "",
        "Relation client": "",
        "Segments de client√®le": ""
    }

    # Utiliser BeautifulSoup pour parser le HTML
    soup = BeautifulSoup(contenu_business_model, 'html.parser')

    # Fonction pour trouver le bon header tag (h3 par d√©faut, avec flexibilit√©)
    def trouver_header(soup, header):
        # Regex pour capturer optionnellement des num√©ros suivis de points et espaces
        pattern = rf"^(?:\d+\.\s*)?{re.escape(header)}$"
        # Chercher dans les balises h3
        header_tag = soup.find(['h2', 'h3', 'h4', 'h5', 'h6'], text=re.compile(pattern, re.IGNORECASE))
        return header_tag

    # Extraire chaque bloc
    for header in blocs.keys():
        h_tag = trouver_header(soup, header)
        if h_tag:
            content = []
            for sibling in h_tag.find_next_siblings():
                if sibling.name and re.match(r'^h[2-6]$', sibling.name, re.IGNORECASE):
                    break  # Arr√™ter si un nouveau header est trouv√©
                if sibling.name == 'ul':
                    for li in sibling.find_all('li'):
                        content.append(f"- {li.get_text(strip=True)}")
                elif sibling.name == 'p':
                    content.append(sibling.get_text(strip=True))
                elif isinstance(sibling, str):
                    text = sibling.strip()
                    if text:
                        content.append(text)
            blocs[header] = '\n'.join(content)

    # Debug: Afficher les blocs extraits (√† d√©sactiver en production)
    # st.write("Blocs extraits :", blocs)

    # Fonction pour ajouter du contenu format√© dans une cellule
    def ajouter_contenu(cell, titre, contenu):
        """
        Ajoute du contenu format√© dans une cellule Word.
        Le titre est en gras, suivi de listes √† puces si n√©cessaire.
        """
        # Supprimer le texte initial (par d√©faut) dans la cellule
        cell.text = ""

        # Ajouter le titre en gras
        paragraphe = cell.add_paragraph()
        run = paragraphe.add_run(titre)
        run.bold = True

        # Ajouter le contenu
        # Diviser le contenu par les sauts de ligne
        lignes = contenu.split('\n')
        for ligne in lignes:
            ligne = ligne.strip()
            if not ligne:
                continue
            # V√©rifier si la ligne commence par '-', '+', '‚Ä¢' pour une liste √† puces
            if re.match(r'^[-+‚Ä¢]\s+', ligne):
                # Ajouter une puce
                item = re.sub(r'^[-+‚Ä¢]\s+', '', ligne)
                p = cell.add_paragraph(item, style='List Bullet')
            else:
                # Ajouter un paragraphe normal
                p = cell.add_paragraph(ligne)

    # Remplir les cellules de la ligne 3
    ordre_blocs = [
        "Partenaires cl√©s", "Activit√©s cl√©s", "Offre (proposition de valeur)",
        "Relation client", "Segments de client√®le"
    ]

    for idx, bloc in enumerate(ordre_blocs):
        cell = table.cell(3, idx)
        ajouter_contenu(cell, bloc, blocs[bloc])

    # 5) Ligne 4 : Structure de co√ªts (fusion 3 cols) et Sources de revenus (fusion 2 cols)
    # Fusionner les cellules pour "Structure de co√ªts" (colonnes 0-2)
    cell40 = table.cell(4, 0)
    cell40_merge = cell40.merge(table.cell(4, 2))
    cell40_merge.text = f"**Structure de co√ªts**:\n\n"

    # Fusionner les cellules pour "Sources de revenus" (colonnes 3-4)
    cell43 = table.cell(4, 3)
    cell43_merge = cell43.merge(table.cell(4, 4))
    cell43_merge.text = f"**Sources de revenus**:\n\n"

    # Extraire les contenus pour ces blocs
    structure_couts = ""
    sources_revenus = ""

    # Structure des co√ªts
    strong_tag = trouver_header(soup, "Structure des co√ªts")
    if strong_tag:
        content = []
        for sibling in strong_tag.find_next_siblings():
            if sibling.name and re.match(r'^h[2-6]$', sibling.name, re.IGNORECASE):
                break
            if sibling.name == 'ul':
                for li in sibling.find_all('li'):
                    content.append(f"- {li.get_text(strip=True)}")
            elif sibling.name == 'p':
                content.append(sibling.get_text(strip=True))
            elif isinstance(sibling, str):
                text = sibling.strip()
                if text:
                    content.append(text)
        structure_couts = '\n'.join(content)

    # Sources de revenus
    strong_tag = trouver_header(soup, "Sources de revenus")
    if strong_tag:
        content = []
        for sibling in strong_tag.find_next_siblings():
            if sibling.name and re.match(r'^h[2-6]$', sibling.name, re.IGNORECASE):
                break
            if sibling.name == 'ul':
                for li in sibling.find_all('li'):
                    content.append(f"- {li.get_text(strip=True)}")
            elif sibling.name == 'p':
                content.append(sibling.get_text(strip=True))
            elif isinstance(sibling, str):
                text = sibling.strip()
                if text:
                    content.append(text)
        sources_revenus = '\n'.join(content)

    # Remplir les cellules fusionn√©es
    ajouter_contenu(cell40_merge, "Structure de co√ªts", structure_couts)
    ajouter_contenu(cell43_merge, "Sources de revenus", sources_revenus)

    # Ajuster les paragraphes existants
    for row in table.rows:
        for cell in row.cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.name = 'Calibri'
                    run.font.size = Pt(11)

    # Ajouter un saut de ligne √† la fin
    doc.add_paragraph("")

    # Convertir le document en binaire pour t√©l√©chargement via Streamlit
    fichier_io = BytesIO()
    doc.save(fichier_io)
    fichier_io.seek(0)
    return fichier_io


def generer_docx_business_models(nom_entreprise, date_bmc, contenu_business_model, nom_produit, doc=None, value=1): 
    """
    Construit un document Word reproduisant un tableau avec la disposition souhait√©e
    pour le Business Model Canvas. La mise en forme inclut des titres en gras et
    des listes √† puces.
    'contenu_business_model' : le contenu HTML renvoy√© par ChatGPT,
    qu'on d√©coupe ensuite pour remplir chaque bloc.
    """
    # Cr√©er un nouveau document Word
    if value == 1 or doc is None:
        doc = Document()

    # D√©finir les styles de base
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Calibri'
    font.size = Pt(11)

    # Titre principal
    titre = doc.add_heading(level=1)
    titre_run = titre.add_run(f"Business Model Canvas de {nom_entreprise}")
    titre_run.bold = True
    titre.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    doc.add_heading(f"Produit : {nom_produit}", level=2)

    # Date
    date_paragraph = doc.add_paragraph()
    date_run = date_paragraph.add_run(f"Date : {date_bmc}")
    date_run.bold = True
    date_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT

    # Ajouter un saut de ligne
    doc.add_paragraph("")

    # Cr√©er un tableau de 7 lignes √ó 5 colonnes
    table = doc.add_table(rows=7, cols=5)
    table.style = 'Table Grid'

    # Ajuster les largeurs des colonnes (en pouces)
    for col in table.columns:
        for cell in col.cells:
            cell.width = Inches(1.8)  # Ajustez selon vos besoins

    # 1) Ligne 0 : Titre (fusion des 5 colonnes)
    cell00 = table.cell(0, 0)
    cell00_merge = cell00.merge(table.cell(0, 4))
    cell00_merge.text = f"Business Model Canvas de {nom_entreprise}"
    for paragraph in cell00_merge.paragraphs:
        for run in paragraph.runs:
            run.bold = True
            run.font.size = Pt(14)
        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # 2) Ligne 1 : Nom de l'entreprise et Date (fusion des colonnes)
    cell10 = table.cell(1, 0)
    cell10_merge = cell10.merge(table.cell(1, 2))
    cell10_merge.text = f"**Nom de l'entreprise**: {nom_entreprise}"
    for paragraph in cell10_merge.paragraphs:
        for run in paragraph.runs:
            run.bold = True
        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT

    cell13 = table.cell(1, 3)
    cell13_merge = cell13.merge(table.cell(1, 4))
    cell13_merge.text = f"**Date**: {date_bmc}"
    for paragraph in cell13_merge.paragraphs:
        for run in paragraph.runs:
            run.bold = True
        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT

    # 3) Ligne 2 : Headers des 5 blocs
    headers = ["Partenaires cl√©s", "Activit√©s cl√©s", "Offre (proposition de valeur)", 
               "Relation client", "Segments de client√®le"]
    for idx, header in enumerate(headers):
        cell = table.cell(2, idx)
        paragraphe = cell.paragraphs[0]
        run = paragraphe.add_run(header)
        run.bold = True
        paragraphe.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # 4) Ligne 3 : Contenus des 5 blocs
    # Initialiser les blocs
    blocs = {
        "Partenaires cl√©s": "",
        "Activit√©s cl√©s": "",
        "Offre (proposition de valeur)": "",
        "Relation client": "",
        "Segments de client√®le": "",
        "Ressources Cl√©s": "",
        "Canaux de Distribution": ""
    }

    # Utiliser BeautifulSoup pour parser le HTML
    soup = BeautifulSoup(contenu_business_model, 'html.parser')

    # Fonction pour trouver le bon header tag (h3 par d√©faut, avec flexibilit√©)
    def trouver_header(soup, header):
        # Regex pour capturer optionnellement des num√©ros suivis de points et espaces
        pattern = rf"^(?:\d+\.\s*)?{re.escape(header)}$"
        # Chercher dans les balises h2 √† h6
        header_tag = soup.find(['h2', 'h3', 'h4', 'h5', 'h6'], text=re.compile(pattern, re.IGNORECASE))
        return header_tag

    # Extraire chaque bloc
    for header in blocs.keys():
        h_tag = trouver_header(soup, header)
        if h_tag:
            content = []
            for sibling in h_tag.find_next_siblings():
                if sibling.name and re.match(r'^h[2-6]$', sibling.name, re.IGNORECASE):
                    break  # Arr√™ter si un nouveau header est trouv√©
                if sibling.name == 'ul':
                    for li in sibling.find_all('li'):
                        content.append(f"- {li.get_text(strip=True)}")
                elif sibling.name == 'p':
                    content.append(sibling.get_text(strip=True))
                elif isinstance(sibling, str):
                    text = sibling.strip()
                    if text:
                        content.append(text)
            blocs[header] = '\n'.join(content)

    # Fonction pour ajouter du contenu format√© dans une cellule
    def ajouter_contenu(cell, titre, contenu):
        """
        Ajoute du contenu format√© dans une cellule Word.
        Le titre est en gras, suivi de listes √† puces si n√©cessaire.
        """
        # Supprimer le texte initial (par d√©faut) dans la cellule
        cell.text = ""

        # Ajouter le titre en gras
        paragraphe = cell.add_paragraph()
        run = paragraphe.add_run(titre)
        run.bold = True

        # Ajouter le contenu
        # Diviser le contenu par les sauts de ligne
        lignes = contenu.split('\n')
        for ligne in lignes:
            ligne = ligne.strip()
            if not ligne:
                continue
            # V√©rifier si la ligne commence par '-', '+', '‚Ä¢' pour une liste √† puces
            if re.match(r'^[-+‚Ä¢]\s+', ligne):
                # Ajouter une puce
                item = re.sub(r'^[-+‚Ä¢]\s+', '', ligne)
                p = cell.add_paragraph(item, style='List Bullet')
            else:
                # Ajouter un paragraphe normal
                p = cell.add_paragraph(ligne)

    # Remplir les cellules de la ligne 3
    ordre_blocs = [
        "Partenaires cl√©s", 
        "Activit√©s cl√©s", 
        "Offre (proposition de valeur)",
        "Relation client", 
        "Segments de client√®le"
    ]

    for idx, bloc in enumerate(ordre_blocs):
        cell = table.cell(3, idx)
        ajouter_contenu(cell, bloc, blocs[bloc])

    # Ajouter les nouvelles rubriques dans la ligne 4
    # "Ressources Cl√©s" sous "Activit√©s Cl√©s" (colonne 1)
    cell_ressources = table.cell(4, 1)
    ajouter_contenu(cell_ressources, "Ressources Cl√©s", blocs["Ressources Cl√©s"])

    # "Canaux de Distribution" sous "Relation Client" (colonne 3)
    cell_canaux = table.cell(4, 3)
    ajouter_contenu(cell_canaux, "Canaux de Distribution", blocs["Canaux de Distribution"])

    # 5) Ligne 5 : Structure de co√ªts (fusion 3 cols) et Sources de revenus (fusion 2 cols)
    # Fusionner les cellules pour "Structure de co√ªts" (colonnes 0-2)
    cell50 = table.cell(5, 0)
    cell50_merge = cell50.merge(table.cell(5, 2))
    cell50_merge.text = f"**Structure de co√ªts**:\n\n"

    # Fusionner les cellules pour "Sources de revenus" (colonnes 3-4)
    cell53 = table.cell(5, 3)
    cell53_merge = cell53.merge(table.cell(5, 4))
    cell53_merge.text = f"**Sources de revenus**:\n\n"

    # Extraire les contenus pour ces blocs
    structure_couts = ""
    sources_revenus = ""

    # Structure des co√ªts
    strong_tag = trouver_header(soup, "Structure des co√ªts")
    if strong_tag:
        content = []
        for sibling in strong_tag.find_next_siblings():
            if sibling.name and re.match(r'^h[2-6]$', sibling.name, re.IGNORECASE):
                break
            if sibling.name == 'ul':
                for li in sibling.find_all('li'):
                    content.append(f"- {li.get_text(strip=True)}")
            elif sibling.name == 'p':
                content.append(sibling.get_text(strip=True))
            elif isinstance(sibling, str):
                text = sibling.strip()
                if text:
                    content.append(text)
        structure_couts = '\n'.join(content)

    # Sources de revenus
    strong_tag = trouver_header(soup, "Sources de revenus")
    if strong_tag:
        content = []
        for sibling in strong_tag.find_next_siblings():
            if sibling.name and re.match(r'^h[2-6]$', sibling.name, re.IGNORECASE):
                break
            if sibling.name == 'ul':
                for li in sibling.find_all('li'):
                    content.append(f"- {li.get_text(strip=True)}")
            elif sibling.name == 'p':
                content.append(sibling.get_text(strip=True))
            elif isinstance(sibling, str):
                text = sibling.strip()
                if text:
                    content.append(text)
        sources_revenus = '\n'.join(content)

    # Remplir les cellules fusionn√©es
    ajouter_contenu(cell50_merge, "Structure de co√ªts", structure_couts)
    ajouter_contenu(cell53_merge, "Sources de revenus", sources_revenus)

    # Ajuster les paragraphes existants
    for row in table.rows:
        for cell in row.cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.name = 'Calibri'
                    run.font.size = Pt(11)

    # Ajouter un saut de ligne √† la fin
    doc.add_paragraph("")

    # Convertir le document en binaire pour t√©l√©chargement via Streamlit
    fichier_io = BytesIO()
    doc.save(fichier_io)
    fichier_io.seek(0)
    return fichier_io

def generer_docx_business_model(nom_entreprise, date_bmc, contenu_business_model, nom_produit, doc=None, value=1): 
    """
    Construit un document Word reproduisant un tableau avec la disposition souhait√©e
    pour le Business Model Canvas. La mise en forme inclut des titres en gras et
    des listes √† puces.
    
    Parameters:
    - nom_entreprise (str): Nom de l'entreprise.
    - date_bmc (str): Date du Business Model Canvas.
    - contenu_business_model (str): Contenu HTML renvoy√© par ChatGPT.
    - nom_produit (str): Nom du produit.
    - doc (Document, optional): Document Word existant √† modifier.
    - value (int, optional): Indicateur pour cr√©er un nouveau document ou non.
    
    Returns:
    - BytesIO: Document Word en binaire pour t√©l√©chargement.
    """
    
    # Cr√©er un nouveau document Word si n√©cessaire
    if value == 1 or doc is None:
        doc = Document()

    # D√©finir les styles de base
    style = doc.styles['Normal']
    font = style.font
    font.name = 'Calibri'
    font.size = Pt(11)

    # Titre principal
    titre = doc.add_heading(level=1)
    titre_run = titre.add_run(f"Business Model Canvas de {nom_entreprise}")
    titre_run.bold = True
    titre.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # Titre du produit
    doc.add_heading(f"Produit : {nom_produit}", level=2)

    # Date
    date_paragraph = doc.add_paragraph()
    date_run = date_paragraph.add_run(f"Date : {date_bmc}")
    date_run.bold = True
    date_paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT

    # Ajouter un saut de ligne
    doc.add_paragraph("")

    # Cr√©er un tableau de 7 lignes √ó 5 colonnes
    table = doc.add_table(rows=7, cols=5)
    table.style = 'Table Grid'

    # Ajuster les largeurs des colonnes (en pouces)
    for col in table.columns:
        for cell in col.cells:
            cell.width = Inches(1.8)  # Ajustez selon vos besoins

    # 1) Ligne 0 : Titre (fusion des 5 colonnes)
    cell00 = table.cell(0, 0)
    cell00_merge = cell00.merge(table.cell(0, 4))
    cell00_merge.text = f"Business Model Canvas de {nom_entreprise}"
    for paragraph in cell00_merge.paragraphs:
        for run in paragraph.runs:
            run.bold = True
            run.font.size = Pt(14)
        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # 2) Ligne 1 : Nom de l'entreprise et Date (fusion des colonnes)
    cell10 = table.cell(1, 0)
    cell10_merge = cell10.merge(table.cell(1, 2))
    cell10_merge.text = f"Nom de l'entreprise: {nom_entreprise}"
    for paragraph in cell10_merge.paragraphs:
        for run in paragraph.runs:
            run.bold = True
        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT

    cell13 = table.cell(1, 3)
    cell13_merge = cell13.merge(table.cell(1, 4))
    cell13_merge.text = f"Date: {date_bmc}"
    for paragraph in cell13_merge.paragraphs:
        for run in paragraph.runs:
            run.bold = True
        paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT

    # 3) Ligne 2 : Headers des 5 blocs
    headers = ["Partenaires cl√©s", "Activit√©s cl√©s", "Offre (proposition de valeur)", 
               "Relation client", "Segments de client√®le"]
    for idx, header in enumerate(headers):
        cell = table.cell(2, idx)
        paragraphe = cell.paragraphs[0]
        run = paragraphe.add_run(header)
        run.bold = True
        paragraphe.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # 4) Ligne 3 : Contenus des 5 blocs
    # Initialiser les blocs
    blocs = {
        "Partenaires cl√©s": "",
        "Activit√©s cl√©s": "",
        "Offre (proposition de valeur)": "",
        "Relation client": "",
        "Segments de client√®le": "",
        "Ressources cl√©s": "",
        "Canaux de distribution": ""
    }

    # Utiliser BeautifulSoup pour parser le HTML
    soup = BeautifulSoup(contenu_business_model, 'html.parser')

    # Fonction pour trouver le bon header tag (h2 par d√©faut, avec flexibilit√©)
    def trouver_header(soup, header):
        """
        Trouve le tag d'en-t√™te correspondant au bloc sp√©cifi√©, en nettoyant les ast√©risques.

        Parameters:
        - soup (BeautifulSoup): Objet BeautifulSoup du contenu HTML.
        - header (str): Nom du bloc √† trouver.

        Returns:
        - Tag or None: Tag BeautifulSoup correspondant √† l'en-t√™te ou None.
        """
        # Regex pour capturer optionnellement des num√©ros suivis de points et espaces
        pattern = rf"^(?:\d+\.\s*)?{re.escape(header)}$"
        # Chercher dans les balises h2 √† h6 sans les ast√©risques
        for tag in soup.find_all(['h2', 'h3', 'h4', 'h5', 'h6']):
            # Nettoyer le texte en enlevant les ast√©risques
            tag_text = tag.get_text(strip=True).replace('**', '')
            if re.match(pattern, tag_text, re.IGNORECASE):
                return tag
        return None

    # Extraire chaque bloc
    for header in blocs.keys():
        h_tag = trouver_header(soup, header)
        if h_tag:
            content = []
            for sibling in h_tag.find_next_siblings():
                if sibling.name and re.match(r'^h[2-6]$', sibling.name, re.IGNORECASE):
                    break  # Arr√™ter si un nouveau header est trouv√©
                if sibling.name == 'ul':
                    for li in sibling.find_all('li'):
                        content.append(f"- {li.get_text(strip=True)}")
                elif sibling.name == 'p':
                    content.append(sibling.get_text(strip=True))
                elif isinstance(sibling, str):
                    text = sibling.strip()
                    if text:
                        content.append(text)
            blocs[header] = '\n'.join(content)

    # Fonction pour ajouter du contenu format√© dans une cellule
    def ajouter_contenu(cell, titre, contenu):
        """
        Ajoute du contenu format√© dans une cellule Word.
        Le titre est en gras, suivi de listes √† puces si n√©cessaire.

        Parameters:
        - cell (Cell): Cellule du tableau Word.
        - titre (str): Titre du bloc.
        - contenu (str): Contenu du bloc.
        """
        # Supprimer le texte initial dans la cellule
        cell.text = ""

        # Ajouter le titre en gras
        paragraphe = cell.add_paragraph()
        run = paragraphe.add_run(titre)
        run.bold = True

        # Ajouter le contenu
        lignes = contenu.split('\n')
        for ligne in lignes:
            ligne = ligne.strip()
            if not ligne:
                continue
            # V√©rifier si la ligne commence par '-', '+', '‚Ä¢' pour une liste √† puces
            if re.match(r'^[-+‚Ä¢]\s+', ligne):
                # Ajouter une puce
                item = re.sub(r'^[-+‚Ä¢]\s+', '', ligne)
                p = cell.add_paragraph(item, style='List Bullet')
            else:
                # Ajouter un paragraphe normal
                p = cell.add_paragraph(ligne)

    # Remplir les cellules de la ligne 3
    ordre_blocs = [
        "Partenaires cl√©s", 
        "Activit√©s cl√©s", 
        "Offre (proposition de valeur)",
        "Relation client", 
        "Segments de client√®le"
    ]

    for idx, bloc in enumerate(ordre_blocs):
        cell = table.cell(3, idx)
        ajouter_contenu(cell, bloc, blocs.get(bloc, ""))

    # Ajouter les nouvelles rubriques dans la ligne 4
    # "Ressources cl√©s" sous "Activit√©s cl√©s" (colonne 1)
    cell_ressources = table.cell(4, 1)
    ajouter_contenu(cell_ressources, "Ressources cl√©s", blocs.get("Ressources cl√©s", ""))

    # "Canaux de distribution" sous "Relation client" (colonne 3)
    cell_canaux = table.cell(4, 3)
    ajouter_contenu(cell_canaux, "Canaux de distribution", blocs.get("Canaux de distribution", ""))

    # 5) Ligne 5 : Structure de co√ªts (fusion 3 cols) et Sources de revenus (fusion 2 cols)
    # Fusionner les cellules pour "Structure de co√ªts" (colonnes 0-2)
    cell50 = table.cell(5, 0)
    cell50_merge = cell50.merge(table.cell(5, 2))
    cell50_merge.text = f"Structure de co√ªts:\n\n"

    # Fusionner les cellules pour "Sources de revenus" (colonnes 3-4)
    cell53 = table.cell(5, 3)
    cell53_merge = cell53.merge(table.cell(5, 4))
    cell53_merge.text = f"Sources de revenus:\n\n"

    # Extraire les contenus pour ces blocs
    structure_couts = ""
    sources_revenus = ""

    # Structure des co√ªts
    strong_tag = trouver_header(soup, "Structure des co√ªts")
    if strong_tag:
        content = []
        for sibling in strong_tag.find_next_siblings():
            if sibling.name and re.match(r'^h[2-6]$', sibling.name, re.IGNORECASE):
                break
            if sibling.name == 'ul':
                for li in sibling.find_all('li'):
                    content.append(f"- {li.get_text(strip=True)}")
            elif sibling.name == 'p':
                content.append(sibling.get_text(strip=True))
            elif isinstance(sibling, str):
                text = sibling.strip()
                if text:
                    content.append(text)
        structure_couts = '\n'.join(content)

    # Sources de revenus
    strong_tag = trouver_header(soup, "Sources de revenus")
    if strong_tag:
        content = []
        for sibling in strong_tag.find_next_siblings():
            if sibling.name and re.match(r'^h[2-6]$', sibling.name, re.IGNORECASE):
                break
            if sibling.name == 'ul':
                for li in sibling.find_all('li'):
                    content.append(f"- {li.get_text(strip=True)}")
            elif sibling.name == 'p':
                content.append(sibling.get_text(strip=True))
            elif isinstance(sibling, str):
                text = sibling.strip()
                if text:
                    content.append(text)
        sources_revenus = '\n'.join(content)

    # Remplir les cellules fusionn√©es
    ajouter_contenu(cell50_merge, "Structure de co√ªts", structure_couts)
    ajouter_contenu(cell53_merge, "Sources de revenus", sources_revenus)

    # Ajuster les paragraphes existants
    for row in table.rows:
        for cell in row.cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.name = 'Calibri'
                    run.font.size = Pt(11)

    # Ajouter un saut de ligne √† la fin
    doc.add_paragraph("")

    # Convertir le document en binaire pour t√©l√©chargement via Streamlit
    fichier_io = BytesIO()
    doc.save(fichier_io)
    fichier_io.seek(0)
    return fichier_io








def page_generer_business_model():
    st.header("√âtape 2 : G√©n√©rer le Business Model Canvas")
    if st.session_state.get('business_model_precedent'):
        produit_selectionne = st.selectbox(
            "S√©lectionnez un Produit",
            options=[prod["nom_produit"] for prod in st.session_state["produits_data"]],
            key="produit_selectionne_affichage_bmc"
        )
        # Trouver l'index du produit s√©lectionn√©
        index_produit_affichage = next((index for (index, d) in enumerate(st.session_state["produits_data"]) if d["nom_produit"] == produit_selectionne), None)
        st.write("Le Business Model Canvas initial a √©t√© g√©n√©r√©. Vous pouvez le t√©l√©charger ci-dessous ou proc√©der √† son am√©lioration.")
        if st.button("Ameliorer Business Model"):
            with st.spinner("Amelioration en cours..."):
                html_content = chain_of_thougtht("BM",st.session_state.montant_projet,st.session_state.nom_entreprise,get_business_model_by_product_index(index_produit_affichage).get("description"), st.session_state["produits_data"][index_produit_affichage], Analisis='', previousbp='', generation=2)
                st.write(html_content)
                if html_content:
                    with st.spinner("Generation en cours..."):                        
                        contenu_bmc_ameliore = obtenir_business_model(
                        nom_entreprise=st.session_state.nom_entreprise,
                        montant_projet=st.session_state.montant_projet,
                        previousdata=get_business_model_by_product_index(index_produit_affichage).get("description"),
                        type_entreprise=st.session_state.type_entreprise,
                        rubriques= st.session_state["produits_data"][index_produit_affichage],
                        ameliorations=html_content,
                        generation=2)
                        
                        updated_bm = {
                            "titre": get_business_model_by_product_index(index_produit_affichage)['titre'],
                            "description": contenu_bmc_ameliore,
                            "date_bmc": get_business_model_by_product_index(index_produit_affichage)['date_bmc']
                                }
                        # Stocker le BMC initial dans la session pour la deuxi√®me g√©n√©rationst.session_state.business_model_precedent = contenu_bmc_ameliore
                        update_business_model(index_produit_affichage, updated_bm)

        if index_produit_affichage is not None:
            business_models = st.session_state["produits_data"][index_produit_affichage].get("business_models", [])
            if business_models:
                bm_titles = [bm["titre"] for bm in business_models]
                selected_bm_idx = st.selectbox(
                    "S√©lectionnez un Business Model",
                    options=list(range(len(bm_titles))),
                    format_func=lambda x: bm_titles[x],
                    key="selected_bm_idx_affichage"
                )
                
                st.session_state['business_model_precedent'] = {
                     'product_idx': index_produit_affichage
                     }

                selected_bm = business_models[selected_bm_idx]  
                     
                st.write(f"### {selected_bm['titre']}")
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("Modifier", key=f"modify_bm_{index_produit_affichage}_{selected_bm_idx}"):
                        with st.expander(f"Modifier Business Model {selected_bm['titre']}"):
                            nouveau_titre = st.text_input("Titre du Business Model", value=selected_bm['titre'], key=f"nouveau_titre_bm_{selected_bm_idx}")
                            nouvelle_description = st.text_area("Description", value=selected_bm['description'], key=f"nouvelle_description_bm_{selected_bm_idx}")
                            if st.button("Mettre √† Jour", key=f"mettre_a_jour_bm_{selected_bm_idx}"):
                                updated_bm = {
                                    "titre": nouveau_titre,
                                    "description": nouvelle_description,
                                    "date_bmc": selected_bm.get("date_bmc", "")
                                }
                                update_business_model(index_produit_affichage, updated_bm)
                                st.rerun()
                with col2:
                    if st.button("Supprimer", key=f"delete_bm_{index_produit_affichage}_{selected_bm_idx}"):
                        delete_business_model(index_produit_affichage)
                        st.rerun()
                
                
                
                html_content = selected_bm['description']

                # Encoder le contenu HTML en Base64
                encoded_html = base64.b64encode(html_content.encode('utf-8')).decode('utf-8')

                # Cr√©er l'URL de donn√©es
                data_url = f"data:text/html;base64,{encoded_html}"

                st.markdown(
                    f"""
                    <iframe src="{data_url}" width="100%" height="1500" frameborder="0" scrolling="yes"></iframe>
                    """,
                    unsafe_allow_html=True
                )
            
        # Vous pouvez √©galement proposer d'autres actions ici si n√©cessaire
    else:
        st.info("Veuillez d'abord collecter toutes les donn√©es et g√©n√©rer le Business Model Canvas initial dans l'onglet 'Collecte des Donn√©es'.")


def ct_model():
    """
    Fonction principale de l'application Streamlit.
    """
    st.header("√âtape 2 : Amelioration √† effectuer")
    #st.write(st.session_state.business_model_precedent )
    #st.write(st.session_state["produits_data"])
    if st.session_state.get('business_model_precedent'):
        st.write("Amelioration √† effectuer pour une bonne coherence du Business ")
        if st.button("Quoi ameliorer"):
            with st.spinner("Detection des Ameliorations en cours..."):
                html_content = chain_of_thougtht("Analysis", st.session_state.montant_projet,st.session_state.nom_entreprise, json.dumps(st.session_state.business_model_precedent) , st.session_state["produits_data"], Analisis='', previousbp='', generation=2)
                st.write(html_content)
                


def afficher_informations_cv_document(cv_data, query="Pouvez-vous r√©sumer ce CV ? si oui si dans le resumer mentionner ses qualificetions les formations faites, son numero de telephone, adresse mail et son adresse"):
    """
    Fonction principale pour traiter un CV pass√© directement comme document et retourner des informations g√©n√©r√©es.

    Args:
        cv_data (UploadedFile): Le fichier t√©l√©charg√© contenant le CV.
        query (str): La question ou le r√©sum√© demand√© pour le CV.

    Returns:
        str: Les informations g√©n√©r√©es √† partir du CV.
    """
    if not cv_data:
        raise ValueError("Aucun document fourni pour le traitement.")

    try:
        # Enregistrer le fichier temporairement
        file_path = "uploaded_document.pdf"
        with open(file_path, "wb") as f:
            f.write(cv_data.read())

        # Charger et diviser les documents
        documents = load_and_split_documents(file_path)
        
        # Fusionner tous les textes des documents pour le comptage des tokens
        full_text = " ".join([doc.page_content for doc in documents])

        # D√©finir le mod√®le et l'encodage correspondant
        MODEL="gpt-4o"  # Remplacez par le mod√®le que vous utilisez

        # D√©finir le nombre maximal de tokens par requ√™te (r√©ponse pr√©vue)
        MAX_TOKENS_REPONSE = 300

        # Compter les tokens dans la requ√™te (query + full_text)
        tokens_in_input = count_tokens(query + "full_text", MODEL)

        # D√©finir le nombre total de tokens n√©cessaires (entr√©e + r√©ponse pr√©vue)
        tokens_needed = tokens_in_input + MAX_TOKENS_REPONSE

        # R√©cup√©rer les informations de l'utilisateur
        utilisateur = st.session_state.get('user_info', None)
        if not utilisateur:
            st.error("Vous devez √™tre connect√© pour effectuer cette action.")
            return None

        tokens_purchased = utilisateur.get('tokens_purchased', 0)
        tokens_consumed = utilisateur.get('tokens_consumed', 0)
        tokens_remaining = tokens_purchased - tokens_consumed

        # V√©rifier si l'utilisateur a assez de tokens
        if tokens_remaining < tokens_needed:
            st.error("Vous n'avez pas assez de tokens pour effectuer cette action. Veuillez acheter plus de tokens.")
            return None

        db = create_faiss_db(documents)
        
        if db:
            success, message = consommer_tokens(st.session_state['user_info'], tokens_in_input)
            if not success:
                return ""

            

        # Configurer le mod√®le conversationnel
        llm = ChatOpenAI(temperature=0.7, openai_api_key=api_key, max_tokens=300)
        memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
        qa_chain = ConversationalRetrievalChain.from_llm(llm, retriever=db.as_retriever(), memory=memory)

        # Poser une question ou g√©n√©rer un r√©sum√©
        reponse = qa_chain.run({"question": query})
        tokens_in_inputs = count_tokens(query + ""+full_text+""+ reponse, MODEL)

        success, message = consommer_tokens(st.session_state['user_info'], tokens_in_inputs)
        if not success:
            return ""
        
        # Supprimer le fichier temporaire
        #os.remove(file_path)
        return reponse

    except Exception as e:
        raise ValueError(f"Erreur lors du traitement du CV : {str(e)}")

def serialize_membres(membres):
    serializable_membres = []
    for membre in membres:
        membre_copy = {k: v for k, v in membre.items() if k != 'cv'}
        serializable_membres.append(membre_copy)
    return serializable_membres

def ajouter_informations_personnel():
    """
    Fonction permettant de g√©rer les informations des membres de l'entreprise
    et de g√©n√©rer et enregistrer automatiquement les r√©sum√©s des CV.
    """
    st.header("Gestion des membres du personnel")
    st.write("Ajoutez les informations des membres dans des conteneurs, jusqu'√† un maximum de 5.")

    # Initialisation des donn√©es
    if "membres" not in st.session_state:
        st.session_state["membres"] = []  # Liste des membres ajout√©s

    max_conteneurs = 5

    # Ajouter un nouveau conteneur
    if len(st.session_state["membres"]) < max_conteneurs:
        if st.button("Ajouter un membre"):
            st.session_state["membres"].append({
                "fonction": "",
                "utiliser_cv": False,
                "cv": None,
                "informations": "",
                "resume_cv": None  # Nouveau champ pour enregistrer le r√©sum√© g√©n√©r√©
            })

    # Afficher les conteneurs existants
    for idx, membre in enumerate(st.session_state["membres"]):
        with st.container():
            col1, col2, col3, col4 = st.columns([2, 1, 3, 1])

            with col1:
                membre["fonction"] = st.text_input(
                    f"Fonction au sein de l'entreprise (Membre {idx + 1})",
                    value=membre["fonction"],
                    key=f"fonction_{idx}",
                    placeholder="Entrez la fonction"
                )

            with col2:
                membre["utiliser_cv"] = st.checkbox(
                    f"Utiliser un CV ",
                    value=membre["utiliser_cv"],
                    key=f"checkbox_cv_{idx}"
                )

            with col3:
                if membre["utiliser_cv"]:
                    cv_data = st.file_uploader(
                        f"T√©l√©chargez le CV (Membre {idx + 1})",
                        type=["pdf", "docx"],
                        key=f"uploader_cv_{idx}"
                    )

                    # V√©rification de la taille du fichier
                    if cv_data is not None and cv_data.size > 3 * 1024 * 1024:  # 3 MB
                        st.error("La taille du fichier d√©passe 3 MB. Veuillez t√©l√©charger un fichier plus petit.")
                        membre["cv"] = None     # R√©initialiser si la taille est d√©pass√©e
                    else:
                        membre["cv"] = cv_data  # Enregistrer le fichier s'il est valide

                        # G√©n√©rer et enregistrer automatiquement le r√©sum√©
                        if membre["cv"] and not membre.get("resume_cv"):
                            membre["resume_cv"] = afficher_informations_cv_document(membre["cv"])
                else:
                    membre["informations"] = st.text_area(
                        f"Informations (Membre {idx + 1})",
                        value=membre["informations"],
                        key=f"text_area_{idx}",
                        placeholder="Entrez les informations manuellement",
                        height=100
                    )

            with col4:
                if st.button("Supprimer", key=f"supprimer_{idx}"):
                    st.session_state["membres"].pop(idx)
                    # Mise √† jour dynamique sans rechargement
                    st.rerun()

    # Afficher un message si la limite est atteinte
    if len(st.session_state["membres"]) >= max_conteneurs:
        st.warning("Vous avez atteint le nombre maximum de membres (5).")

    # Afficher la liste des membres enregistr√©s
    st.subheader("R√©sum√© des membres ajout√©s")
    if st.session_state["membres"]:
        for idx, membre in enumerate(st.session_state["membres"]):
            st.write(f"**Membre {idx + 1}**")
            st.write(f"- **Fonction :** {membre.get('fonction', 'Non d√©fini')}")
            if membre.get("utiliser_cv"):
                if membre.get("cv"):
                    # Afficher uniquement le nom du fichier
                    st.write(f"- **CV :** {membre['cv'].name}")
                    # Afficher le r√©sum√© g√©n√©r√©
                    st.write(f"- **R√©sum√© g√©n√©r√© :** {membre.get('resume_cv', 'R√©sum√© non disponible')}")
                else:
                    st.write("- **CV :** Non valide ou non t√©l√©charg√©")
            else:
                st.write(f"- **Informations :** {membre.get('informations', 'Non fourni')}")




def page_collecte_donnees():
    st.subheader("Collecte des Donn√©es")

    col1, col2, col3 = st.columns([6, 1, 6])
    with col1:
        ui_val = st.number_input(
            "Combien de produits afficher ?",
            min_value=st.session_state["nb_products"],
            step=1,
            value=st.session_state["nb_products"],
            key="ui_nb_products"
        )
        # Synchronisation : si l'utilisateur change la valeur

        if ui_val > st.session_state["nb_products"]:
            # Mettre √† jour uniquement si la valeur a augment√©
            st.session_state["nb_products"] = ui_val
        elif ui_val < st.session_state["nb_products"]:
            # Si l'utilisateur diminue la valeur (non autoris√©), afficher un message
            st.warning("Utilisez uniquement les boutons pour augmenter le nombre de produits.")
                # 2) Bouton "Ajouter un produit"
            
    with col3:
        # 3) Bouton "Supprimer un produit"
        with st.container():
            col1, col2 = st.columns([6, 1])  # Premi√®re colonne plus large que la deuxi√®me

            # Colonne 1 : Selectbox pour choisir un produit
            with col1:
                if len(st.session_state["produits_data"]) >= 0:
                    suppr_index = st.selectbox(
                        "Choisissez un produit √† supprimer",
                        options=["Aucun"] + list(range(len(st.session_state["produits_data"]))),
                        format_func=lambda x: (
                            "Aucun"
                            if x == "Aucun"
                            else f"{x+1} - {st.session_state['produits_data'][x].get('nom_produit', '(inconnu)')}"
                        ),
                        key="suppr_index_select",
                    )

            # Colonne 2 : Bouton de suppression
            with col2:
                if len(st.session_state["produits_data"]) > 0 and suppr_index != "Aucun":
                    st.markdown(
                        """
                        <div style="height: 25px;"></div>
                        """,
                        unsafe_allow_html=True,
                    )

                    if st.button("üóëÔ∏è", key="confirm_delete_button"):
                        # Supprimer le produit s√©lectionn√©
                        st.session_state["produits_data"].pop(suppr_index)

                        # Ajuster le nombre de produits
                        st.session_state["nb_products"] = len(st.session_state["produits_data"])

                        # Supprimer le business_model_precedent associ√© si n√©cessaire
                        if "business_model_precedent" in st.session_state:
                            bm_p = st.session_state["business_model_precedent"].get("product_idx")
                            if bm_p == suppr_index:
                                st.session_state["business_model_precedent"] = {}

                        st.success("Produit supprim√©.")
                        st.rerun()
         
         




    # 4) Si nb_products > taille, on cr√©e des produits vides
    if len(st.session_state["produits_data"]) < st.session_state["nb_products"]:
        diff = st.session_state["nb_products"] - len(st.session_state["produits_data"])
        for _ in range(diff):
            i_new = len(st.session_state["produits_data"])
            st.session_state["produits_data"].append({
                "nom_produit": f"Produit_{i_new+1}",
                "persona": {},
                "problem_tree": {},
                "analyse_marche": {},
                "facteurs_limitants": {},
                "concurrence": {}
            })

    # 5) Affichage
    if len(st.session_state["produits_data"])==0:
        st.info("Aucun produit.")
        return

    nb_affiche = min(st.session_state["nb_products"], len(st.session_state["produits_data"]))
    label_list = []
    for i, p in enumerate(st.session_state["produits_data"]):
        nomp = p.get("nom_produit", f"Produit_{i+1}")
        #label_list.append(f"{i+1} - {nomp}")
    label_list = [f"{i+1} - {p['nom_produit']}" for i, p in enumerate(st.session_state["produits_data"])]

    # G√©n√©rer la liste des labels apr√®s mise √† jour
    label_list = [f"{i+1} - {p['nom_produit']}" for i, p in enumerate(st.session_state["produits_data"])]

    # Cr√©er le selectbox en utilisant la s√©lection sauvegard√©e
    selected_idx = st.selectbox(
        "S√©lectionnez un produit √† modifier",
        options=list(range(len(st.session_state["produits_data"]))),
        format_func=lambda x: label_list[x],
        index=st.session_state["selected_idx_produit"],
        key="selected_idx_produit"
    )
    
    # Mettre √† jour la s√©lection dans st.session_state
    # st.session_state["selected_idx_produit"] = selected_idx
    # D√©tection des changements de s√©lection
    if st.session_state['selected_idx_produit'] != st.session_state['previous_selected_idx_produit']:
        st.session_state['previous_selected_idx_produit'] = st.session_state['selected_idx_produit']
        #st.success(f"Produit s√©lectionn√© chang√© : {label_list[selected_idx]}")


    # Sous-onglets : Persona, Arbre √† Probl√®me, Analyse du March√©, Facteurs Limitants, Concurrence
    tabs = st.tabs([
        "Persona",
        "Arbre √† Probl√®me",
        "Analyse du March√©",
        "Facteurs Limitants",
        "Concurrence"
    ])
    with tabs[0]:
        if 'type_entreprise' not in st.session_state:
            st.warning("Veuillez s√©lectionner le type d'entreprise dans la barre lat√©rale.")
        else:
            if st.session_state.type_entreprise == "PME":
                st.subheader("Collecte de Persona pour PME")
                collect_persona_pme(selected_idx)
            elif st.session_state.type_entreprise == "Startup":
                st.subheader("Collecte de Persona pour Startup")
                collect_persona_pme(selected_idx)
                
    with tabs[1]:
            if st.session_state.type_entreprise == "PME":
                st.subheader("Collecte de Persona pour PME")
                collect_arbre_probleme(selected_idx)
            elif st.session_state.type_entreprise == "Startup":
                st.subheader("Collecte de Persona pour Startup")
                collect_arbre_probleme(selected_idx)
                        
    with tabs[2]:
            if st.session_state.type_entreprise == "PME":
                st.subheader("Collecte de Persona pour PME")
                collect_analyse_marche_pme(selected_idx)
            elif st.session_state.type_entreprise == "Startup":
                st.subheader("Collecte de Persona pour Startup")
                collect_analyse_marche_pme(selected_idx)

    with tabs[3]:
            if st.session_state.type_entreprise == "PME":
                st.subheader("Collecte de Persona pour PME")
                collect_facteurs_limitants_pme(selected_idx)
            elif st.session_state.type_entreprise == "Startup":
                st.subheader("Collecte de Persona pour Startup")
                collect_facteurs_limitants_pme(selected_idx)
        
    with tabs[4]:
            if st.session_state.type_entreprise == "PME":
                st.subheader("Collecte de Persona pour PME")
                collect_concurrence_pme(selected_idx)
            elif st.session_state.type_entreprise == "Startup":
                st.subheader("Collecte de Persona pour Startup")
                collect_concurrence_pme(selected_idx)
            # Bouton pour G√©n√©rer le BMC Initial apr√®s avoir collect√© toutes les donn√©es
            with st.form("form_generate_initial"):
                st.write("Apr√®s avoir collect√© toutes les donn√©es, cliquez sur le bouton ci-dessous pour g√©n√©rer le Business Model Canvas initial.")
                submit_generate_initial = st.form_submit_button("G√©n√©rer BMC Initial")
                submit_generate_ct = st.form_submit_button("Verifier coherence")
                
                
            if submit_generate_ct:
                  
                if "produits_data" in st.session_state and st.session_state["produits_data"]:
                    with st.spinner("G√©n√©ration en cours..."):
                        html_content = chain_of_thougtht("Creativite",
                                                         st.session_state.montant_projet,
                                                         st.session_state.nom_entreprise, 
                                                         "", 
                                                         st.session_state["produits_data"][selected_idx], 
                                                         Analisis='',
                                                         previousbp='', 
                                                         generation=1)
                        st.markdown(html_content)

                            
                else:
                    st.info("Aucun produit ajout√© pour le moment.")
                    
                    
            if submit_generate_initial:   
                if "produits_data" in st.session_state and st.session_state["produits_data"]:
                    with st.spinner("G√©n√©ration en cours..."):
                        date_bmc = st.date_input("Date du BMC", value=datetime.date.today(), key="date_bmc_generate")
                        date_bmc_str = date_bmc.isoformat()
                        # G√©n√©rer le premier BMC
                        contenu_bmc_initial = obtenir_business_model(                          
                            nom_entreprise=st.session_state.nom_entreprise,
                            type_entreprise=st.session_state.type_entreprise,
                            montant_projet=st.session_state.montant_projet,
                            rubriques=st.session_state["produits_data"][selected_idx],
                            previousdata="",
                            ameliorations="",
                            generation=1
                        )
                        #st.write(contenu_bmc_initial)
                        #st.write(st.session_state["produits_data"][selected_idx])
                        st.subheader("Contenu Initial G√©n√©r√© Ishai")
                        encoded_html = base64.b64encode(contenu_bmc_initial.encode('utf-8')).decode('utf-8')

                        # Cr√©er l'URL de donn√©es
                        data_url = f"data:text/html;base64,{encoded_html}"

                        st.markdown(
                            f"""
                            <iframe src="{data_url}" width="100%" height="1500" frameborder="0" scrolling="yes"></iframe>
                            """,
                            unsafe_allow_html=True
                        )
                        
                        if not contenu_bmc_initial:
                            st.error("Erreur lors de la g√©n√©ration du contenu initial. Veuillez r√©essayer ou selectionner d'abord un produit.")
                        else:
                            # G√©n√©rer le document Word en m√©moire
                            # Enregistrer le Business Model dans session_state
                            business_model = {
                                "titre": f"BMC_{nomp}_{date_bmc}",
                                "description": contenu_bmc_initial ,
                                "date_bmc": date_bmc_str
                            }
                            add_business_model(selected_idx, business_model)
                            
                            doc = Document()
                            docx_bytes_initial = generer_docx_business_model(
                                nom_entreprise=st.session_state.nom_entreprise,
                                date_bmc=date_bmc.strftime("%d %B %Y"),
                                contenu_business_model=contenu_bmc_initial,
                                nom_produit=nomp,
                                doc=doc,
                                value=1
                            )
                            
                            st.success("Business Model Canvas initial g√©n√©r√© avec succ√®s !")
                            
                            # Proposer le t√©l√©chargement du document Word
                            st.download_button(
                                label="T√©l√©charger le Business Model Canvas Initial (Word)",
                                data=docx_bytes_initial,
                                file_name=f"BMC_Initial_{st.session_state.nom_entreprise.replace(' ', '_')}.docx",
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                            )
                            
                            # Stocker le BMC initial dans la session pour la deuxi√®me g√©n√©ration
                            st.session_state.business_model_precedent = contenu_bmc_initial
                            
                            # Optionnel : Afficher le contenu g√©n√©r√© pour v√©rification
                            
                            #st.markdown(contenu_bmc_initial, unsafe_allow_html=True)

                            
                else:
                    st.info("Aucun produit ajout√© pour le moment.")
        
   


    # Pour debug : afficher le contenu actuel
    #st.write("Produits en m√©moire :", st.session_state["produits_data"])

# ----------------------------------------------------------------------------
# Business plan 
# ----------------------------------------------------------------------------




# Initialiser le dictionnaire principal dans session_state
if "data" not in st.session_state:
    st.session_state["data"] = {}
    
# Section 1 : Informations G√©n√©rales
def page_informations_generales():
    st.title("Informations G√©n√©rales")
    
    # Acc√®s au dictionnaire principal
    data = st.session_state["data"]
    
    # Collecte des entr√©es et stockage dans le dictionnaire principal
    data["informations_generales"] = data.get("informations_generales", {})
    info = data["informations_generales"]
    info["prenom_nom"] = st.text_input("Pr√©nom, nom :", value=info.get("prenom_nom", ""))
    info["intitule_projet"] = st.text_input("Intitul√© de votre projet :", value=info.get("intitule_projet", ""))
    info["statut_juridique"] = st.selectbox(
        "Votre statut juridique :",
        ["Micro-entreprise", "EURL", "SARL", "SAS", "SASU"],
        index=["Micro-entreprise", "EURL", "SARL", "SAS", "SASU"].index(info.get("statut_juridique", "Micro-entreprise"))
    )
    info["telephone"] = st.text_input("Votre num√©ro de t√©l√©phone :", value=info.get("telephone", ""))
    info["email"] = st.text_input("Votre adresse e-mail :", value=info.get("email", ""))
    info["ville"] = st.text_input("Votre ville ou commune d'activit√© :", value=info.get("ville", ""))
    info["type_vente"] = st.selectbox(
        "Vente de marchandises ou de services ?",
        ["Marchandises", "Services", "Mixte"],
        index=["Marchandises", "Services", "Mixte"].index(info.get("type_vente", "Marchandises"))
    )
    
    # Mise √† jour des donn√©es dans le dictionnaire principal
    st.session_state["data"]["informations_generales"] = info

def page_besoins_demarrage():
    st.title("Besoins de D√©marrage")
    
    # Acc√®s au dictionnaire principal
    data = st.session_state.get("data", {})
    
    # Liste des besoins r√©organis√©e
    besoins = [
        "Frais d‚Äô√©tablissement", 
        "Logiciels, formations",
        "Mat√©riel professionnel",
        "Mat√©riel autre",
        "Mat√©riel de bureau",
        "Stock de mati√®res et produits",
        "Enseigne et √©l√©ments de communication",
        "V√©hicule",
        "Frais de dossier",
        "Frais de notaire",
        "Tr√©sorerie de d√©part",
        "Frais d‚Äôouverture de compteurs",
        "D√©p√¥t de marque",
        "Droits d‚Äôentr√©e",
        "Achat fonds de commerce ou parts",
        "Droit au bail",
        "Caution ou d√©p√¥t de garantie"
    ]
    
    # Initialiser le dictionnaire pour stocker les besoins
    data["besoins_demarrage"] = data.get("besoins_demarrage", {})
    besoins_demarrage = data["besoins_demarrage"]
    
    total_besoins = 0.0
    
    for besoin in besoins:
        montant = st.number_input(
            f"{besoin} ($)",
            min_value=0.0,
            key=f"besoin_{besoin}",
            value=besoins_demarrage.get(besoin, 0.0)
        )
        besoins_demarrage[besoin] = montant
        total_besoins += montant
    
    data["total_besoins"] = total_besoins
    
    st.write("---")
    st.markdown(f"**Total des Besoins de D√©marrage :** {total_besoins:.2f} $")
    
    # Dur√©e d'amortissement
    data["duree_amortissement"] = st.number_input(
        "Dur√©e d'amortissement des investissements (en ann√©es) :",
        min_value=1,
        key="duree_amortissement",
        value=data.get("duree_amortissement", 3)
    )
    
    # Mise √† jour des donn√©es dans le dictionnaire principal
    st.session_state["data"] = data



def calculer_pret_interet_fixe(montant, taux_annuel, duree_mois):
    """
    Calcule les d√©tails d'un pr√™t avec int√©r√™ts fixes par mois.

    Args:
        montant (float): Montant du pr√™t en euros.
        taux_annuel (float): Taux d'int√©r√™t annuel en pourcentage.
        duree_mois (int): Dur√©e du pr√™t en mois.

    Returns:
        dict: D√©tails du pr√™t incluant mensualit√©, total √† rembourser, principal mensuel,
              int√©r√™ts totaux et int√©r√™ts par ann√©e.
    """
    if duree_mois <= 0:
        return {
            "mensualite": 0.0,
            "total_a_rembourser": 0.0,
            "principal_mensuel": 0.0,
            "interet_mensuel": 0.0,
            "interets_totaux": 0.0,
            "interets_annee1": 0.0,
            "interets_annee2": 0.0,
            "interets_annee3": 0.0
        }

    taux_mensuel = taux_annuel / 100 / 12

    # Calcul de la mensualit√© en utilisant la formule PMT
    try:
        mensualite = (taux_mensuel * montant) / (1 - (1 + taux_mensuel) ** (-duree_mois))
    except ZeroDivisionError:
        mensualite = 0.0

    # Principal mensuel fixe
    principal_mensuel = montant / duree_mois

    # Int√©r√™t mensuel
    interet_mensuel = mensualite - principal_mensuel

    # Total √† rembourser
    total_a_rembourser = mensualite * duree_mois

    # Int√©r√™ts totaux
    interets_totaux = interet_mensuel * duree_mois

    # Int√©r√™ts par ann√©e, limit√©s √† 12 mois maximum
    interets_annee1 = interet_mensuel * min(duree_mois, 12)
    interets_annee2 = interet_mensuel * min(max(duree_mois - 12, 0), 12)
    interets_annee3 = interet_mensuel * min(max(duree_mois - 24, 0), 12)

    return {
        "mensualite": round(mensualite, 2),
        "total_a_rembourser": round(total_a_rembourser, 2),
        "principal_mensuel": round(principal_mensuel, 2),
        "interet_mensuel": round(interet_mensuel, 2),
        "interets_totaux": round(interets_totaux, 2),
        "interets_annee1": round(interets_annee1, 2),
        "interets_annee2": round(interets_annee2, 2),
        "interets_annee3": round(interets_annee3, 2)
    }  

def page_financement():
    st.title("Financement des Besoins de D√©marrage")
    
    data = st.session_state.get("data", {})
    
    # Initialiser la section des financements
    if "financements" not in data:
        data["financements"] = {}
    
    financements_dict = data["financements"]
    
    total_financement = 0.0
    
    st.subheader("Apports")
    
    # Apport personnel ou familial
    apport_personnel = st.number_input(
        "Apport personnel ou familial ($)",
        min_value=0.0,
        key="financement_apport_personnel",
        value=financements_dict.get("Apport personnel ou familial", 0.00)
    )
    financements_dict["Apport personnel ou familial"] = apport_personnel
    total_financement += apport_personnel
    
    # Apports en nature (en valeur)
    apport_nature = st.number_input(
        "Apports en nature (en valeur) ($)",
        min_value=0.0,
        key="financement_apport_nature",
        value=financements_dict.get("Apports en nature (en valeur)", 0.00)
    )
    financements_dict["Apports en nature (en valeur)"] = apport_nature
    total_financement += apport_nature
    
    st.subheader("Pr√™ts")
    
    # Nombre de pr√™ts (maximum 3)
    num_prets = 3  # Limit√© √† 3 pr√™ts comme demand√©
    
    interets_prets = {
        "annee1": 0.0,
        "annee2": 0.0,
        "annee3": 0.0
    }
    
    for i in range(1, num_prets + 1):
        st.markdown(f"#### Pr√™t {i}")
        pret_name = st.text_input(
            f"Nom du pr√™t {i}",
            value=financements_dict.get(f"Pr√™t {i}", {}).get("nom", f"Pr√™t {i}"),
            key=f"pret_{i}_nom"
        )
        pret_montant = st.number_input(
            f"Montant du {pret_name} ($)",
            min_value=0.0,
            value=financements_dict.get(f"Pr√™t {i}", {}).get("montant", 0.0),
            key=f"pret_{i}_montant"
        )
        pret_taux = st.number_input(
            f"Taux du {pret_name} (%)",
            min_value=0.0,
            max_value=100.0,
            value=financements_dict.get(f"Pr√™t {i}", {}).get("taux", 0.0),
            key=f"pret_{i}_taux"
        )
        pret_duree = st.number_input(
            f"Dur√©e du {pret_name} (en mois)",
            min_value=1,
            value=financements_dict.get(f"Pr√™t {i}", {}).get("duree", 12),
            key=f"pret_{i}_duree"
        )
        
        # Stocker les d√©tails du pr√™t
        financements_dict[f"Pr√™t {i}"] = {
            "nom": pret_name,
            "montant": pret_montant,
            "taux": pret_taux,
            "duree": pret_duree
        }
        total_financement += pret_montant
        
        # Calculer les d√©tails du remboursement du pr√™t
        if pret_montant > 0 and pret_taux > 0 and pret_duree > 0:
            pret_info = calculer_pret_interet_fixe(pret_montant, pret_taux, pret_duree)
            # Stocker les r√©sultats du calcul
            financements_dict[f"Pr√™t {i}"].update(pret_info)
            # Ajouter les int√©r√™ts par ann√©e
            interets_prets["annee1"] += pret_info["interets_annee1"]
            interets_prets["annee2"] += pret_info["interets_annee2"]
            interets_prets["annee3"] += pret_info["interets_annee3"]
            
            # Afficher les d√©tails du pr√™t pour v√©rification
            st.write(f"**D√©tails du {pret_name}:**")
            st.write(f"Mensualit√© : {pret_info['mensualite']:.2f} $")
            st.write(f"Total √† rembourser : {pret_info['total_a_rembourser']:.2f} $")
            st.write(f"Principal mensuel : {pret_info['principal_mensuel']:.2f} $")
            st.write(f"Int√©r√™t mensuel : {pret_info['interet_mensuel']:.2f} $")
            st.write(f"Int√©r√™ts totaux : {pret_info['interets_totaux']:.2f} $")
            st.write(f"Int√©r√™ts Ann√©e 1 : {pret_info['interets_annee1']:.2f} $")
            st.write(f"Int√©r√™ts Ann√©e 2 : {pret_info['interets_annee2']:.2f} $")
            st.write(f"Int√©r√™ts Ann√©e 3 : {pret_info['interets_annee3']:.2f} $")
            st.write("---")
    
    st.subheader("Subventions")
    
    # Nombre de subventions (maximum 2)
    num_subventions = 2  # Limit√© √† 2 subventions comme demand√©
    
    for i in range(1, num_subventions + 1):
        st.markdown(f"#### Subvention {i}")
        subvention_name = st.text_input(
            f"Nom de la subvention {i}",
            value=financements_dict.get(f"Subvention {i}", {}).get("nom", f"Subvention {i}"),
            key=f"subvention_{i}_nom"
        )
        subvention_montant = st.number_input(
            f"Montant de {subvention_name} ($)",
            min_value=0.0,
            value=financements_dict.get(f"Subvention {i}", {}).get("montant", 0.0),
            key=f"subvention_{i}_montant"
        )
        # Stocker les d√©tails de la subvention
        financements_dict[f"Subvention {i}"] = {
            "nom": subvention_name,
            "montant": subvention_montant
        }
        total_financement += subvention_montant
    
    st.subheader("Autres Financements")
    
    # Autre financement
    autre_financement = st.number_input(
        "Autre financement ($)",
        min_value=0.0,
        key="financement_autre",
        value=financements_dict.get("Autre financement", 0.00)
    )
    financements_dict["Autre financement"] = autre_financement
    total_financement += autre_financement
    
    st.write("---")
    st.markdown(f"**Total des Financements :** {total_financement:,.2f} $")
    
    # Validation du total des financements
    besoin_total = data.get("besoins", 0.0)  # Assurez-vous que cette cl√© existe dans vos donn√©es
    if besoin_total > 0 and total_financement != besoin_total:
        st.error(f"Le total des financements ({total_financement:,.2f} $) ne correspond pas au besoin total ({besoin_total:,.2f} $). Veuillez ajuster les montants.")
    elif besoin_total > 0:
        st.success(f"Le total des financements correspond au besoin total ({besoin_total:,.2f} $).")
    
    # Stocker les donn√©es dans la session
    data["financements"] = financements_dict
    data["total_financement"] = total_financement
    data["interets_prets"] = interets_prets  # Stocker les int√©r√™ts des pr√™ts
    
    st.session_state["data"] = data


def page_charges_fixes():
    st.title("Charges Fixes sur 3 Ann√©es")
    
    data = st.session_state.get("data", {})
    
    charges_fixes = [
        "Assurances v√©hicule et RC pro", "T√©l√©phone, internet", "Autres abonnements",
        "Carburant", "Frais de d√©placement / h√©bergement", "Eau, √©lectricit√©, gaz",
        "Mutuelle", "Fournitures diverses", "Entretien Moto livraison et mat√©riel",
        "Nettoyage des locaux", "Budget publicit√© et communication", "Emplacements",
        "Expert comptable, avocats", "Frais bancaires et terminal carte bleue", "Taxes, CFE"
    ]
    
    # Initialisation des charges fixes si non pr√©sentes
    if "charges_fixes" not in data:
        data["charges_fixes"] = {"annee1": {}, "annee2": {}, "annee3": {}}
        for charge in charges_fixes:
            data["charges_fixes"]["annee1"][charge] = 0.0
            data["charges_fixes"]["annee2"][charge] = 0.0
            data["charges_fixes"]["annee3"][charge] = 0.0
    charges_fixes_dict = data["charges_fixes"]
    
    # Initialisation des charges suppl√©mentaires si non pr√©sentes
    if "charges_supplementaires" not in data:
        data["charges_supplementaires"] = []
    
    # Fonctions de mise √† jour
    def update_year1(charge):
        year1_key = f"charge_{charge}_annee1"
        year2_key = f"charge_{charge}_annee2"
        year3_key = f"charge_{charge}_annee3"
        
        year1_val = st.session_state.get(year1_key, 0.0)
        
        # Mettre √† jour ann√©e 2 et 3 seulement si l'utilisateur n'a pas d√©j√† modifi√© ces champs
        if st.session_state.get(f"updated_{year2_key}", False) == False:
            st.session_state[year2_key] = year1_val
            charges_fixes_dict["annee2"][charge] = year1_val
        if st.session_state.get(f"updated_{year3_key}", False) == False:
            st.session_state[year3_key] = year1_val
            charges_fixes_dict["annee3"][charge] = year1_val

    def update_year2(charge):
        year2_key = f"charge_{charge}_annee2"
        year3_key = f"charge_{charge}_annee3"
        
        year2_val = st.session_state.get(year2_key, 0.0)
        
        # Mettre √† jour ann√©e 3 seulement si l'utilisateur n'a pas d√©j√† modifi√© ce champ
        if st.session_state.get(f"updated_{year3_key}", False) == False:
            st.session_state[year3_key] = year2_val
            charges_fixes_dict["annee3"][charge] = year2_val

    def update_year3(charge):
        # Indiquer que l'ann√©e 3 a √©t√© mise √† jour manuellement
        year3_key = f"charge_{charge}_annee3"
        st.session_state[f"updated_{year3_key}"] = True

    st.subheader("Charges Fixes par D√©faut")
    for charge in charges_fixes:
        col1, col2, col3 = st.columns(3)
        with col1:
            year1_key = f"charge_{charge}_annee1"
            if year1_key not in st.session_state:
                st.session_state[year1_key] = charges_fixes_dict["annee1"].get(charge, 0.0)
            montant1 = st.number_input(
                f"{charge} - Ann√©e 1 ($)",
                min_value=0.0,
                key=year1_key,
                on_change=update_year1,
                args=(charge,),
                value=st.session_state[year1_key]
            )
            charges_fixes_dict["annee1"][charge] = montant1
        with col2:
            year2_key = f"charge_{charge}_annee2"
            if year2_key not in st.session_state:
                st.session_state[year2_key] = charges_fixes_dict["annee2"].get(charge, 0.0)
                st.session_state[f"updated_{year2_key}"] = False
            montant2 = st.number_input(
                f"{charge} - Ann√©e 2 ($)",
                min_value=0.0,
                key=year2_key,
                on_change=update_year2,
                args=(charge,),
                value=st.session_state[year2_key]
            )
            charges_fixes_dict["annee2"][charge] = montant2
        with col3:
            year3_key = f"charge_{charge}_annee3"
            if year3_key not in st.session_state:
                st.session_state[year3_key] = charges_fixes_dict["annee3"].get(charge, 0.0)
                st.session_state[f"updated_{year3_key}"] = False
            montant3 = st.number_input(
                f"{charge} - Ann√©e 3 ($)",
                min_value=0.0,
                key=year3_key,
                on_change=update_year3,
                args=(charge,),
                value=st.session_state[year3_key]
            )
            charges_fixes_dict["annee3"][charge] = montant3
        
    # Charges suppl√©mentaires
    st.write("---")
    st.subheader("Ajouter des Charges Suppl√©mentaires")
    
    nouvelle_charge = st.text_input("Nom de la nouvelle charge :", key="nouvelle_charge")
    
    if st.button("Ajouter la charge"):
        nouvelle_charge = nouvelle_charge.strip()
        if nouvelle_charge and nouvelle_charge not in data["charges_supplementaires"]:
            data["charges_supplementaires"].append(nouvelle_charge)
            charges_fixes_dict["annee1"][nouvelle_charge] = 0.0
            charges_fixes_dict["annee2"][nouvelle_charge] = 0.0
            charges_fixes_dict["annee3"][nouvelle_charge] = 0.0
            # R√©initialiser le champ de texte
            st.session_state["nouvelle_charge"] = ""
    
    for charge in data["charges_supplementaires"]:
        col1, col2, col3 = st.columns(3)
        with col1:
            year1_key = f"charge_{charge}_supp_annee1"
            if year1_key not in st.session_state:
                st.session_state[year1_key] = charges_fixes_dict["annee1"].get(charge, 0.0)
            montant1 = st.number_input(
                f"{charge} - Ann√©e 1 ($)",
                min_value=0.0,
                key=year1_key,
                on_change=update_year1,
                args=(charge,),
                value=st.session_state[year1_key]
            )
            charges_fixes_dict["annee1"][charge] = montant1
        with col2:
            year2_key = f"charge_{charge}_supp_annee2"
            if year2_key not in st.session_state:
                st.session_state[year2_key] = charges_fixes_dict["annee2"].get(charge, 0.0)
                st.session_state[f"updated_{year2_key}"] = False
            montant2 = st.number_input(
                f"{charge} - Ann√©e 2 ($)",
                min_value=0.0,
                key=year2_key,
                on_change=update_year2,
                args=(charge,),
                value=st.session_state[year2_key]
            )
            charges_fixes_dict["annee2"][charge] = montant2
        with col3:
            year3_key = f"charge_{charge}_supp_annee3"
            if year3_key not in st.session_state:
                st.session_state[year3_key] = charges_fixes_dict["annee3"].get(charge, 0.0)
                st.session_state[f"updated_{year3_key}"] = False
            montant3 = st.number_input(
                f"{charge} - Ann√©e 3 ($)",
                min_value=0.0,
                key=year3_key,
                on_change=update_year3,
                args=(charge,),
                value=st.session_state[year3_key]
            )
            charges_fixes_dict["annee3"][charge] = montant3
    
    # Calcul des totaux
    total_annee1 = sum(charges_fixes_dict["annee1"].values())
    total_annee2 = sum(charges_fixes_dict["annee2"].values())
    total_annee3 = sum(charges_fixes_dict["annee3"].values())
    
    data["total_charges_fixes_annee1"] = total_annee1
    data["total_charges_fixes_annee2"] = total_annee2
    data["total_charges_fixes_annee3"] = total_annee3
    
    st.write("---")
    st.markdown(f"**Total Charges Fixes Ann√©e 1 :** {total_annee1:.2f} $")
    st.markdown(f"**Total Charges Fixes Ann√©e 2 :** {total_annee2:.2f} $")
    st.markdown(f"**Total Charges Fixes Ann√©e 3 :** {total_annee3:.2f} $")
    
    st.session_state["data"] = data

def page_chiffre_affaires():
    st.title("Chiffre d'Affaires Pr√©visionnel")
    
    data = st.session_state.get("data", {})
    type_vente = data.get("informations_generales", {}).get("type_vente", "Marchandises")
    
    data["chiffre_affaires"] = data.get("chiffre_affaires", {})
    chiffre_affaires_dict = data["chiffre_affaires"]
    
    mois = [f"Mois {i}" for i in range(1, 13)]
    
    # Fonctions de mise √† jour
    def update_jours_travailles(nom_vente):
        key_jours_mois1 = f"{nom_vente}_Mois 1_jours"
        new_val = st.session_state.get(key_jours_mois1, 0)
        for mois_nom in mois[1:]:
            key = f"{nom_vente}_{mois_nom}_jours"
            if not st.session_state.get(f"updated_{key}", False):
                st.session_state[key] = new_val
                chiffre_affaires_dict[key] = new_val

    def update_ca_moyen_jour(nom_vente):
        key_ca_mois1 = f"{nom_vente}_Mois 1_ca_moyen"
        new_val = st.session_state.get(key_ca_mois1, 0.0)
        for mois_nom in mois[1:]:
            key = f"{nom_vente}_{mois_nom}_ca_moyen"
            if not st.session_state.get(f"updated_{key}", False):
                st.session_state[key] = new_val
                chiffre_affaires_dict[key] = new_val

    def mark_updated(key):
        st.session_state[f"updated_{key}"] = True

    def calcul_chiffre_affaires(nom_vente):
        mois_list = [f"Mois {i}" for i in range(1, 13)]
        data_ca = []
        
        st.subheader(f"Ann√©e 1 - {nom_vente}")
        for mois_nom in mois_list:
            col1, col2, col3 = st.columns(3)
            key_jours = f"{nom_vente}_{mois_nom}_jours"
            key_ca_moyen = f"{nom_vente}_{mois_nom}_ca_moyen"
            key_ca = f"{nom_vente}_{mois_nom}_ca"
            
            with col1:
                if mois_nom == "Mois 1":
                    montant_jours = st.number_input(
                        f"{mois_nom} - Nombre de jours travaill√©s",
                        min_value=0,
                        key=key_jours,
                        value=chiffre_affaires_dict.get(key_jours, 0),
                        on_change=update_jours_travailles,
                        args=(nom_vente,)
                    )
                else:
                    montant_jours = st.number_input(
                        f"{mois_nom} - Nombre de jours travaill√©s",
                        min_value=0,
                        key=key_jours,
                        value=chiffre_affaires_dict.get(key_jours, 0),
                        on_change=lambda key=key_jours: mark_updated(key)
                    )
                chiffre_affaires_dict[key_jours] = montant_jours
            
            with col2:
                if mois_nom == "Mois 1":
                    montant_ca_moyen = st.number_input(
                        f"{mois_nom} - Chiffre d'affaires moyen / jour ($)",
                        min_value=0.0,
                        key=key_ca_moyen,
                        value=chiffre_affaires_dict.get(key_ca_moyen, 0.0),
                        on_change=update_ca_moyen_jour,
                        args=(nom_vente,)
                    )
                else:
                    montant_ca_moyen = st.number_input(
                        f"{mois_nom} - Chiffre d'affaires moyen / jour ($)",
                        min_value=0.0,
                        key=key_ca_moyen,
                        value=chiffre_affaires_dict.get(key_ca_moyen, 0.0),
                        on_change=lambda key=key_ca_moyen: mark_updated(key)
                    )
                chiffre_affaires_dict[key_ca_moyen] = montant_ca_moyen
            
            ca_mensuel = montant_jours * montant_ca_moyen
            chiffre_affaires_dict[key_ca] = ca_mensuel
            data_ca.append({
                "mois": mois_nom,
                "jours_travailles": montant_jours,
                "ca_moyen_jour": montant_ca_moyen,
                "ca_mensuel": ca_mensuel
            })
            
            with col3:
                st.write(f"CA mensuel: {ca_mensuel:.2f} $")
        
        df_ca = pd.DataFrame(data_ca)
        total_ca_annee1 = df_ca["ca_mensuel"].sum()
        chiffre_affaires_dict[f"total_ca_{nom_vente}_annee1"] = total_ca_annee1
        
        st.write("---")
        st.markdown(f"**Total Chiffre d'Affaires Ann√©e 1 ({nom_vente}) :** {total_ca_annee1:.2f} $")
        
        # Pourcentages d'augmentation
        key_aug_annee2 = f"{nom_vente}_augmentation_annee2"
        key_aug_annee3 = f"{nom_vente}_augmentation_annee3"
        pourcentage_augmentation_annee2 = st.number_input(
            f"Pourcentage d'augmentation du CA entre l'ann√©e 1 et l'ann√©e 2 (%) ({nom_vente})",
            min_value=0.0,
            key=key_aug_annee2,
            value=chiffre_affaires_dict.get(key_aug_annee2, 0.0)
        )
        chiffre_affaires_dict[key_aug_annee2] = pourcentage_augmentation_annee2
        pourcentage_augmentation_annee3 = st.number_input(
            f"Pourcentage d'augmentation du CA entre l'ann√©e 2 et l'ann√©e 3 (%) ({nom_vente})",
            min_value=0.0,
            key=key_aug_annee3,
            value=chiffre_affaires_dict.get(key_aug_annee3, 0.0)
        )
        chiffre_affaires_dict[key_aug_annee3] = pourcentage_augmentation_annee3
        
        total_ca_annee2 = total_ca_annee1 * (1 + pourcentage_augmentation_annee2 / 100)
        total_ca_annee3 = total_ca_annee2 * (1 + pourcentage_augmentation_annee3 / 100)
        
        chiffre_affaires_dict[f"total_ca_{nom_vente}_annee2"] = total_ca_annee2
        chiffre_affaires_dict[f"total_ca_{nom_vente}_annee3"] = total_ca_annee3
        
        st.markdown(f"**Total Chiffre d'Affaires Ann√©e 2 ({nom_vente}) :** {total_ca_annee2:.2f} $")
        st.markdown(f"**Total Chiffre d'Affaires Ann√©e 3 ({nom_vente}) :** {total_ca_annee3:.2f} $")
    
    if type_vente in ["Marchandises", "Mixte"]:
        calcul_chiffre_affaires("Marchandises")
    if type_vente in ["Services", "Mixte"]:
        calcul_chiffre_affaires("Services")
    
    # Calcul du total CA toutes ventes
    total_ca_annee1 = sum(
        chiffre_affaires_dict.get(f"total_ca_{type}_annee1", 0.0) for type in ["Marchandises", "Services"]
    )
    total_ca_annee2 = sum(
        chiffre_affaires_dict.get(f"total_ca_{type}_annee2", 0.0) for type in ["Marchandises", "Services"]
    )
    total_ca_annee3 = sum(
        chiffre_affaires_dict.get(f"total_ca_{type}_annee3", 0.0) for type in ["Marchandises", "Services"]
    )
    
    data["total_chiffre_affaires_annee1"] = total_ca_annee1
    data["total_chiffre_affaires_annee2"] = total_ca_annee2
    data["total_chiffre_affaires_annee3"] = total_ca_annee3
    
    st.write("---")
    st.markdown(f"**Total Chiffre d'Affaires Ann√©e 1 (toutes ventes) :** {total_ca_annee1:.2f} $")
    st.markdown(f"**Total Chiffre d'Affaires Ann√©e 2 (toutes ventes) :** {total_ca_annee2:.2f} $")
    st.markdown(f"**Total Chiffre d'Affaires Ann√©e 3 (toutes ventes) :** {total_ca_annee3:.2f} $")
    
    st.session_state["data"] = data
# Section 6 : Charges Variables
def page_charges_variables():
    st.title("Charges Variables")
    
    data = st.session_state["data"]
    type_vente = data["informations_generales"].get("type_vente", "Marchandises")
    
    if type_vente in ["Marchandises", "Mixte"]:
        st.markdown("""
        ### Vos charges variables
        Les charges variables sont li√©es au niveau d‚Äôactivit√© ou √† la production. 
        Il s‚Äôagit des achats de marchandises destin√©es √† √™tre revendues, des achats de mati√®res destin√©es √† √™tre transform√©es, 
        des commissions vers√©es √† des agents commerciaux.
        """)
        
        data["charges_variables"] = data.get("charges_variables", {})
        charges_variables = data["charges_variables"]
        
        # Co√ªt d'achat des marchandises en %
        cout_achat_marchandises_pct = st.number_input(
            "Quel est, en % du prix de vente, le co√ªt d'achat de vos marchandises ? (concerne uniquement le chiffre d'affaires vente de marchandises)",
            min_value=0.0,
            max_value=100.0,
            format="%.2f",
            key="cout_achat_marchandises_pct",
            value=charges_variables.get("cout_achat_marchandises_pct", 0.0)
        )
        charges_variables["cout_achat_marchandises_pct"] = cout_achat_marchandises_pct
        
        st.write(f"Co√ªt d'achat des marchandises : {cout_achat_marchandises_pct:.2f}% du prix de vente")
        
        total_ca_marchandises_annee1 = data["chiffre_affaires"].get("total_ca_Marchandises_annee1", 0.0)
        total_charges_variables = total_ca_marchandises_annee1 * cout_achat_marchandises_pct / 100.0
        
        data["total_charges_variables"] = total_charges_variables
        
        st.write(f"Total des Charges Variables Ann√©e 1 : {total_charges_variables:.2f} $")
        
    else:
        st.info("Cette section est uniquement applicable si vous vendez des marchandises ou des services mixtes.")
        data["total_charges_variables"] = 0.0
    
    st.session_state["data"] = data

# Section 7 : Fonds de Roulement
def page_fonds_roulement():
    st.title("Votre Besoin en Fonds de Roulement")
    
    data = st.session_state["data"]
    
    st.markdown("""
    ### D√©terminez votre besoin en fonds de roulement
    Le fonds de roulement repr√©sente le montant n√©cessaire pour financer le cycle d'exploitation de votre entreprise.
    """)
    
    data["fonds_roulement"] = data.get("fonds_roulement", {})
    fonds_roulement = data["fonds_roulement"]
    
    duree_credits_clients = st.number_input(
        "Dur√©e moyenne des cr√©dits accord√©s aux clients (en jours) :",
        min_value=0,
        help="Temps moyen qu'un client met pour vous payer.",
        key="duree_credits_clients",
        value=fonds_roulement.get("duree_credits_clients", 0)
    )
    fonds_roulement["duree_credits_clients"] = duree_credits_clients
    
    duree_dettes_fournisseurs = st.number_input(
        "Dur√©e moyenne des dettes fournisseurs (en jours) :",
        min_value=0,
        help="Temps moyen que vous mettez pour payer vos fournisseurs.",
        key="duree_dettes_fournisseurs",
        value=fonds_roulement.get("duree_dettes_fournisseurs", 0)
    )
    fonds_roulement["duree_dettes_fournisseurs"] = duree_dettes_fournisseurs
    
    total_ca_annee1 = data.get("total_chiffre_affaires_annee1", 0.0)
    total_charges_variables = data.get("total_charges_variables", 0.0)
    
    bfr = (total_ca_annee1 * duree_credits_clients / 360) - (total_charges_variables * duree_dettes_fournisseurs / 360)
    fonds_roulement["bfr"] = bfr
    
    st.write("---")
    st.markdown(f"**Dur√©e moyenne des cr√©dits clients :** {duree_credits_clients} jours")
    st.markdown(f"**Dur√©e moyenne des dettes fournisseurs :** {duree_dettes_fournisseurs} jours")
    st.markdown(f"**Besoin en Fonds de Roulement (BFR) Ann√©e 1 :** {bfr:.2f} $")
    
    st.session_state["data"] = data

# Section 8 : Salaires
def page_salaires():
    st.title("Salaires Employ√©s et R√©mun√©ration Chef d'Entreprise")
    
    data = st.session_state["data"]
    data["salaires"] = data.get("salaires", {"employes": {}, "dirigeants": {}})
    salaires = data["salaires"]
    
    st.markdown("""
    ### Saisissez les salaires et r√©mun√©rations pour les 3 ann√©es
    Veuillez entrer les chiffres annuels pour les salaires des employ√©s et la r√©mun√©ration nette des dirigeants.
    """)
    
    st.subheader("Salaires Employ√©s (Net)")
    for annee in range(1, 4):
        key = f"annee{annee}"
        salaires["employes"][key] = st.number_input(
            f"Salaires Employ√©s Ann√©e {annee} ($)",
            min_value=0.0,
            key=f"salaires_employes_annee_{annee}",
            value=salaires["employes"].get(key, 0.0)
        )
    
    st.subheader("R√©mun√©ration Nette Dirigeant(s)")
    for annee in range(1, 4):
        key = f"annee{annee}"
        salaires["dirigeants"][key] = st.number_input(
            f"R√©mun√©ration Dirigeant Ann√©e {annee} ($)",
            min_value=0.0,
            key=f"remuneration_dirigeant_annee_{annee}",
            value=salaires["dirigeants"].get(key, 0.0)
        )
    
    st.write("---")
    accre = st.selectbox(
        "Le(s) dirigeant(s) b√©n√©ficient-ils de l'ACRE ?",
        options=["Oui", "Non"],
        key="accre",
        index=["Oui", "Non"].index(data.get("accre", "Non")),
        help="Veuillez s√©lectionner 'Oui' si les dirigeants b√©n√©ficient de l'ACRE. Cette question est obligatoire."
    )
    data["accre"] = accre
    
    total_salaires_annee1 = salaires["employes"]["annee1"] + salaires["dirigeants"]["annee1"]
    total_salaires_annee2 = salaires["employes"]["annee2"] + salaires["dirigeants"]["annee2"]
    total_salaires_annee3 = salaires["employes"]["annee3"] + salaires["dirigeants"]["annee3"]
    
    data["total_salaires_annee1"] = total_salaires_annee1
    data["total_salaires_annee2"] = total_salaires_annee2
    data["total_salaires_annee3"] = total_salaires_annee3
    
    st.write("---")
    st.markdown(f"**Total Salaires et R√©mun√©ration Ann√©e 1 :** {total_salaires_annee1:.2f} $")
    st.markdown(f"**Total Salaires et R√©mun√©ration Ann√©e 2 :** {total_salaires_annee2:.2f} $")
    st.markdown(f"**Total Salaires et R√©mun√©ration Ann√©e 3 :** {total_salaires_annee3:.2f} $")
    
    st.session_state["data"] = data

# Section 9 : Contr√¥le de Rentabilit√©
def page_rentabilite():
    st.title("Contr√¥le de Rentabilit√©")
    
    data = st.session_state["data"]
    
    total_charges_fixes_annee1 = data.get("total_charges_fixes_annee1", 0.0)
    total_charges_variables = data.get("total_charges_variables", 0.0)
    total_chiffre_affaires = data.get("total_chiffre_affaires_annee1", 0.0)
    total_salaires_annee1 = data.get("total_salaires_annee1", 0.0)
    
    if total_chiffre_affaires > 0:
        marge_brute = ((total_chiffre_affaires - total_charges_variables) / total_chiffre_affaires) * 100.0
    else:
        marge_brute = 0.0
    
    charges_fixes_totales = total_charges_fixes_annee1 + total_salaires_annee1
    if marge_brute > 0:
        seuil_rentabilite = charges_fixes_totales / (marge_brute / 100.0)
    else:
        seuil_rentabilite = 0.0
    
    if total_chiffre_affaires >= seuil_rentabilite:
        rentabilite = "Rentable"
        message_rentabilite = "L'entreprise est rentable."
        couleur_rentabilite = "green"
    else:
        rentabilite = "Non rentable"
        message_rentabilite = "L'entreprise n'est pas rentable. Il faut augmenter le chiffre d'affaires ou r√©duire les charges."
        couleur_rentabilite = "red"
    
    data["marge_brute"] = marge_brute
    data["seuil_rentabilite"] = seuil_rentabilite
    data["rentabilite"] = rentabilite
    
    st.write("---")
    st.markdown(f"**Marge Brute :** {marge_brute:.2f} %")
    st.markdown(f"**Seuil de Rentabilit√© :** {seuil_rentabilite:.2f} $")
    st.markdown(f"<div style='background-color:{couleur_rentabilite}; color:white; padding:10px; border-radius:5px; text-align:center;'>"
                f"<strong>{rentabilite}</strong> - {message_rentabilite}</div>", unsafe_allow_html=True)
    
    st.session_state["data"] = data

# Section 10 : Tr√©sorerie de D√©part
def page_tresorerie():
    st.title("Contr√¥le du Niveau de votre Tr√©sorerie de D√©part")
    data = st.session_state["data"]
    besoins_demarrage=data.get("besoins_demarrage", 0.0)
    tresorerie_depart1 = besoins_demarrage.get("Tr√©sorerie de d√©part", 0.0)
    
    total_charges_fixes_annee1 = data.get("total_charges_fixes_annee1", 0.0)
    st.markdown(f"**Tr√©sorerie de d√©part :** {tresorerie_depart1 :.2f} $")
    tresorerie_depart=tresorerie_depart1
    
    data["tresorerie_depart"] = tresorerie_depart
    
    seuil_tresorerie = total_charges_fixes_annee1 / 4.0  # 3 mois de charges fixes
    if tresorerie_depart >= seuil_tresorerie:
        niveau_tresorerie = "Ad√©quate"
        message_tresorerie = "Votre tr√©sorerie de d√©part est ad√©quate pour couvrir les charges initiales."
        couleur_tresorerie = "green"
    else:
        niveau_tresorerie = "Trop faible"
        message_tresorerie = "Votre tr√©sorerie de d√©part est trop faible. Pr√©voyez plus de tr√©sorerie pour couvrir les charges."
        couleur_tresorerie = "red"
    
    data["niveau_tresorerie"] = niveau_tresorerie
    
    st.write("---")
    st.markdown(f"### R√©sultat pour la 1√®re ann√©e :")
    st.markdown(f"<div style='background-color:{couleur_tresorerie}; color:white; padding:10px; border-radius:5px; text-align:center;'>"
                f"<strong>{niveau_tresorerie}</strong> - {message_tresorerie}</div>", unsafe_allow_html=True)
    
    st.session_state["data"] = data

# Section 11 : R√©capitulatif
def page_recapitulatif():
    st.title("R√©capitulatif Complet des Donn√©es")
    
    data = st.session_state["data"]
    
    st.subheader("1. Informations G√©n√©rales")
    info = data.get("informations_generales", {})
    st.write(f"Pr√©nom, nom : {info.get('prenom_nom', '')}")
    st.write(f"Intitul√© du projet : {info.get('intitule_projet', '')}")
    st.write(f"Statut juridique : {info.get('statut_juridique', '')}")
    st.write(f"T√©l√©phone : {info.get('telephone', '')}")
    st.write(f"Email : {info.get('email', '')}")
    st.write(f"Ville : {info.get('ville', '')}")
    st.write(f"Type de vente : {info.get('type_vente', '')}")
    
    st.subheader("2. Besoins de D√©marrage")
    besoins = data.get("besoins_demarrage", {})
    total_besoins = data.get("total_besoins", 0.0)
    for besoin, montant in besoins.items():
        st.write(f"{besoin} : {montant:.2f} $")
    st.write(f"**Total des Besoins de D√©marrage : {total_besoins:.2f} $**")
    
    st.title("R√©capitulatif des Financements")
    data = st.session_state.get("data", {})
    financements_dict = data.get("financements", {})
    total_financement = data.get("total_financement", 0.0)
    st.subheader("Financements")
    for financement, details in financements_dict.items():
        if isinstance(details, dict):
            montant = details.get("montant", 0.0)
            st.write(f"{details.get('nom', financement)} : {montant:.2f} $")
        else:
            montant = details
            st.write(f"{financement} : {montant:.2f} $")
    
    st.markdown(f"**Total des Financements :** {total_financement:.2f} $")
    
    st.subheader("4. Charges Fixes sur 3 Ann√©es")
    charges_fixes_dict = data.get("charges_fixes", {"annee1": {}, "annee2": {}, "annee3": {}})
    total_annee1 = data.get("total_charges_fixes_annee1", 0.0)
    total_annee2 = data.get("total_charges_fixes_annee2", 0.0)
    total_annee3 = data.get("total_charges_fixes_annee3", 0.0)
    charges_supp = data.get("charges_supplementaires", [])
    
    for charge in charges_fixes_dict["annee1"].keys():
        montant1 = charges_fixes_dict["annee1"].get(charge, 0.0)
        montant2 = charges_fixes_dict["annee2"].get(charge, 0.0)
        montant3 = charges_fixes_dict["annee3"].get(charge, 0.0)
        st.write(f"{charge} - Ann√©e 1 : {montant1:.2f} $, Ann√©e 2 : {montant2:.2f} $, Ann√©e 3 : {montant3:.2f} $")
    
    st.write(f"**Total Charges Fixes Ann√©e 1 : {total_annee1:.2f} $**")
    st.write(f"**Total Charges Fixes Ann√©e 2 : {total_annee2:.2f} $**")
    st.write(f"**Total Charges Fixes Ann√©e 3 : {total_annee3:.2f} $**")
    
    st.subheader("5. Chiffre d'Affaires Pr√©visionnel")
    total_ca_annee1 = data.get("total_chiffre_affaires_annee1", 0.0)
    total_ca_annee2 = data.get("total_chiffre_affaires_annee2", 0.0)
    total_ca_annee3 = data.get("total_chiffre_affaires_annee3", 0.0)
    
    st.write(f"Total Chiffre d'Affaires Ann√©e 1 : {total_ca_annee1:.2f} $")
    st.write(f"Total Chiffre d'Affaires Ann√©e 2 : {total_ca_annee2:.2f} $")
    st.write(f"Total Chiffre d'Affaires Ann√©e 3 : {total_ca_annee3:.2f} $")
    
    st.subheader("6. Charges Variables")
    cout_achat_marchandises_pct = data.get("charges_variables", {}).get("cout_achat_marchandises_pct", 0.0)
    total_charges_variables = data.get("total_charges_variables", 0.0)
    st.write(f"Co√ªt d'achat des marchandises (% du CA) : {cout_achat_marchandises_pct:.2f} %")
    st.write(f"Total Charges Variables Ann√©e 1 : {total_charges_variables:.2f} $")
    
    st.subheader("7. Fonds de Roulement")
    fonds_roulement = data.get("fonds_roulement", {})
    duree_credits_clients = fonds_roulement.get("duree_credits_clients", 0)
    duree_dettes_fournisseurs = fonds_roulement.get("duree_dettes_fournisseurs", 0)
    bfr = fonds_roulement.get("bfr", 0.0)
    st.write(f"Dur√©e moyenne des cr√©dits clients : {duree_credits_clients} jours")
    st.write(f"Dur√©e moyenne des dettes fournisseurs : {duree_dettes_fournisseurs} jours")
    st.write(f"Besoin en Fonds de Roulement (BFR) Ann√©e 1 : {bfr:.2f} $")
    
    st.subheader("8. Salaires et R√©mun√©ration")
    salaires = data.get("salaires", {})
    for annee in range(1, 4):
        key = f"annee{annee}"
        salaires_employes = salaires.get("employes", {}).get(key, 0.0)
        remuneration_dirigeants = salaires.get("dirigeants", {}).get(key, 0.0)
        st.write(f"Ann√©e {annee} : Salaires employ√©s : {salaires_employes:.2f} $, R√©mun√©ration dirigeants : {remuneration_dirigeants:.2f} $")
        st.write(f"Total Salaires Ann√©e {annee} : {(salaires_employes + remuneration_dirigeants):.2f} $")
    
    st.subheader("9. Rentabilit√©")
    marge_brute = data.get("marge_brute", 0.0)
    seuil_rentabilite = data.get("seuil_rentabilite", 0.0)
    rentabilite = data.get("rentabilite", "Non rentable")
    st.write(f"Marge Brute : {marge_brute:.2f} %")
    st.write(f"Seuil de Rentabilit√© : {seuil_rentabilite:.2f} $")
    st.write(f"Rentabilit√© : {rentabilite}")
    
    st.subheader("10. Tr√©sorerie de D√©part")
    tresorerie_depart = data.get("tresorerie_depart", 0.0)
    niveau_tresorerie = data.get("niveau_tresorerie", "Trop faible")
    st.write(f"Montant de la Tr√©sorerie Initiale : {tresorerie_depart:.2f} $")
    st.write(f"Niveau de Tr√©sorerie : {niveau_tresorerie}")
    
    st.session_state["data"] = data
    
    
    
    
import streamlit as st
import pandas as pd
from io import BytesIO
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

def page_investissements_et_financements(): 
    st.title("Investissements et Financements")
    
    # Initialiser la cl√© 'export_data' dans session_state si elle n'existe pas
    if 'export_data' not in st.session_state:
        st.session_state['export_data'] = {}
    
    # R√©cup√©rer les donn√©es de la session
    data = st.session_state.get("data", {})
    
    # R√©cup√©rer les informations du projet
    projet = data.get("informations_generales", {}).get("intitule_projet", "N/A")
    porteur_projet = data.get("informations_generales", {}).get("prenom_nom", "N/A")
    
    st.write(f"**Projet :** {projet}")
    st.write(f"**Porteur de projet :** {porteur_projet}")
    
    st.write("---")
    
    # Initialiser une liste pour stocker toutes les lignes du tableau
    table_data = []
    
    # Immobilisations Incorporelles
    immobilisations_incorporelles = {
        "Frais d‚Äô√©tablissement": data.get("besoins_demarrage", {}).get("Frais d‚Äô√©tablissement", 0.0),
        "Frais d‚Äôouverture de compteurs": data.get("besoins_demarrage", {}).get("Frais d‚Äôouverture de compteurs", 0.0),
        "Logiciels, formations": data.get("besoins_demarrage", {}).get("Logiciels, formations", 0.0),
        "D√©p√¥t de marque": data.get("besoins_demarrage", {}).get("D√©p√¥t de marque", 0.0),
        "Droits d‚Äôentr√©e": data.get("besoins_demarrage", {}).get("Droits d‚Äôentr√©e", 0.0),
        "Achat fonds de commerce ou parts": data.get("besoins_demarrage", {}).get("Achat fonds de commerce ou parts", 0.0),
        "Droit au bail": data.get("besoins_demarrage", {}).get("Droit au bail", 0.0),
        "Caution ou d√©p√¥t de garantie": data.get("besoins_demarrage", {}).get("Caution ou d√©p√¥t de garantie", 0.0),
        "Frais de dossier": data.get("besoins_demarrage", {}).get("Frais de dossier", 0.0),
        "Frais de notaire": data.get("besoins_demarrage", {}).get("Frais de notaire", 0.0),
    }
    total_incorporelles = sum(immobilisations_incorporelles.values())
    table_data.append({
        "Investissements": "Immobilisations incorporelles",
        "Taux (%)": "",
        "Dur√©e (mois)": "",
        "Montant ($)": f"{total_incorporelles:.2f}"
    })
    for desc, montant in immobilisations_incorporelles.items():
        table_data.append({
            "Investissements": desc,
            "Taux (%)": "",
            "Dur√©e (mois)": "",
            "Montant ($)": f"{montant:.2f}"
        })
    
    # Immobilisations Corporelles
    immobilisations_corporelles = {
        "Enseigne et √©l√©ments de communication": data.get("besoins_demarrage", {}).get("Enseigne et √©l√©ments de communication", 0.0),
        "V√©hicule": data.get("besoins_demarrage", {}).get("V√©hicule", 0.0),
        "Mat√©riel professionnel": data.get("besoins_demarrage", {}).get("Mat√©riel professionnel", 0.0),
        "Mat√©riel autre": data.get("besoins_demarrage", {}).get("Mat√©riel autre", 0.0),
        "Mat√©riel de bureau": data.get("besoins_demarrage", {}).get("Mat√©riel de bureau", 0.0),
    }
    total_corporelles = sum(immobilisations_corporelles.values())
    table_data.append({
        "Investissements": "Immobilisations corporelles",
        "Taux (%)": "",
        "Dur√©e (mois)": "",
        "Montant ($)": f"{total_corporelles:.2f}"
    })
    for desc, montant in immobilisations_corporelles.items():
        table_data.append({
            "Investissements": desc,
            "Taux (%)": "",
            "Dur√©e (mois)": "",
            "Montant ($)": f"{montant:.2f}"
        })
    
    # Autres Investissements
    autres_investissements = {
        "Stock de mati√®res et produits": data.get("besoins_demarrage", {}).get("Stock de mati√®res et produits", 0.0),
        "Tr√©sorerie de d√©part": data.get("besoins_demarrage", {}).get("Tr√©sorerie de d√©part", 0.0)
    }
    total_autres = sum(autres_investissements.values())
    table_data.append({
        "Investissements": "Autres investissements",
        "Taux (%)": "",
        "Dur√©e (mois)": "",
        "Montant ($)": f"{total_autres:.2f}"
    })
    for desc, montant in autres_investissements.items():
        table_data.append({
            "Investissements": desc,
            "Taux (%)": "",
            "Dur√©e (mois)": "",
            "Montant ($)": f"{montant:.2f}"
        })
    
    # TOTAL BESOINS
    total_besoins = total_incorporelles + total_corporelles + total_autres
    table_data.append({
        "Investissements": "TOTAL BESOINS",
        "Taux (%)": "",
        "Dur√©e (mois)": "",
        "Montant ($)": f"{total_besoins:.2f}"
    })
    
    # Section FINANCEMENT DES INVESTISSEMENTS
    table_data.append({
        "Investissements": "FINANCEMENT DES INVESTISSEMENTS",
        "Taux (%)": "",
        "Dur√©e (mois)": "",
        "Montant ($)": ""
    })
    table_data.append({
        "Investissements": "Montant $ hors taxes",
        "Taux (%)": "",
        "Dur√©e (mois)": "",
        "Montant ($)": ""
    })
    
    # Apport Personnel
    financements = data.get("financements", {})
    apport_personnel = {
        "Apport personnel ou familial": financements.get("Apport personnel ou familial", 0.0),
        "Apports en nature (en valeur)": financements.get("Apports en nature (en valeur)", 0.0),
    }
    total_apport_personnel = sum(apport_personnel.values())
    table_data.append({
        "Investissements": "Apport personnel",
        "Taux (%)": "",
        "Dur√©e (mois)": "",
        "Montant ($)": f"{total_apport_personnel:.2f}"
    })
    for desc, montant in apport_personnel.items():
        table_data.append({
            "Investissements": desc,
            "Taux (%)": "",
            "Dur√©e (mois)": "",
            "Montant ($)": f"{montant:.2f}"
        })
    
    # Emprunts Dynamiques
    emprunts_keys = ["Pr√™t 1", "Pr√™t 2", "Pr√™t 3"]
    emprunts_list = []
    total_emprunts = 0.0

    # Collecter les d√©tails des emprunts
    for i, key in enumerate(emprunts_keys, start=1):
        pret = financements.get(key, {})
        nom = pret.get("nom", "")
        taux = pret.get("taux", 0.0)
        duree = pret.get("duree", 0)
        montant = pret.get("montant", 0.0)
        
        # D√©finir le nom de l'emprunt
        emprunt_nom = nom if nom else f"Pr√™t {i}"
        
        # Ajouter les d√©tails du pr√™t
        if montant > 0:
            emprunts_list.append({
                "Investissements": emprunt_nom,
                "Taux (%)": f"{taux:.2f}%",
                "Dur√©e (mois)": duree,
                "Montant ($)": f"{montant:.2f}"
            })
            total_emprunts += montant
        else:
            emprunts_list.append({
                "Investissements": emprunt_nom,
                "Taux (%)": "-",
                "Dur√©e (mois)": "-",
                "Montant ($)": "0.00"
            })

    # TOTAL EMPRUNTS - plac√© avant les emprunts individuels
    table_data.append({
        "Investissements": "TOTAL EMPRUNTS",
        "Taux (%)": "",
        "Dur√©e (mois)": "",
        "Montant ($)": f"{total_emprunts:.2f}"
    })

    # Ajouter les emprunts individuels apr√®s le total
    for emprunt in emprunts_list:
        table_data.append(emprunt)

     # Subventions Dynamiques
    subventions_keys = ["Subvention 1", "Subvention 2"]
    subventions_list = []
    total_subventions = 0.0
    
    # Calculer le total des subventions d'abord
    for i, key in enumerate(subventions_keys, start=1):
        subv = financements.get(key, {})
        nom = subv.get("nom", "")
        montant = subv.get("montant", 0.0)
        
        # D√©finir le nom de la subvention
        subvention_nom = nom if nom else f"Subvention {i}"
        
        # Ajouter les d√©tails de la subvention
        if montant > 0:
            subventions_list.append({
                "Investissements": subvention_nom,
                "Taux (%)": "",
                "Dur√©e (mois)": "",
                "Montant ($)": f"{montant:.2f}"
            })
            total_subventions += montant
        else:
            subventions_list.append({
                "Investissements": subvention_nom,
                "Taux (%)": "",
                "Dur√©e (mois)": "",
                "Montant ($)": "0.00"
            })
    
    # TOTAL SUBVENTIONS - plac√© avant les subventions individuelles
    table_data.append({
        "Investissements": "TOTAL SUBVENTIONS",
        "Taux (%)": "",
        "Dur√©e (mois)": "",
        "Montant ($)": f"{total_subventions:.2f}"
    })
    
    # Ajouter les subventions individuelles apr√®s le total
    for subv in subventions_list:
        table_data.append(subv)
    
    # Autre Financement
    autre_financement = financements.get("Autre financement", 0.0)
    table_data.append({
        "Investissements": "Autre financement",
        "Taux (%)": "",
        "Dur√©e (mois)": "",
        "Montant ($)": f"{autre_financement:.2f}"
    })
    
    # TOTAL RESSOURCES
    total_ressources = total_apport_personnel + total_emprunts + total_subventions + autre_financement
    table_data.append({
        "Investissements": "TOTAL RESSOURCES",
        "Taux (%)": "",
        "Dur√©e (mois)": "",
        "Montant ($)": f"{total_ressources:.2f}"
    })
    
    # V√©rification de l'√©quilibre
    if total_ressources == total_besoins:
        equilibrium_message = "Le total des ressources couvre exactement les besoins."
        equilibrium_type = "success"
    elif total_ressources > total_besoins:
        surplus = total_ressources - total_besoins
        equilibrium_message = f"Les ressources d√©passent les besoins de {surplus:.2f} $."
        equilibrium_type = "info"
    else:
        deficit = total_besoins - total_ressources
        equilibrium_message = f"Il manque {deficit:.2f} $ pour couvrir les besoins."
        equilibrium_type = "warning"
    
    if equilibrium_type == "success":
        st.success(equilibrium_message)
    elif equilibrium_type == "info":
        st.info(equilibrium_message)
    else:
        st.warning(equilibrium_message)
    
    st.write("---")
    
    # Cr√©er le DataFrame unique avec les quatre colonnes
    df_unique = pd.DataFrame(table_data, columns=["Investissements", "Taux (%)", "Dur√©e (mois)", "Montant ($)"])
    
    # Afficher le tableau dans Streamlit
    st.dataframe(df_unique.style.apply(lambda x: ['background-color: #f0f0f0' if pd.isna(v) else '' for v in x], axis=1))
    
    # Stocker les totaux dans la session
    data["total_investissements"] = total_besoins
    data["total_financements"] = total_ressources
    
    st.session_state["data"] = data
    
    # Stocker les donn√©es d'exportation dans la nouvelle session
    st.session_state['export_data_investissements'] = {
        "projet": projet,
        "porteur_projet": porteur_projet,
        "table_data": table_data,
        "equilibre": {
            "type": equilibrium_type,
            "message": equilibrium_message
        }
    }
    
    # Section Export
    st.header("Exporter les donn√©es")
    
    # Bouton pour t√©l√©charger le Markdown
    if st.button("T√©l√©charger en Markdown"):
        markdown_content = f"# Investissements et Financements\n\n**Projet :** {projet}\n\n**Porteur de projet :** {porteur_projet}\n\n"
        
        # Convertir le DataFrame en Markdown
        markdown_content += df_unique.to_markdown(index=False)
        markdown_content += f"\n\n---\n\n{equilibrium_message}\n"
        
        markdown_bytes = markdown_content.encode('utf-8')
        st.download_button(
            label="T√©l√©charger le Markdown",
            data=markdown_bytes,
            file_name="investissements_et_financements.md",
            mime="text/markdown"
        )
    
    # Bouton pour t√©l√©charger le fichier Word
    if st.button("T√©l√©charger en Word"):
        export_data = st.session_state.get('export_data', {})
        if not export_data or "table_data" not in export_data:
            st.error("Aucune donn√©e disponible pour l'exportation.")
        else:
            doc = Document()
            doc.add_heading('Investissements et Financements', level=1)
            doc.add_paragraph(f"**Projet :** {export_data['projet']}")
            doc.add_paragraph(f"**Porteur de projet :** {export_data['porteur_projet']}")
            doc.add_page_break()
            
            # Cr√©er le DataFrame pour Word
            df_word = pd.DataFrame(export_data['table_data'], columns=["Investissements", "Taux (%)", "Dur√©e (mois)", "Montant ($)"])
            
            # Ajouter le tableau au document Word
            table = doc.add_table(rows=1, cols=len(df_word.columns))
            table.style = 'Light List Accent 1'  # Choisissez un style appropri√©
            hdr_cells = table.rows[0].cells
            for i, column in enumerate(df_word.columns):
                hdr_cells[i].text = column
                hdr_cells[i].paragraphs[0].runs[0].font.bold = True
                hdr_cells[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            for index, row in df_word.iterrows():
                row_cells = table.add_row().cells
                for i, item in enumerate(row):
                    row_cells[i].text = str(item)
                    # Mettre en gras les cat√©gories principales et les totaux
                    if row["Investissements"] in ["INVESTISSEMENTS", "Montant $ hors taxes",
                                                 "Immobilisations incorporelles", "Immobilisations corporelles",
                                                 "Autres investissements", "TOTAL BESOINS",
                                                 "FINANCEMENT DES INVESTISSEMENTS", "Apport personnel",
                                                 "Emprunt", "TOTAL EMPRUNTS", "Subvention",
                                                 "TOTAL SUBVENTIONS", "Autre financement", "TOTAL RESSOURCES"]:
                        run = row_cells[i].paragraphs[0].runs
                        if run:
                            run[0].font.bold = True
            doc.add_paragraph()
            doc.add_paragraph(export_data['equilibre']['message'])
            
            # Enregistrer le document dans un buffer
            buffer = BytesIO()
            doc.save(buffer)
            buffer.seek(0)
            
            st.download_button(
                label="T√©l√©charger le fichier Word",
                data=buffer,
                file_name="investissements_et_financements.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
            )


def page_salaires_charges_sociales():
    st.title("Salaires et Charges Sociales")
    
    # Initialiser la cl√© 'export_data_salaires_charges_sociales' dans session_state si elle n'existe pas
    if 'export_data_salaires_charges_sociales' not in st.session_state:
        st.session_state['export_data_salaires_charges_sociales'] = {}
    
    data = st.session_state.get("data", {})
    
    # R√©cup√©rer les informations du projet
    projet = data.get("informations_generales", {}).get("intitule_projet", "")
    porteur_projet = data.get("informations_generales", {}).get("prenom_nom", "")
    statut_juridique = data.get("informations_generales", {}).get("statut_juridique", "")
    benefice_accre = data.get("accre", "Non")  # Assurez-vous que cette information est bien stock√©e dans data
    
    # D√©terminer le statut social du dirigeant en fonction du statut juridique
    if statut_juridique in ["Entreprise individuelle", "EURL (IS)", "EIRL (IS)", "Micro-entreprise"]:
        statut_social_dirigeant = "Travailleur Non Salari√© (TNS)"
    elif statut_juridique in ["SARL (IS)", "SAS (IS)", "SASU (IS)"]:
        statut_social_dirigeant = "Assimil√© Salari√©"
    else:
        statut_social_dirigeant = "Autre"
    
    st.write(f"**Projet :** {projet}")
    st.write(f"**Porteur de projet :** {porteur_projet}")
    st.write(f"**Statut juridique :** {statut_juridique}")
    st.write(f"**B√©n√©fice de l'ACRE :** {benefice_accre}")
    st.write(f"**Statut social du (des) dirigeant(s) :** {statut_social_dirigeant}")
    
    st.write("---")
    
    # R√©cup√©rer les donn√©es de salaires
    salaires = data.get("salaires", {})
    salaires_dirigeant = salaires.get("dirigeants", {})
    salaires_employes = salaires.get("employes", {})
    
    # D√©finir les taux de charges sociales en fonction du statut juridique et de l'ACCRE
    taux_charges_dirigeant = {
        # Sans ACCRE
        "Sans ACCRE": {
            "Travailleur Non Salari√© (TNS)": 0.45,
            "Assimil√© Salari√©": 0.80,  # Taux approximatif pour les assimil√©s salari√©s
        },
        # Avec ACCRE
        "Avec ACCRE": {
            "Travailleur Non Salari√© (TNS)": 0.22,
            "Assimil√© Salari√©": 0.50,  # Taux r√©duit pour les assimil√©s salari√©s avec ACRE
        }
    }
    
    # S√©lection du taux appropri√© pour le dirigeant
    if benefice_accre.lower() == "oui":
        taux_dirigeant = taux_charges_dirigeant["Avec ACCRE"].get(statut_social_dirigeant, 0.45)
    else:
        taux_dirigeant = taux_charges_dirigeant["Sans ACCRE"].get(statut_social_dirigeant, 0.45)
    
    # Taux de charges sociales pour les employ√©s
    taux_charges_employe = 0.72  # Comme indiqu√©, multiplier par 0.72 qu'il ait ACCRE ou pas
    
    # Pr√©paration des donn√©es pour le tableau
    annees = ["Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    remuneration_dirigeant = []
    augmentation_dirigeant = []
    charges_sociales_dirigeant = []
    remuneration_employes = []
    augmentation_employes = []
    charges_sociales_employes = []
    
    for i, annee in enumerate(annees):
        annee_key = f"annee{i+1}"
        # R√©mun√©ration du (des) dirigeants
        remu_dirigeant = salaires_dirigeant.get(annee_key, 0.0)
        remuneration_dirigeant.append(remu_dirigeant)
        # % augmentation dirigeant
        if i == 0:
            aug_dirigeant = "-"
        else:
            previous_remu_dirigeant = remuneration_dirigeant[i-1]
            if previous_remu_dirigeant != 0:
                aug_dirigeant_value = ((remu_dirigeant - previous_remu_dirigeant) / previous_remu_dirigeant) * 100
                aug_dirigeant = f"{aug_dirigeant_value:.2f}%"
            else:
                aug_dirigeant = "-"
        augmentation_dirigeant.append(aug_dirigeant)
        # Charges sociales du (des) dirigeant(s)
        charge_sociale_dirigeant = remu_dirigeant * taux_dirigeant
        charges_sociales_dirigeant.append(charge_sociale_dirigeant)
        
        # Salaires des employ√©s
        remu_employes = salaires_employes.get(annee_key, 0.0)
        remuneration_employes.append(remu_employes)
        # % augmentation employ√©s
        if i == 0:
            aug_employes = "-"
        else:
            previous_remu_employes = remuneration_employes[i-1]
            if previous_remu_employes != 0:
                aug_employes_value = ((remu_employes - previous_remu_employes) / previous_remu_employes) * 100
                aug_employes = f"{aug_employes_value:.2f}%"
            else:
                aug_employes = "-"
        augmentation_employes.append(aug_employes)
        # Charges sociales employ√©s
        charge_sociale_employes = remu_employes * taux_charges_employe
        charges_sociales_employes.append(charge_sociale_employes)
    
    # Cr√©ation du DataFrame pour l'affichage
    df = pd.DataFrame({
        "": ["R√©mun√©ration du (des) dirigeants", "% augmentation", "Charges sociales du (des) dirigeant(s)",
             "Salaires des employ√©s", "% augmentation", "Charges sociales employ√©s"],
        "Ann√©e 1": [f"{remuneration_dirigeant[0]:.2f} $", augmentation_dirigeant[0], f"{charges_sociales_dirigeant[0]:.2f} $",
                    f"{remuneration_employes[0]:.2f} $", augmentation_employes[0], f"{charges_sociales_employes[0]:.2f} $"],
        "Ann√©e 2": [f"{remuneration_dirigeant[1]:.2f} $", augmentation_dirigeant[1], f"{charges_sociales_dirigeant[1]:.2f} $",
                    f"{remuneration_employes[1]:.2f} $", augmentation_employes[1], f"{charges_sociales_employes[1]:.2f} $"],
        "Ann√©e 3": [f"{remuneration_dirigeant[2]:.2f} $", augmentation_dirigeant[2], f"{charges_sociales_dirigeant[2]:.2f} $",
                    f"{remuneration_employes[2]:.2f} $", augmentation_employes[2], f"{charges_sociales_employes[2]:.2f} $"]
    })
    
    st.table(df)
    
    # Stocker les charges sociales dans les donn√©es pour exportation
    data["charges_sociales"] = {
        "dirigeants": {
            "annee1": charges_sociales_dirigeant[0],
            "annee2": charges_sociales_dirigeant[1],
            "annee3": charges_sociales_dirigeant[2]
        },
        "employes": {
            "annee1": charges_sociales_employes[0],
            "annee2": charges_sociales_employes[1],
            "annee3": charges_sociales_employes[2]
        }
    }
    
    st.session_state["data"] = data
    
    # Pr√©parer les donn√©es d'exportation pour Salaires et Charges Sociales
    export_table_data = []
    
    # Ajouter les lignes du tableau
    for index, row in df.iterrows():
        export_table_data.append({
            "Description": row[""],
            "Ann√©e 1": row["Ann√©e 1"],
            "Ann√©e 2": row["Ann√©e 2"],
            "Ann√©e 3": row["Ann√©e 3"]
        })
    
    # Stocker les donn√©es d'exportation dans la session
    st.session_state['export_data_salaires_charges_sociales'] = {
        "projet": projet,
        "porteur_projet": porteur_projet,
        "statut_juridique": statut_juridique,
        "benefice_accre": benefice_accre,
        "statut_social_dirigeant": statut_social_dirigeant,
        "table_data": export_table_data
    }
    
    # Section Export
    st.header("Exporter les donn√©es")
    
    # Bouton pour t√©l√©charger le Markdown
    if st.button("T√©l√©charger Salaires en Markdown"):
        export_data = st.session_state.get('export_data_salaires_charges_sociales', {})
        if not export_data or "table_data" not in export_data:
            st.error("Aucune donn√©e disponible pour l'exportation.")
        else:
            # Construire le contenu Markdown
            markdown_content = f"# Salaires et Charges Sociales\n\n**Projet :** {export_data['projet']}\n\n"
            markdown_content += f"**Porteur de projet :** {export_data['porteur_projet']}\n\n"
            markdown_content += f"**Statut juridique :** {export_data['statut_juridique']}\n\n"
            markdown_content += f"**B√©n√©fice de l'ACRE :** {export_data['benefice_accre']}\n\n"
            markdown_content += f"**Statut social du (des) dirigeant(s) :** {export_data['statut_social_dirigeant']}\n\n"
            markdown_content += "---\n\n"
            
            # Cr√©er un DataFrame pour Markdown
            df_markdown = pd.DataFrame(export_data['table_data'])
            markdown_content += df_markdown.to_markdown(index=False)
            
            markdown_content += f"\n\n---\n\n"
            
            markdown_bytes = markdown_content.encode('utf-8')
            st.download_button(
                label="T√©l√©charger le Markdown",
                data=markdown_bytes,
                file_name="salaires_charges_sociales.md",
                mime="text/markdown"
            )
    
    # Bouton pour t√©l√©charger le fichier Word
    if st.button("T√©l√©charger Salaires en Word"):
        export_data_salaires = st.session_state.get('export_data_salaires_charges_sociales', {})
        export_data_investissements = st.session_state.get('export_data_investissements', {})
        
        if not export_data_salaires or "table_data" not in export_data_salaires:
            st.error("Aucune donn√©e disponible pour l'exportation des Salaires et Charges Sociales.")
            return
        
        if not export_data_investissements or "table_data" not in export_data_investissements:
            st.error("Aucune donn√©e disponible pour l'exportation des Investissements et Financements.")
            return
        
        doc = Document()
        
        # Ajouter la premi√®re table : Investissements et Financements
        doc.add_heading('Investissements et Financements', level=1)
        doc.add_paragraph(f"**Projet :** {export_data_investissements['projet']}")
        doc.add_paragraph(f"**Porteur de projet :** {export_data_investissements['porteur_projet']}")
        doc.add_paragraph(f"**Equilibre :** {export_data_investissements['equilibre']['message']}")
        doc.add_page_break()
        
        # Cr√©er le tableau Investissements et Financements dans Word
        table_word_inv = doc.add_table(rows=1, cols=4)
        table_word_inv.style = 'Light List Accent 1'
        table_word_inv.alignment = WD_TABLE_ALIGNMENT.CENTER
        hdr_cells_inv = table_word_inv.rows[0].cells
        headers_inv = ["Investissements", "Taux (%)", "Dur√©e (mois)", "Montant ($)"]
        for i, header in enumerate(headers_inv):
            hdr_cells_inv[i].text = header
            # Mettre en gras les en-t√™tes
            for paragraph in hdr_cells_inv[i].paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True
            hdr_cells_inv[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Ajouter les donn√©es Investissements et Financements au tableau
        for row in export_data_investissements['table_data']:
            row_cells_inv = table_word_inv.add_row().cells
            row_cells_inv[0].text = row["Investissements"]
            row_cells_inv[1].text = row["Taux (%)"]
            row_cells_inv[2].text = str(row["Dur√©e (mois)"]) if row["Dur√©e (mois)"] != "-" else "-"
            row_cells_inv[3].text = row["Montant ($)"]
            
            # Mise en forme des lignes sp√©cifiques
            if row["Investissements"] in ["INVESTISSEMENTS", "FINANCEMENT DES INVESTISSEMENTS", "TOTAL SUBVENTIONS", "TOTAL EMPRUNTS"]:
                for cell in row_cells_inv:
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            run.font.bold = True
            elif "TOTAL" in row["Investissements"]:
                for cell in row_cells_inv:
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            run.font.bold = True
            else:
                pass  # Aucune mise en forme suppl√©mentaire
            
            # Alignement des cellules
            row_cells_inv[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            row_cells_inv[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            row_cells_inv[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        
        # Ajouter la deuxi√®me table : Salaires et Charges Sociales
        doc.add_heading('Salaires et Charges Sociales', level=1)
        doc.add_paragraph(f"**Projet :** {export_data_salaires['projet']}")
        doc.add_paragraph(f"**Porteur de projet :** {export_data_salaires['porteur_projet']}")
        doc.add_paragraph(f"**Statut juridique :** {export_data_salaires['statut_juridique']}")
        doc.add_paragraph(f"**B√©n√©fice de l'ACRE :** {export_data_salaires['benefice_accre']}")
        doc.add_paragraph(f"**Statut social du (des) dirigeant(s) :** {export_data_salaires['statut_social_dirigeant']}")
        doc.add_paragraph("---")
        
        # Cr√©er le tableau Salaires et Charges Sociales dans Word
        table_word_sal = doc.add_table(rows=1, cols=4)
        table_word_sal.style = 'Light List Accent 1'
        table_word_sal.alignment = WD_TABLE_ALIGNMENT.CENTER
        hdr_cells_sal = table_word_sal.rows[0].cells
        headers_sal = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
        for i, header in enumerate(headers_sal):
            hdr_cells_sal[i].text = header
            # Mettre en gras les en-t√™tes
            for paragraph in hdr_cells_sal[i].paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True
            hdr_cells_sal[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Ajouter les donn√©es Salaires et Charges Sociales au tableau
        for row in export_data_salaires['table_data']:
            row_cells_sal = table_word_sal.add_row().cells
            row_cells_sal[0].text = row["Description"]
            row_cells_sal[1].text = row["Ann√©e 1"]
            row_cells_sal[2].text = row["Ann√©e 2"]
            row_cells_sal[3].text = row["Ann√©e 3"]
            
            # Mise en forme des lignes sp√©cifiques
            # Vous pouvez ajouter des conditions ici pour mettre en forme certaines lignes si n√©cessaire
            
            # Alignement des cellules
            row_cells_sal[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
            row_cells_sal[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
            row_cells_sal[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        
        # Ajouter des informations suppl√©mentaires si n√©cessaire
        doc.add_paragraph()
        doc.add_paragraph("Les charges sociales sont calcul√©es en fonction des taux applicables.")
        
        # Enregistrer le document dans un buffer
        buffer = BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        
        st.download_button(
            label="T√©l√©charger le fichier Word Complet",
            data=buffer,
            file_name="investissements_et_salaires_charges_sociales.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )


def page_detail_amortissements():
    st.title("D√©tail des Amortissements")
    
    # Initialiser la cl√© 'export_data_detail_amortissements' dans session_state si elle n'existe pas
    if 'export_data_detail_amortissements' not in st.session_state:
        st.session_state['export_data_detail_amortissements'] = {}
    
    data = st.session_state.get("data", {})
    
    st.write("---")
    
    # R√©cup√©rer la dur√©e d'amortissement
    duree_amortissement = data.get("duree_amortissement", 3)  # Par d√©faut √† 3 ans si non d√©fini
    if duree_amortissement <= 0:
        st.warning("La dur√©e d'amortissement doit √™tre sup√©rieure √† z√©ro.")
        return
    
    # R√©cup√©rer les montants des investissements
    besoins_demarrage = data.get("besoins_demarrage", {})
    
    # Fonction pour calculer les amortissements
    def calcul_amortissements(items):
        amortissements = {}
        total_amort = [0.0, 0.0, 0.0]
        for item in items:
            amount = besoins_demarrage.get(item, 0.0)
            annual_depreciation = amount / duree_amortissement if duree_amortissement > 0 else 0.0
            amortization_years = [0.0, 0.0, 0.0]
            for year in range(3):
                if year < duree_amortissement:
                    amortization_years[year] = annual_depreciation
                    total_amort[year] += annual_depreciation
            amortissements[item] = amortization_years
        return amortissements, total_amort
    
    # Incorporels
    incorporels_items = [
        "Frais d‚Äô√©tablissement",
        "Logiciels, formations",
        "Droits d‚Äôentr√©e",
        "Frais de dossier",
        "Frais de notaire"
    ]
    incorporels_amortissements, total_incorporels_amort = calcul_amortissements(incorporels_items)
    
    # Corporels
    corporels_items = [
        "Enseigne et √©l√©ments de communication",
        "V√©hicule",
        "Mat√©riel professionnel",
        "Mat√©riel autre",
        "Mat√©riel de bureau"
    ]
    corporels_amortissements, total_corporels_amort = calcul_amortissements(corporels_items)
    
    # Total amortissements par ann√©e
    total_amortissements = [
        total_incorporels_amort[year] + total_corporels_amort[year] for year in range(3)
    ]
    
    # Cr√©ation d'un tableau unique
    st.subheader("Amortissements")
    amortissements_data = []
    
    # Ajout des totaux des cat√©gories
    amortissements_data.append({
        "Amortissement": "Amortissements incorporels",
        "Ann√©e 1": f"{total_incorporels_amort[0]:.2f}",
        "Ann√©e 2": f"{total_incorporels_amort[1]:.2f}",
        "Ann√©e 3": f"{total_incorporels_amort[2]:.2f}"
    })
    
    # Ajout d'une ligne vide pour la lisibilit√©
    amortissements_data.append({
        "Amortissement": "",
        "Ann√©e 1": "",
        "Ann√©e 2": "",
        "Ann√©e 3": ""
    })
    
    # Ajout des d√©tails des amortissements incorporels
    for item in incorporels_items:
        amortization_years = incorporels_amortissements.get(item, [0.0, 0.0, 0.0])
        amortissements_data.append({
            "Amortissement": item,
            "Ann√©e 1": f"{amortization_years[0]:.2f}",
            "Ann√©e 2": f"{amortization_years[1]:.2f}",
            "Ann√©e 3": f"{amortization_years[2]:.2f}"
        })
    
    # Ajout d'une ligne vide pour la lisibilit√©
    amortissements_data.append({
        "Amortissement": "",
        "Ann√©e 1": "",
        "Ann√©e 2": "",
        "Ann√©e 3": ""
    })
    amortissements_data.append({
        "Amortissement": "Amortissements corporels",
        "Ann√©e 1": f"{total_corporels_amort[0]:.2f}",
        "Ann√©e 2": f"{total_corporels_amort[1]:.2f}",
        "Ann√©e 3": f"{total_corporels_amort[2]:.2f}"
    })
        # Ajout d'une ligne vide pour la lisibilit√©
    amortissements_data.append({
        "Amortissement": "",
        "Ann√©e 1": "",
        "Ann√©e 2": "",
        "Ann√©e 3": ""
    })
        
    # Ajout des d√©tails des amortissements corporels
    for item in corporels_items:
        amortization_years = corporels_amortissements.get(item, [0.0, 0.0, 0.0])
        amortissements_data.append({
            "Amortissement": item,
            "Ann√©e 1": f"{amortization_years[0]:.2f}",
            "Ann√©e 2": f"{amortization_years[1]:.2f}",
            "Ann√©e 3": f"{amortization_years[2]:.2f}"
        })
    
    # Ajout d'une ligne vide pour la lisibilit√©
    amortissements_data.append({
        "Amortissement": "",
        "Ann√©e 1": "",
        "Ann√©e 2": "",
        "Ann√©e 3": ""
    })
    
    # Total amortissements
    amortissements_data.append({
        "Amortissement": "Total Amortissements",
        "Ann√©e 1": f"{total_amortissements[0]:.2f}",
        "Ann√©e 2": f"{total_amortissements[1]:.2f}",
        "Ann√©e 3": f"{total_amortissements[2]:.2f}"
    })
    
    # Cr√©ation du DataFrame
    df_amortissements = pd.DataFrame(amortissements_data)
    
    # Affichage du tableau avec des bordures pour plus de clart√©
    st.table(df_amortissements.style.set_properties(**{
        'text-align': 'right'
    }).set_table_styles([
        {'selector': 'th', 'props': [('text-align', 'center')]}
    ]))

    
    # Stocker les amortissements dans les donn√©es pour exportation
    data["amortissements"] = {
        "incorporels": {
            "annee1": total_incorporels_amort[0],
            "annee2": total_incorporels_amort[1],
            "annee3": total_incorporels_amort[2]
        },
        "corporels": {
            "annee1": total_corporels_amort[0],
            "annee2": total_corporels_amort[1],
            "annee3": total_corporels_amort[2]
        },
        "total": {
            "annee1": total_amortissements[0],
            "annee2": total_amortissements[1],
            "annee3": total_amortissements[2]
        }
    }
    
    st.session_state["data"] = data
    
    # Pr√©parer les donn√©es d'exportation pour D√©tail des Amortissements
    export_table_amortissements = []
    for row in amortissements_data:
        export_table_amortissements.append({
            "Amortissement": row["Amortissement"],
            "Ann√©e 1": row["Ann√©e 1"],
            "Ann√©e 2": row["Ann√©e 2"],
            "Ann√©e 3": row["Ann√©e 3"]
        })
    
    # Stocker les donn√©es d'exportation dans la session
    st.session_state['export_data_detail_amortissements'] = {
        "amortissements": export_table_amortissements
    }
    
    # Section Export
    st.header("Exporter les donn√©es")
    
    # Bouton pour t√©l√©charger le Markdown
    if st.button("T√©l√©charger Amortissements en Markdown"):
        export_data = st.session_state.get('export_data_detail_amortissements', {})
        if not export_data:
            st.error("Aucune donn√©e disponible pour l'exportation.")
        else:
            # Construire le contenu Markdown
            markdown_content = f"# D√©tail des Amortissements\n\n"
            markdown_content += "---\n\n"
            
            # Amortissements
            markdown_content += "## Amortissements\n\n"
            df_amortissements_md = pd.DataFrame(export_data['amortissements'])
            markdown_content += df_amortissements_md.to_markdown(index=False)
            markdown_content += "\n\n"
            
            markdown_bytes = markdown_content.encode('utf-8')
            st.download_button(
                label="T√©l√©charger le Markdown",
                data=markdown_bytes,
                file_name="detail_amortissements.md",
                mime="text/markdown"
            )
    
    # Bouton pour t√©l√©charger le fichier Word
    if st.button("T√©l√©charger Amortissements en Word"):
        export_data_amortissements = st.session_state.get('export_data_detail_amortissements', {})
        export_data_investissements = st.session_state.get('export_data_investissements', {})
        export_data_salaires = st.session_state.get('export_data_salaires_charges_sociales', {})
        
        if not export_data_amortissements or "amortissements" not in export_data_amortissements:
            st.error("Aucune donn√©e disponible pour l'exportation des Amortissements.")
            return
        
        if not export_data_investissements or "table_data" not in export_data_investissements:
            st.error("Aucune donn√©e disponible pour l'exportation des Investissements et Financements.")
            return
        
        if not export_data_salaires or "table_data" not in export_data_salaires:
            st.error("Aucune donn√©e disponible pour l'exportation des Salaires et Charges Sociales.")
            return
        
        doc = Document()
        
        # Ajouter la premi√®re table : Investissements et Financements
        doc.add_heading('Investissements et Financements', level=1)
        doc.add_paragraph(f"**Projet :** {export_data_investissements['projet']}")
        doc.add_paragraph(f"**Porteur de projet :** {export_data_investissements['porteur_projet']}")
        doc.add_paragraph(f"**Equilibre :** {export_data_investissements['equilibre']['message']}")
        doc.add_page_break()
        
        # Cr√©er le tableau Investissements et Financements dans Word
        table_word_inv = doc.add_table(rows=1, cols=4)
        table_word_inv.style = 'Light List Accent 1'
        table_word_inv.alignment = WD_TABLE_ALIGNMENT.CENTER
        hdr_cells_inv = table_word_inv.rows[0].cells
        headers_inv = ["Investissements", "Taux (%)", "Dur√©e (mois)", "Montant ($)"]
        for i, header in enumerate(headers_inv):
            hdr_cells_inv[i].text = header
            # Mettre en gras les en-t√™tes
            for paragraph in hdr_cells_inv[i].paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True
            hdr_cells_inv[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Ajouter les donn√©es Investissements et Financements au tableau
        for row in export_data_investissements['table_data']:
            row_cells_inv = table_word_inv.add_row().cells
            row_cells_inv[0].text = row["Investissements"]
            row_cells_inv[1].text = row["Taux (%)"]
            row_cells_inv[2].text = str(row["Dur√©e (mois)"]) if row["Dur√©e (mois)"] != "-" else "-"
            row_cells_inv[3].text = row["Montant ($)"]
            
            # Mise en forme des lignes sp√©cifiques
            if row["Investissements"] in ["INVESTISSEMENTS", "FINANCEMENT DES INVESTISSEMENTS", "TOTAL SUBVENTIONS", "TOTAL EMPRUNTS"]:
                for cell in row_cells_inv:
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            run.font.bold = True
            elif "TOTAL" in row["Investissements"]:
                for cell in row_cells_inv:
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            run.font.bold = True
            else:
                pass  # Aucune mise en forme suppl√©mentaire
            
            # Alignement des cellules
            row_cells_inv[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            row_cells_inv[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            row_cells_inv[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        
        # Ajouter la deuxi√®me table : Salaires et Charges Sociales
        doc.add_heading('Salaires et Charges Sociales', level=1)
        doc.add_paragraph(f"**Projet :** {export_data_salaires['projet']}")
        doc.add_paragraph(f"**Porteur de projet :** {export_data_salaires['porteur_projet']}")
        doc.add_paragraph(f"**Statut juridique :** {export_data_salaires['statut_juridique']}")
        doc.add_paragraph(f"**B√©n√©fice de l'ACRE :** {export_data_salaires['benefice_accre']}")
        doc.add_paragraph(f"**Statut social du (des) dirigeant(s) :** {export_data_salaires['statut_social_dirigeant']}")
        doc.add_paragraph("---")
        
        # Cr√©er le tableau Salaires et Charges Sociales dans Word
        table_word_sal = doc.add_table(rows=1, cols=4)
        table_word_sal.style = 'Light List Accent 1'
        table_word_sal.alignment = WD_TABLE_ALIGNMENT.CENTER
        hdr_cells_sal = table_word_sal.rows[0].cells
        headers_sal = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
        for i, header in enumerate(headers_sal):
            hdr_cells_sal[i].text = header
            # Mettre en gras les en-t√™tes
            for paragraph in hdr_cells_sal[i].paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True
            hdr_cells_sal[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Ajouter les donn√©es Salaires et Charges Sociales au tableau
        for row in export_data_salaires['table_data']:
            row_cells_sal = table_word_sal.add_row().cells
            row_cells_sal[0].text = row["Description"]
            row_cells_sal[1].text = row["Ann√©e 1"]
            row_cells_sal[2].text = row["Ann√©e 2"]
            row_cells_sal[3].text = row["Ann√©e 3"]
            
            # Mise en forme des lignes sp√©cifiques
            # Vous pouvez ajouter des conditions ici pour mettre en forme certaines lignes si n√©cessaire
            
            # Alignement des cellules
            row_cells_sal[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
            row_cells_sal[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
            row_cells_sal[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        
        # Ajouter la troisi√®me table : D√©tail des Amortissements
        doc.add_heading('D√©tail des Amortissements', level=1)
        
        export_data_amortissements = st.session_state.get('export_data_detail_amortissements', {})
        
        # V√©rifier si les donn√©es d'amortissements sont disponibles
        if not export_data_amortissements or "amortissements" not in export_data_amortissements:
            st.error("Aucune donn√©e disponible pour l'exportation des Amortissements.")
            return
        
        # Cr√©er le tableau Amortissements dans Word
        doc.add_heading('Amortissements', level=2)
        table_word_amort = doc.add_table(rows=1, cols=4)
        table_word_amort.style = 'Light List Accent 1'
        table_word_amort.alignment = WD_TABLE_ALIGNMENT.CENTER
        hdr_cells_amort = table_word_amort.rows[0].cells
        headers_amort = ["Amortissement", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
        for i, header in enumerate(headers_amort):
            hdr_cells_amort[i].text = header
            # Mettre en gras les en-t√™tes
            for paragraph in hdr_cells_amort[i].paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True
            hdr_cells_amort[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Ajouter les donn√©es Amortissements au tableau
        for row in export_data_amortissements['amortissements']:
            row_cells_amort = table_word_amort.add_row().cells
            row_cells_amort[0].text = row["Amortissement"]
            row_cells_amort[1].text = row["Ann√©e 1"]
            row_cells_amort[2].text = row["Ann√©e 2"]
            row_cells_amort[3].text = row["Ann√©e 3"]
        
        # Ajouter des informations suppl√©mentaires si n√©cessaire
        doc.add_paragraph()
        doc.add_paragraph("Les amortissements sont calcul√©s en fonction de la dur√©e d'amortissement sp√©cifi√©e.")
        
        # Enregistrer le document dans un buffer
        buffer = BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        
        st.download_button(
            label="T√©l√©charger le fichier Word Complet",
            data=buffer,
            file_name="document_complet_financier.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
        

def telecharger_document_complet():
    export_data_investissements = st.session_state.get('export_data_investissements', {})
    export_data_salaires = st.session_state.get('export_data_salaires_charges_sociales', {})
    export_data_amortissements = st.session_state.get('export_data_detail_amortissements', {})
    export_data_compte = st.session_state.get('export_data_compte_resultats_previsionnel', {})
    
    # V√©rifiez que toutes les donn√©es sont pr√©sentes
    if not all([export_data_investissements.get("table_data"),
                export_data_salaires.get("table_data"),
                export_data_amortissements.get("amortissements"),
                export_data_compte.get("table_data")]):
        st.error("Toutes les sections doivent √™tre remplies avant de t√©l√©charger le document complet.")
        return
    
    # Cr√©er un document Word
    doc = Document()
    
    ### 1. Ajouter la section Investissements et Financements ###
    doc.add_heading('Investissements et Financements', level=1)
    doc.add_paragraph(f"**Projet :** {export_data_investissements.get('projet', 'N/A')}")
    doc.add_paragraph(f"**Porteur de projet :** {export_data_investissements.get('porteur_projet', 'N/A')}")
    doc.add_paragraph(f"**Equilibre :** {export_data_investissements.get('equilibre', {}).get('message', '')}")
    doc.add_page_break()
    
    # Cr√©er le tableau Investissements et Financements
    table_inv = doc.add_table(rows=1, cols=4)
    table_inv.style = 'Light List Accent 1'
    table_inv.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_inv = table_inv.rows[0].cells
    headers_inv = ["Investissements", "Taux (%)", "Dur√©e (mois)", "Montant ($)"]
    for i, header in enumerate(headers_inv):
        hdr_cells_inv[i].text = header
        for paragraph in hdr_cells_inv[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_inv[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_investissements['table_data']:
        row_cells = table_inv.add_row().cells
        row_cells[0].text = row.get("Investissements", "")
        row_cells[1].text = row.get("Taux (%)", "")
        row_cells[2].text = str(row.get("Dur√©e (mois)", "")) if row.get("Dur√©e (mois)", "") != "-" else "-"
        row_cells[3].text = row.get("Montant ($)", "")
        
        # Mise en forme des lignes sp√©cifiques
        if row["Investissements"] in ["INVESTISSEMENTS", "FINANCEMENT DES INVESTISSEMENTS", "TOTAL SUBVENTIONS", "TOTAL EMPRUNTS"]:
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.bold = True
        elif "TOTAL" in row["Investissements"]:
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.bold = True
        
        # Alignement des cellules
        row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    
    ### 2. Ajouter la section Salaires et Charges Sociales ###
    doc.add_heading('Salaires et Charges Sociales', level=1)
    doc.add_paragraph(f"**Projet :** {export_data_salaires.get('projet', 'N/A')}")
    doc.add_paragraph(f"**Porteur de projet :** {export_data_salaires.get('porteur_projet', 'N/A')}")
    doc.add_paragraph(f"**Statut juridique :** {export_data_salaires.get('statut_juridique', 'N/A')}")
    doc.add_paragraph(f"**B√©n√©fice de l'ACRE :** {export_data_salaires.get('benefice_accre', 'N/A')}")
    doc.add_paragraph(f"**Statut social du (des) dirigeant(s) :** {export_data_salaires.get('statut_social_dirigeant', 'N/A')}")
    doc.add_paragraph("---")
    
    # Cr√©er le tableau Salaires et Charges Sociales
    table_sal = doc.add_table(rows=1, cols=4)
    table_sal.style = 'Light List Accent 1'
    table_sal.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_sal = table_sal.rows[0].cells
    headers_sal = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_sal):
        hdr_cells_sal[i].text = header
        for paragraph in hdr_cells_sal[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_sal[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_salaires['table_data']:
        row_cells = table_sal.add_row().cells
        row_cells[0].text = row.get("Description", "")
        row_cells[1].text = row.get("Ann√©e 1", "")
        row_cells[2].text = row.get("Ann√©e 2", "")
        row_cells[3].text = row.get("Ann√©e 3", "")
        
        # Alignement des cellules
        row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    
    ### 3. Ajouter la section D√©tail des Amortissements ###
    doc.add_heading('D√©tail des Amortissements', level=1)
    
    # Cr√©er le tableau D√©tail des Amortissements
    table_amort = doc.add_table(rows=1, cols=4)
    table_amort.style = 'Light List Accent 1'
    table_amort.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_amort = table_amort.rows[0].cells
    headers_amort = ["Amortissement", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_amort):
        hdr_cells_amort[i].text = header
        for paragraph in hdr_cells_amort[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_amort[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_amortissements['amortissements']:
        row_cells = table_amort.add_row().cells
        row_cells[0].text = row.get("Amortissement", "")
        row_cells[1].text = row.get("Ann√©e 1", "")
        row_cells[2].text = row.get("Ann√©e 2", "")
        row_cells[3].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les amortissements sont calcul√©s en fonction de la dur√©e d'amortissement sp√©cifi√©e.")
    
    ### 4. Ajouter la section Compte de R√©sultats Pr√©visionnel ###
    doc.add_heading('Compte de R√©sultats Pr√©visionnel', level=1)
    
    # Cr√©er le tableau Compte de R√©sultats Pr√©visionnel
    table_compte = doc.add_table(rows=1, cols=4)
    table_compte.style = 'Light List Accent 1'
    table_compte.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_compte = table_compte.rows[0].cells
    headers_compte = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_compte):
        hdr_cells_compte[i].text = header
        for paragraph in hdr_cells_compte[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_compte[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_compte['table_data']:
        row_cells = table_compte.add_row().cells
        row_cells[0].text = row.get("Description", "")
        row_cells[1].text = row.get("Ann√©e 1", "")
        row_cells[2].text = row.get("Ann√©e 2", "")
        row_cells[3].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    # Enregistrer le document dans un buffer
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    # Bouton de t√©l√©chargement
    st.download_button(
        label="T√©l√©charger le fichier Word Complet",
        data=buffer,
        file_name="document_complet_financier.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )


def calculer_impot_societes(resultat_avant_impots):
    """
    Calcule l'Imp√¥t sur les Soci√©t√©s (IS) selon la formule progressive.

    Args:
        resultat_avant_impots (float): R√©sultat avant imp√¥ts.

    Returns:
        float: Montant de l'IS.
    """
    if resultat_avant_impots < 0:
        return 0.0
    elif resultat_avant_impots > 38120:
        return 38120 * 0.15 + (resultat_avant_impots - 38120) * 0.28
    else:
        return resultat_avant_impots * 0.15

def page_compte_resultats_previsionnel():
    st.title("Compte de r√©sultats pr√©visionnel sur 3 ans")
    
    # Initialiser la cl√© 'export_data_compte_resultats_previsionnel' dans session_state si elle n'existe pas
    if 'export_data_compte_resultats_previsionnel' not in st.session_state:
        st.session_state['export_data_compte_resultats_previsionnel'] = {}
    
    data = st.session_state.get("data", {})
    
    # R√©cup√©rer les informations du projet
    projet = data.get("informations_generales", {}).get("intitule_projet", "")
    porteur_projet = data.get("informations_generales", {}).get("prenom_nom", "")
    
    st.write(f"**Projet :** {projet}")
    st.write(f"**Porteur de projet :** {porteur_projet}")
    
    st.write("---")
    
    # Pr√©paration des donn√©es
    # Chiffre d'affaires
    ca_marchandises = [
        data["chiffre_affaires"].get("total_ca_Marchandises_annee1", 0.0),
        data["chiffre_affaires"].get("total_ca_Marchandises_annee2", 0.0),
        data["chiffre_affaires"].get("total_ca_Marchandises_annee3", 0.0)
    ]
    ca_services = [
        data["chiffre_affaires"].get("total_ca_Services_annee1", 0.0),
        data["chiffre_affaires"].get("total_ca_Services_annee2", 0.0),
        data["chiffre_affaires"].get("total_ca_Services_annee3", 0.0)
    ]
    total_ca = [
        ca_marchandises[0] + ca_services[0],
        ca_marchandises[1] + ca_services[1],
        ca_marchandises[2] + ca_services[2]
    ]
    
    # Achats consomm√©s (charges variables) - Suppos√©s nuls si pas de marchandises vendues
    data["charges_variables"] = data.get("charges_variables", {})
    charges_variables = data["charges_variables"]
    cout_achat_marchandises_pct=charges_variables.get("cout_achat_marchandises_pct", 0.0)
    
    charges_variables = [ca_marchandises[0]* cout_achat_marchandises_pct / 100.0,
                         ca_marchandises[1]* cout_achat_marchandises_pct / 100.0,
                         ca_marchandises[2]* cout_achat_marchandises_pct / 100.0
                         ]
    
    # charges exploitations (charges exploitations) - Suppos√©s nuls si pas de marchandises vendues
    
    charges_exploitations = charges_variables 

    
    # Marge brute = Total CA - Achats consomm√©s
    marge_brute = [
        total_ca[0] - charges_variables[0],
        total_ca[1] - charges_variables[1],
        total_ca[2] - charges_variables[2]
    ]
    
    # Charges externes (charges fixes)
    charges_fixes_data = data.get("charges_fixes", {})
    charges_fixes_annee1 = charges_fixes_data.get("annee1", {})
    charges_fixes_annee2 = charges_fixes_data.get("annee2", {})
    charges_fixes_annee3 = charges_fixes_data.get("annee3", {})
    
    # Liste des charges externes d√©taill√©es
    liste_charges = [
        "Assurances v√©hicule et RC pro", "T√©l√©phone, internet", "Autres abonnements",
        "Carburant", "Frais de d√©placement / h√©bergement", "Eau, √©lectricit√©, gaz",
        "Mutuelle", "Fournitures diverses", "Entretien Moto livraison et mat√©riel",
        "Nettoyage des locaux", "Budget publicit√© et communication", "Emplacements",
        "Expert comptable, avocats", "Markting"
    ]
    
    # R√©cup√©ration des montants pour chaque charge
    charges_detaillees = {}
    total_charges_fixes = [0.0, 0.0, 0.0]
    for charge in liste_charges:
        montant_annee1 = charges_fixes_annee1.get(charge, 0.0)
        montant_annee2 = charges_fixes_annee2.get(charge, 0.0)
        montant_annee3 = charges_fixes_annee3.get(charge, 0.0)
        charges_detaillees[charge] = [montant_annee1, montant_annee2, montant_annee3]
        total_charges_fixes[0] += montant_annee1
        total_charges_fixes[1] += montant_annee2
        total_charges_fixes[2] += montant_annee3
    
    # Valeur ajout√©e = Marge brute - Charges externes
    valeur_ajoutee = [
        marge_brute[0] - total_charges_fixes[0],
        marge_brute[1] - total_charges_fixes[1],
        marge_brute[2] - total_charges_fixes[2]
    ]
    
    # Imp√¥ts et taxes (ajouter d'autres imp√¥ts si n√©cessaire)
    impots_et_taxes = [
        charges_fixes_annee1.get("Taxes, CFE", 0.0),
        charges_fixes_annee2.get("Taxes, CFE", 0.0),
        charges_fixes_annee3.get("Taxes, CFE", 0.0)
    ]
    
    # Salaires employ√©s
    salaires_employes = [
        data["salaires"]["employes"].get("annee1", 0.0),
        data["salaires"]["employes"].get("annee2", 0.0),
        data["salaires"]["employes"].get("annee3", 0.0)
    ]
    
    # Charges sociales employ√©s
    charges_sociales_employes = [
        data["charges_sociales"]["employes"].get("annee1", 0.0),
        data["charges_sociales"]["employes"].get("annee2", 0.0),
        data["charges_sociales"]["employes"].get("annee3", 0.0)
    ]
    
    # Pr√©l√®vement dirigeant(s)
    salaires_dirigeants = [
        data["salaires"]["dirigeants"].get("annee1", 0.0),
        data["salaires"]["dirigeants"].get("annee2", 0.0),
        data["salaires"]["dirigeants"].get("annee3", 0.0)
    ]
    
    # Charges sociales dirigeant(s)
    charges_sociales_dirigeants = [
        data["charges_sociales"]["dirigeants"].get("annee1", 0.0),
        data["charges_sociales"]["dirigeants"].get("annee2", 0.0),
        data["charges_sociales"]["dirigeants"].get("annee3", 0.0)
    ]
    
    # Exc√©dent brut d'exploitation = Valeur ajout√©e - Imp√¥ts et taxes - Salaires - Charges sociales
    ebe = [
        valeur_ajoutee[0] - impots_et_taxes[0] - salaires_employes[0] - charges_sociales_employes[0] - salaires_dirigeants[0] - charges_sociales_dirigeants[0],
        valeur_ajoutee[1] - impots_et_taxes[1] - salaires_employes[1] - charges_sociales_employes[1] - salaires_dirigeants[1] - charges_sociales_dirigeants[1],
        valeur_ajoutee[2] - impots_et_taxes[2] - salaires_employes[2] - charges_sociales_employes[2] - salaires_dirigeants[2] - charges_sociales_dirigeants[2]
    ]
    
    # Frais bancaires, charges financi√®res
    frais_bancaires = [
        charges_fixes_annee1.get("Frais bancaires et terminal carte bleue", 0.0),
        charges_fixes_annee2.get("Frais bancaires et terminal carte bleue", 0.0),
        charges_fixes_annee3.get("Frais bancaires et terminal carte bleue", 0.0)
    ]
    
    # Int√©r√™ts des pr√™ts
    interets_prets = data.get("interets_prets", {
        "annee1": 0.0,
        "annee2": 0.0,
        "annee3": 0.0
    })
    
    # Ajouter les int√©r√™ts des pr√™ts aux autres frais financiers
    frais_financiers = [
        interets_prets.get("annee1", 0.0),
        interets_prets.get("annee2", 0.0),
        interets_prets.get("annee3", 0.0)
    ]
    
    # Total des frais bancaires et charges financi√®res
    total_frais_financiers = [
        frais_bancaires[0] + frais_financiers[0],
        frais_bancaires[1] + frais_financiers[1],
        frais_bancaires[2] + frais_financiers[2]
    ]
    
    # Dotations aux amortissements (suppos√©es nulles si non fournies)
    amortissements = [0.0, 0.0, 0.0]
    
    # R√©sultat avant imp√¥ts = EBE - Frais bancaires - Amortissements
    resultat_avant_impots = [
        ebe[0] - total_frais_financiers[0] - amortissements[0],
        ebe[1] - total_frais_financiers[1] - amortissements[1],
        ebe[2] - total_frais_financiers[2] - amortissements[2]
    ]
    
    # Imp√¥t sur les soci√©t√©s (selon la formule progressive)
    impot_societes = [
        calculer_impot_societes(resultat_avant_impots[0]),
        calculer_impot_societes(resultat_avant_impots[1]),
        calculer_impot_societes(resultat_avant_impots[2])
    ]
    
    # R√©sultat net comptable (r√©sultat de l'exercice)
    resultat_net = [
        resultat_avant_impots[0] - impot_societes[0],
        resultat_avant_impots[1] - impot_societes[1],
        resultat_avant_impots[2] - impot_societes[2]
    ]
    
    # Pr√©paration des donn√©es pour le tableau
    tableau = {
        "": [
            "Produits d'exploitation",
            "Chiffre d'affaires HT vente de marchandises",
            "Chiffre d'affaires HT services",
            "",
            "Charges d'exploitation(charge variable)",
            "Achats consomm√©s",
            "",
            "Marge brute",
            "Charges externes",
            ""
        ],
        "Ann√©e 1": [
            f"{total_ca[0]:,.2f} $",
            f"{ca_marchandises[0]:,.2f} $",
            f"{ca_services[0]:,.2f} $",
            "",
            f"{charges_exploitations[0]:,.2f} $",
            f"{charges_variables[0]:,.2f} $",
            "",
            f"{marge_brute[0]:,.2f} $",
            "",
            ""
        ],
        "Ann√©e 2": [
            f"{total_ca[1]:,.2f} $",
            f"{ca_marchandises[1]:,.2f} $",
            f"{ca_services[1]:,.2f} $",
            "",
            f"{charges_exploitations[1]:,.2f} $",
            f"{charges_variables[1]:,.2f} $",
            "",
            f"{marge_brute[1]:,.2f} $",
            "",
            ""
        ],
        "Ann√©e 3": [
            f"{total_ca[2]:,.2f} $",
            f"{ca_marchandises[2]:,.2f} $",
            f"{ca_services[2]:,.2f} $",
            "",
            f"{charges_exploitations[2]:,.2f} $",
            f"{charges_variables[2]:,.2f} $",
            "",
            f"{marge_brute[2]:,.2f} $",
            "",
            ""
        ]
    }
    
    # Ajouter les charges d√©taill√©es au tableau
    for charge in liste_charges:
        tableau[""].append(charge)
        tableau["Ann√©e 1"].append(f"{charges_detaillees[charge][0]:,.2f} $")
        tableau["Ann√©e 2"].append(f"{charges_detaillees[charge][1]:,.2f} $")
        tableau["Ann√©e 3"].append(f"{charges_detaillees[charge][2]:,.2f} $")
    
    # Ajouter le total des charges externes
    tableau[""].append("Total Charges externes")
    tableau["Ann√©e 1"].append(f"{total_charges_fixes[0]:,.2f} $")
    tableau["Ann√©e 2"].append(f"{total_charges_fixes[1]:,.2f} $")
    tableau["Ann√©e 3"].append(f"{total_charges_fixes[2]:,.2f} $")
    
    # Continuer √† remplir le tableau
    additional_rows = {
        "Valeur ajout√©e": valeur_ajoutee,
        "Imp√¥ts et taxes": impots_et_taxes,
        "Salaires employ√©s": salaires_employes,
        "Charges sociales employ√©s": charges_sociales_employes,
        "Pr√©l√®vement dirigeant(s)": salaires_dirigeants,
        "Charges sociales dirigeant(s)": charges_sociales_dirigeants,
        "Exc√©dent brut d'exploitation": ebe,
        "Frais bancaires, charges financi√®res": total_frais_financiers,
        "Dotations aux amortissements": amortissements,
        "R√©sultat avant imp√¥ts": resultat_avant_impots,
        "Imp√¥t sur les soci√©t√©s": impot_societes,
        "R√©sultat net comptable (r√©sultat de l'exercice)": resultat_net
    }
    
    for key, values in additional_rows.items():
        tableau[""].append(key)
        tableau["Ann√©e 1"].append(f"{values[0]:,.2f} $")
        tableau["Ann√©e 2"].append(f"{values[1]:,.2f} $")
        tableau["Ann√©e 3"].append(f"{values[2]:,.2f} $")
    
    # Cr√©er le DataFrame
    df_resultats = pd.DataFrame(tableau)
    
    # Afficher le tableau
    st.table(df_resultats)
    
    # Ajouter les variables calcul√©es au dictionnaire 'data'
    data["compte_de_resultat"] = {
        "total_ca": total_ca,
        "ca_marchandises": ca_marchandises,
        "ca_services": ca_services,
        "charges_exploitations":charges_exploitations,
        "charges_variables": charges_variables,
        "marge_brute": marge_brute,
        "charges_fixes": total_charges_fixes,
        "valeur_ajoutee": valeur_ajoutee,
        "impots_et_taxes": impots_et_taxes,
        "salaires_employes": salaires_employes,
        "charges_sociales_employes": charges_sociales_employes,
        "salaires_dirigeants": salaires_dirigeants,
        "charges_sociales_dirigeants": charges_sociales_dirigeants,
        "ebe": ebe,
        "frais_bancaires": frais_bancaires,
        "frais_financiers": frais_financiers,
        "total_frais_financiers": total_frais_financiers,
        "amortissements": amortissements,
        "resultat_avant_impots": resultat_avant_impots,
        "impot_societes": impot_societes,
        "resultat_net": resultat_net
    }
    
    # Enregistrer les donn√©es dans la session
    st.session_state["data"] = data
    
    # Pr√©parer les donn√©es d'exportation pour Compte de r√©sultats pr√©visionnel
    export_table_compte = []
    for index, row in df_resultats.iterrows():
        export_table_compte.append({
            "Description": row[""],
            "Ann√©e 1": row["Ann√©e 1"],
            "Ann√©e 2": row["Ann√©e 2"],
            "Ann√©e 3": row["Ann√©e 3"]
        })
    
    # Stocker les donn√©es d'exportation dans la session
    st.session_state['export_data_compte_resultats_previsionnel'] = {
        "table_data": export_table_compte
    }
    
    # Section Export
    st.header("Exporter les donn√©es")
    # Bouton pour t√©l√©charger le document complet
    st.button("T√©l√©charger le Document Word Complet", on_click=telecharger_document_complet)
    


import streamlit as st
import pandas as pd
from io import BytesIO
from docx import Document
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.enum.table import WD_TABLE_ALIGNMENT

def page_soldes_intermediaires_de_gestion():
    st.title("Soldes interm√©diaires de gestion")
    
    # R√©cup√©rer les donn√©es de la session
    data = st.session_state.get("data", {})
    
    # R√©cup√©rer les informations du projet
    info_generales = data.get("informations_generales", {})
    projet = info_generales.get("intitule_projet", "N/A")
    porteur_projet = info_generales.get("prenom_nom", "N/A")
    
    # Afficher les informations du projet
    st.write(f"**Projet :** {projet}")
    st.write(f"**Porteur de projet :** {porteur_projet}")
    
    st.write("---")
    
    # R√©cup√©rer les donn√©es n√©cessaires pour les calculs
    compte_resultat = data.get("compte_de_resultat", {})
    
    # Fonction pour assurer que les listes contiennent trois √©l√©ments et convertir en float
    def get_three_years_data(key):
        values = compte_resultat.get(key, [])
        processed_values = []
        for v in values:
            try:
                processed_values.append(float(v))
            except (ValueError, TypeError):
                processed_values.append(0.0)
        # Compl√©ter avec 0.0 si moins de 3 √©l√©ments
        while len(processed_values) < 3:
            processed_values.append(0.0)
        return processed_values[:3]
    
    # R√©cup√©ration des donn√©es avec validation
    total_ca = get_three_years_data("total_ca")
    ca_marchandises = get_three_years_data("ca_marchandises")
    ca_services = get_three_years_data("ca_services")
    achats_consommes = get_three_years_data("charges_variables")  # Actuellement d√©fini √† [0.0, 0.0, 0.0]
    charges_fixes = get_three_years_data("charges_fixes")
    impot_societes = get_three_years_data("impot_societes")
    impots_et_taxes = get_three_years_data("impots_et_taxes")
    salaires_employes = get_three_years_data("salaires_employes")
    charges_sociales_employes = get_three_years_data("charges_sociales_employes")
    salaires_dirigeants = get_three_years_data("salaires_dirigeants")
    charges_sociales_dirigeants = get_three_years_data("charges_sociales_dirigeants")
    amortissements = get_three_years_data("amortissements")
    total_frais_financiers = get_three_years_data("total_frais_financiers")
    
    # Calcul des diff√©rents soldes interm√©diaires
    ventes_production_reelle = [ca_marchandises[i] + ca_services[i] for i in range(3)]
    marge_globale = [ventes_production_reelle[i] - achats_consommes[i] for i in range(3)]
    valeur_ajoutee = [marge_globale[i] - charges_fixes[i] for i in range(3)]
    charges_personnel = [
        salaires_employes[i] + charges_sociales_employes[i] + salaires_dirigeants[i] + charges_sociales_dirigeants[i]
        for i in range(3)
    ]
    ebe = [valeur_ajoutee[i] - impots_et_taxes[i] - charges_personnel[i] for i in range(3)]
    resultat_exploitation = [ebe[i] - amortissements[i] for i in range(3)]
    resultat_financier = [-total_frais_financiers[i] for i in range(3)]
    resultat_courant = [resultat_exploitation[i] + resultat_financier[i] for i in range(3)]
    resultat_exercice = [resultat_courant[i] - impot_societes[i] for i in range(3)]
    capacite_autofinancement = [resultat_exercice[i] + amortissements[i] for i in range(3)]
    
    # Fonction de calcul des pourcentages avec gestion de la division par z√©ro
    def calculate_percentage(value, ca):
        return (value / ca * 100) if ca != 0 else 0.0
    
    # Pr√©paration des donn√©es pour le tableau
    soldes = [
        "Chiffre d'affaires",
        "Ventes + production r√©elle",
        "Achats consomm√©s",
        "Marge globale",
        "Charges externes",
        "Valeur ajout√©e",
        "Imp√¥ts et taxes",
        "Charges de personnel",
        "Exc√©dent brut d'exploitation (EBE)",
        "Dotations aux amortissements",
        "R√©sultat d'exploitation",
        "Charges financi√®res",
        "R√©sultat financier",
        "R√©sultat courant",
        "R√©sultat de l'exercice",
        "Capacit√© d'autofinancement"
    ]
    
    # Initialiser le data_table avec les soldes
    data_table = {"Soldes interm√©diaires de gestion": soldes}
    
    # Ajouter les donn√©es pour chaque ann√©e et leurs pourcentages
    for year in range(3):
        data_table[f"Ann√©e {year+1}"] = [
            total_ca[year],
            ventes_production_reelle[year],
            achats_consommes[year],
            marge_globale[year],
            charges_fixes[year],
            valeur_ajoutee[year],
            impots_et_taxes[year],
            charges_personnel[year],
            ebe[year],
            amortissements[year],
            resultat_exploitation[year],
            total_frais_financiers[year],
            resultat_financier[year],
            resultat_courant[year],
            resultat_exercice[year],
            capacite_autofinancement[year]
        ]
        
        data_table[f"% Ann√©e {year+1}"] = [
            100.0,  # Chiffre d'affaires
            100.0,  # Ventes + production r√©elle
            calculate_percentage(achats_consommes[year], total_ca[year]),
            calculate_percentage(marge_globale[year], total_ca[year]),
            calculate_percentage(charges_fixes[year], total_ca[year]),
            calculate_percentage(valeur_ajoutee[year], total_ca[year]),
            calculate_percentage(impots_et_taxes[year], total_ca[year]),
            calculate_percentage(charges_personnel[year], total_ca[year]),
            calculate_percentage(ebe[year], total_ca[year]),
            calculate_percentage(amortissements[year], total_ca[year]),
            calculate_percentage(resultat_exploitation[year], total_ca[year]),
            calculate_percentage(total_frais_financiers[year], total_ca[year]),
            calculate_percentage(resultat_financier[year], total_ca[year]),
            calculate_percentage(resultat_courant[year], total_ca[year]),
            calculate_percentage(resultat_exercice[year], total_ca[year]),
            calculate_percentage(capacite_autofinancement[year], total_ca[year])
        ]
    
    # Cr√©er le DataFrame avec les donn√©es
    df = pd.DataFrame(data_table)
    
    # D√©finir l'ordre des colonnes altern√©es entre "Ann√©e x" et "%"
    columns_order = ["Soldes interm√©diaires de gestion"]
    for year in range(3):
        columns_order.append(f"Ann√©e {year+1}")
        columns_order.append(f"% Ann√©e {year+1}")
    df = df[columns_order]
    
    # Afficher le tableau avec une mise en forme am√©lior√©e
    st.dataframe(
        df.style.format({
            "Ann√©e 1": "{:,.2f} $",
            "Ann√©e 2": "{:,.2f} $",
            "Ann√©e 3": "{:,.2f} $",
            "% Ann√©e 1": "{:.2f}%",
            "% Ann√©e 2": "{:.2f}%",
            "% Ann√©e 3": "{:.2f}%"
        }).set_properties(**{
            'text-align': 'right'
        }).set_table_styles([{
            'selector': 'th',
            'props': [('text-align', 'center')]
        }])
    )
    
    # Stocker les r√©sultats dans les donn√©es pour exportation
    data["soldes_intermediaires_de_gestion"] = {
        "ca": total_ca,
        "ventes_production_reelle": ventes_production_reelle,
        "achats_consommes": achats_consommes,
        "marge_globale": marge_globale,
        "charges_externes": charges_fixes,
        "valeur_ajoutee": valeur_ajoutee,
        "impots_et_taxes": impots_et_taxes,
        "charges_personnel": charges_personnel,
        "ebe": ebe,
        "dotations_aux_amortissements": amortissements,
        "resultat_exploitation": resultat_exploitation,
        "charges_financieres": total_frais_financiers,
        "resultat_financier": resultat_financier,
        "resultat_courant": resultat_courant,
        "resultat_exercice": resultat_exercice,
        "capacite_autofinancement": capacite_autofinancement
    }
    
    # Enregistrer les donn√©es mises √† jour dans la session
    st.session_state["data"] = data
    
    # Pr√©parer les donn√©es d'exportation pour Soldes Interm√©diaires de Gestion avec % colonnes
    export_table_soldes = []
    for idx, solde in enumerate(soldes):
        export_table_soldes.append({
            "Description": solde,
            "Ann√©e 1": data_table["Ann√©e 1"][idx],
            "% Ann√©e 1": data_table["% Ann√©e 1"][idx],
            "Ann√©e 2": data_table["Ann√©e 2"][idx],
            "% Ann√©e 2": data_table["% Ann√©e 2"][idx],
            "Ann√©e 3": data_table["Ann√©e 3"][idx],
            "% Ann√©e 3": data_table["% Ann√©e 3"][idx]
        })
    
    # Stocker les donn√©es d'exportation dans la session
    st.session_state['export_data_soldes_intermediaires_de_gestion'] = {
        "projet": projet,
        "porteur_projet": porteur_projet,
        "table_data": export_table_soldes
    }
    
    # Section Export
    st.header("Exporter les donn√©es")
    
    # Bouton pour t√©l√©charger le Markdown
    if st.button("T√©l√©charger Soldes Interm√©diaires en Markdown"):
        export_data = st.session_state.get('export_data_soldes_intermediaires_de_gestion', {})
        if not export_data or "table_data" not in export_data:
            st.error("Aucune donn√©e disponible pour l'exportation.")
        else:
            # Construire le contenu Markdown
            markdown_content = f"# Soldes interm√©diaires de gestion\n\n**Projet :** {export_data['projet']}\n\n**Porteur de projet :** {export_data['porteur_projet']}\n\n"
            markdown_content += "---\n\n"
            
            # Cr√©er un DataFrame pour Markdown
            df_markdown = pd.DataFrame(export_data['table_data'])
            markdown_content += df_markdown.to_markdown(index=False)
            
            markdown_content += "\n\n---\n\n"
            
            markdown_bytes = markdown_content.encode('utf-8')
            st.download_button(
                label="T√©l√©charger le Markdown",
                data=markdown_bytes,
                file_name="soldes_intermediaires_gestion.md",
                mime="text/markdown"
            )
    
    # Bouton pour t√©l√©charger le fichier Word
    if st.button("T√©l√©charger Soldes Interm√©diaires en Word"):
        export_data_soldes = st.session_state.get('export_data_soldes_intermediaires_de_gestion', {})
        export_data_compte = st.session_state.get('export_data_compte_resultats_previsionnel', {})
        export_data_amortissements = st.session_state.get('export_data_detail_amortissements', {})
        export_data_investissements = st.session_state.get('export_data_investissements', {})
        export_data_salaires = st.session_state.get('export_data_salaires_charges_sociales', {})
        
        if not export_data_soldes or "table_data" not in export_data_soldes:
            st.error("Aucune donn√©e disponible pour l'exportation des Soldes interm√©diaires de gestion.")
            return
        
        # V√©rifiez que toutes les autres sections sont √©galement export√©es
        if not all([
            export_data_investissements.get("table_data"),
            export_data_salaires.get("table_data"),
            export_data_amortissements.get("amortissements"),
            export_data_compte.get("table_data")
        ]):
            st.error("Toutes les sections doivent √™tre remplies avant de t√©l√©charger le document complet.")
            return
        
        # Cr√©er un document Word
        doc = Document()
        
        ### 1. Ajouter la section Investissements et Financements ###
        doc.add_heading('Investissements et Financements', level=1)
        doc.add_paragraph(f"**Projet :** {export_data_investissements.get('projet', 'N/A')}")
        doc.add_paragraph(f"**Porteur de projet :** {export_data_investissements.get('porteur_projet', 'N/A')}")
        doc.add_paragraph(f"**Equilibre :** {export_data_investissements.get('equilibre', {}).get('message', '')}")
        doc.add_page_break()
        
        # Cr√©er le tableau Investissements et Financements
        table_inv = doc.add_table(rows=1, cols=4)
        table_inv.style = 'Light List Accent 1'
        table_inv.alignment = WD_TABLE_ALIGNMENT.CENTER
        hdr_cells_inv = table_inv.rows[0].cells
        headers_inv = ["Investissements", "Taux (%)", "Dur√©e (mois)", "Montant ($)"]
        for i, header in enumerate(headers_inv):
            hdr_cells_inv[i].text = header
            for paragraph in hdr_cells_inv[i].paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True
            hdr_cells_inv[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        for row in export_data_investissements['table_data']:
            row_cells = table_inv.add_row().cells
            row_cells[0].text = row.get("Investissements", "")
            row_cells[1].text = row.get("Taux (%)", "")
            row_cells[2].text = str(row.get("Dur√©e (mois)", "")) if row.get("Dur√©e (mois)", "") != "-" else "-"
            row_cells[3].text = row.get("Montant ($)", "")
            
            # Mise en forme des lignes sp√©cifiques
            if row["Investissements"] in ["INVESTISSEMENTS", "FINANCEMENT DES INVESTISSEMENTS", "TOTAL SUBVENTIONS", "TOTAL EMPRUNTS"]:
                for cell in row_cells:
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            run.font.bold = True
            elif "TOTAL" in row["Investissements"]:
                for cell in row_cells:
                    for paragraph in cell.paragraphs:
                        for run in paragraph.runs:
                            run.font.bold = True
            
            # Alignement des cellules
            row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        
        ### 2. Ajouter la section Salaires et Charges Sociales ###
        doc.add_heading('Salaires et Charges Sociales', level=1)
        doc.add_paragraph(f"**Projet :** {export_data_salaires.get('projet', 'N/A')}")
        doc.add_paragraph(f"**Porteur de projet :** {export_data_salaires.get('porteur_projet', 'N/A')}")
        doc.add_paragraph(f"**Statut juridique :** {export_data_salaires.get('statut_juridique', 'N/A')}")
        doc.add_paragraph(f"**B√©n√©fice de l'ACRE :** {export_data_salaires.get('benefice_accre', 'N/A')}")
        doc.add_paragraph(f"**Statut social du (des) dirigeant(s) :** {export_data_salaires.get('statut_social_dirigeant', 'N/A')}")
        doc.add_paragraph("---")
        
        # Cr√©er le tableau Salaires et Charges Sociales
        table_sal = doc.add_table(rows=1, cols=4)
        table_sal.style = 'Light List Accent 1'
        table_sal.alignment = WD_TABLE_ALIGNMENT.CENTER
        hdr_cells_sal = table_sal.rows[0].cells
        headers_sal = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
        for i, header in enumerate(headers_sal):
            hdr_cells_sal[i].text = header
            for paragraph in hdr_cells_sal[i].paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True
            hdr_cells_sal[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        for row in export_data_salaires['table_data']:
            row_cells = table_sal.add_row().cells
            row_cells[0].text = row.get("Description", "")
            row_cells[1].text = row.get("Ann√©e 1", "")
            row_cells[2].text = row.get("Ann√©e 2", "")
            row_cells[3].text = row.get("Ann√©e 3", "")
            
            # Alignement des cellules
            row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
            row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
            row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        
        ### 3. Ajouter la section D√©tail des Amortissements ###
        doc.add_heading('D√©tail des Amortissements', level=1)
        
        # Cr√©er le tableau D√©tail des Amortissements
        table_amort = doc.add_table(rows=1, cols=4)
        table_amort.style = 'Light List Accent 1'
        table_amort.alignment = WD_TABLE_ALIGNMENT.CENTER
        hdr_cells_amort = table_amort.rows[0].cells
        headers_amort = ["Amortissement", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
        for i, header in enumerate(headers_amort):
            hdr_cells_amort[i].text = header
            for paragraph in hdr_cells_amort[i].paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True
            hdr_cells_amort[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        for row in export_data_amortissements['amortissements']:
            row_cells = table_amort.add_row().cells
            row_cells[0].text = row.get("Amortissement", "")
            row_cells[1].text = row.get("Ann√©e 1", "")
            row_cells[2].text = row.get("Ann√©e 2", "")
            row_cells[3].text = row.get("Ann√©e 3", "")
        
        # Ajouter une note
        doc.add_paragraph()
        doc.add_paragraph("Les amortissements sont calcul√©s en fonction de la dur√©e d'amortissement sp√©cifi√©e.")
        
        ### 4. Ajouter la section Compte de R√©sultats Pr√©visionnel ###
        doc.add_heading('Compte de R√©sultats Pr√©visionnel', level=1)
        
        # Cr√©er le tableau Compte de R√©sultats Pr√©visionnel
        table_compte = doc.add_table(rows=1, cols=4)
        table_compte.style = 'Light List Accent 1'
        table_compte.alignment = WD_TABLE_ALIGNMENT.CENTER
        hdr_cells_compte = table_compte.rows[0].cells
        headers_compte = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
        for i, header in enumerate(headers_compte):
            hdr_cells_compte[i].text = header
            for paragraph in hdr_cells_compte[i].paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True
            hdr_cells_compte[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        for row in export_data_compte['table_data']:
            row_cells = table_compte.add_row().cells
            row_cells[0].text = row.get("Description", "")
            row_cells[1].text = row.get("Ann√©e 1", "")
            row_cells[2].text = row.get("Ann√©e 2", "")
            row_cells[3].text = row.get("Ann√©e 3", "")
        
        # Ajouter une note
        doc.add_paragraph()
        doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
        
        ### 5. Ajouter la section Soldes Interm√©diaires de Gestion ###
        doc.add_heading('Soldes interm√©diaires de gestion', level=1)
        
        # Cr√©er le tableau Soldes interm√©diaires de gestion avec 7 colonnes
        table_soldes = doc.add_table(rows=1, cols=7)
        table_soldes.style = 'Light List Accent 1'
        table_soldes.alignment = WD_TABLE_ALIGNMENT.CENTER
        hdr_cells_soldes = table_soldes.rows[0].cells
        headers_soldes = ["Description", "Ann√©e 1", "% Ann√©e 1", "Ann√©e 2", "% Ann√©e 2", "Ann√©e 3", "% Ann√©e 3"]
        for i, header in enumerate(headers_soldes):
            hdr_cells_soldes[i].text = header
            for paragraph in hdr_cells_soldes[i].paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True
            hdr_cells_soldes[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        for row in export_data_soldes['table_data']:
            row_cells = table_soldes.add_row().cells
            row_cells[0].text = row.get("Description", "")
            row_cells[1].text = f"{row.get('Ann√©e 1', 0.0):,.2f} $"
            row_cells[2].text = f"{row.get('% Ann√©e 1', 0.0):.2f}%"
            row_cells[3].text = f"{row.get('Ann√©e 2', 0.0):,.2f} $"
            row_cells[4].text = f"{row.get('% Ann√©e 2', 0.0):.2f}%"
            row_cells[5].text = f"{row.get('Ann√©e 3', 0.0):,.2f} $"
            row_cells[6].text = f"{row.get('% Ann√©e 3', 0.0):.2f}%"
            
            # Alignement des cellules de pourcentage
            row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            row_cells[4].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            row_cells[6].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        # Ajouter une note
        doc.add_paragraph()
        doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
        
        # Enregistrer le document dans un buffer
        buffer = BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        
        # Bouton de t√©l√©chargement
        st.download_button(
            label="T√©l√©charger le Document Word Complet",
            data=buffer,
            file_name="document_complet_financier.docx",
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
        
        # Message de confirmation
        st.success("Le document Word complet a √©t√© g√©n√©r√© avec succ√®s !")



    # Enregistrer les donn√©es mises √† jour dans la session
    st.session_state["data"] = data
    
    
    
    
    

def telecharger_document_complets():
    # R√©cup√©rer les donn√©es export√©es de toutes les sections
    export_data_investissements = st.session_state.get('export_data_investissements', {})
    export_data_salaires = st.session_state.get('export_data_salaires_charges_sociales', {})
    export_data_amortissements = st.session_state.get('export_data_detail_amortissements', {})
    export_data_compte = st.session_state.get('export_data_compte_resultats_previsionnel', {})
    export_data_soldes = st.session_state.get('export_data_soldes_intermediaires_de_gestion', {})
    export_data_capacite = st.session_state.get('export_data_capacite_autofinancement', {})
    export_data_seuil = st.session_state.get('export_data_seuil_rentabilite_economique', {})
    
    # V√©rifiez que toutes les donn√©es sont pr√©sentes
    if not all([
        export_data_investissements.get("table_data"),
        export_data_salaires.get("table_data"),
        export_data_amortissements.get("amortissements"),
        export_data_compte.get("table_data"),
        export_data_soldes.get("table_data"),
        export_data_capacite.get("table_data"),
        export_data_seuil.get("table_data")
    ]):
        st.error("Toutes les sections doivent √™tre remplies avant de t√©l√©charger le document complet.")
        return
    
    # Cr√©er un document Word
    doc = Document()
    
    ### 1. Ajouter la section Investissements et Financements ###
    doc.add_heading('Investissements et Financements', level=1)
    doc.add_paragraph(f"**Projet :** {export_data_investissements.get('projet', 'N/A')}")
    doc.add_paragraph(f"**Porteur de projet :** {export_data_investissements.get('porteur_projet', 'N/A')}")
    doc.add_page_break()
    
    # Cr√©er le tableau Investissements et Financements dans Word
    table_inv = doc.add_table(rows=1, cols=4)
    table_inv.style = 'Light List Accent 1'
    table_inv.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_inv = table_inv.rows[0].cells
    headers_inv = ["Investissements", "Taux (%)", "Dur√©e (mois)", "Montant ($)"]
    for i, header in enumerate(headers_inv):
        hdr_cells_inv[i].text = header
        for paragraph in hdr_cells_inv[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_inv[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_investissements['table_data']:
        row_cells = table_inv.add_row().cells
        row_cells[0].text = row.get("Investissements", "")
        row_cells[1].text = row.get("Taux (%)", "")
        row_cells[2].text = str(row.get("Dur√©e (mois)", "")) if row.get("Dur√©e (mois)", "") != "-" else "-"
        row_cells[3].text = row.get("Montant ($)", "")
        
        # Mise en forme des lignes sp√©cifiques
        if row["Investissements"] in ["INVESTISSEMENTS", "FINANCEMENT DES INVESTISSEMENTS", "TOTAL SUBVENTIONS", "TOTAL EMPRUNTS"]:
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.bold = True
        elif "TOTAL" in row["Investissements"]:
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.bold = True
        
        # Alignement des cellules
        row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    
    ### 2. Ajouter la section Salaires et Charges Sociales ###
    doc.add_heading('Salaires et Charges Sociales', level=1)
    doc.add_paragraph(f"**Projet :** {export_data_salaires.get('projet', 'N/A')}")
    doc.add_paragraph(f"**Porteur de projet :** {export_data_salaires.get('porteur_projet', 'N/A')}")
    doc.add_paragraph("---")
    
    # Cr√©er le tableau Salaires et Charges Sociales dans Word
    table_sal = doc.add_table(rows=1, cols=4)
    table_sal.style = 'Light List Accent 1'
    table_sal.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_sal = table_sal.rows[0].cells
    headers_sal = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_sal):
        hdr_cells_sal[i].text = header
        for paragraph in hdr_cells_sal[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_sal[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_salaires['table_data']:
        row_cells = table_sal.add_row().cells
        row_cells[0].text = row.get("Description", "")
        row_cells[1].text = row.get("Ann√©e 1", "")
        row_cells[2].text = row.get("Ann√©e 2", "")
        row_cells[3].text = row.get("Ann√©e 3", "")
        
        # Alignement des cellules
        row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    
    ### 3. Ajouter la section D√©tail des Amortissements ###
    doc.add_heading('D√©tail des Amortissements', level=1)
    
    # Cr√©er le tableau D√©tail des Amortissements dans Word
    table_amort = doc.add_table(rows=1, cols=4)
    table_amort.style = 'Light List Accent 1'
    table_amort.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_amort = table_amort.rows[0].cells
    headers_amort = ["Amortissement", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_amort):
        hdr_cells_amort[i].text = header
        for paragraph in hdr_cells_amort[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_amort[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Ajouter les donn√©es Amortissements au tableau
    for row in export_data_amortissements['amortissements']:
        row_cells_amort = table_amort.add_row().cells
        row_cells_amort[0].text = row.get("Amortissement", "")
        row_cells_amort[1].text = row.get("Ann√©e 1", "")
        row_cells_amort[2].text = row.get("Ann√©e 2", "")
        row_cells_amort[3].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les amortissements sont calcul√©s en fonction de la dur√©e d'amortissement sp√©cifi√©e.")
    
    ### 4. Ajouter la section Compte de R√©sultats Pr√©visionnel ###
    doc.add_heading('Compte de R√©sultats Pr√©visionnel', level=1)
    
    # Cr√©er le tableau Compte de R√©sultats Pr√©visionnel dans Word
    table_compte = doc.add_table(rows=1, cols=4)
    table_compte.style = 'Light List Accent 1'
    table_compte.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_compte = table_compte.rows[0].cells
    headers_compte = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_compte):
        hdr_cells_compte[i].text = header
        for paragraph in hdr_cells_compte[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_compte[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_compte['table_data']:
        row_cells_compte = table_compte.add_row().cells
        row_cells_compte[0].text = row.get("Description", "")
        row_cells_compte[1].text = row.get("Ann√©e 1", "")
        row_cells_compte[2].text = row.get("Ann√©e 2", "")
        row_cells_compte[3].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 5. Ajouter la section Soldes Interm√©diaires de Gestion ###
    doc.add_heading('Soldes interm√©diaires de gestion', level=1)
    
    # Cr√©er le tableau Soldes interm√©diaires de gestion dans Word
    table_soldes = doc.add_table(rows=1, cols=4)
    table_soldes.style = 'Light List Accent 1'
    table_soldes.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_soldes = table_soldes.rows[0].cells
    headers_soldes = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_soldes):
        hdr_cells_soldes[i].text = header
        for paragraph in hdr_cells_soldes[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_soldes[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_soldes['table_data']:
        row_cells_soldes = table_soldes.add_row().cells
        row_cells_soldes[0].text = row.get("Description", "")
        row_cells_soldes[1].text = f"{row.get('Ann√©e 1', 0):,.2f} $"
        row_cells_soldes[2].text = f"{row.get('Ann√©e 2', 0):,.2f} $"
        row_cells_soldes[3].text = f"{row.get('Ann√©e 3', 0):,.2f} $"
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 6. Ajouter la section Capacit√© d'Autofinancement ###
    doc.add_heading('Capacit√© d\'autofinancement', level=1)
    
    # Cr√©er le tableau Capacit√© d'Autofinancement dans Word
    table_cap = doc.add_table(rows=1, cols=4)
    table_cap.style = 'Light List Accent 1'
    table_cap.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_cap = table_cap.rows[0].cells
    headers_cap = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_cap):
        hdr_cells_cap[i].text = header
        for paragraph in hdr_cells_cap[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_cap[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_capacite['table_data']:
        row_cells_cap = table_cap.add_row().cells
        row_cells_cap[0].text = row.get("Description", "")
        row_cells_cap[1].text = f"{row.get('Ann√©e 1', 0):,.2f} $"
        row_cells_cap[2].text = f"{row.get('Ann√©e 2', 0):,.2f} $"
        row_cells_cap[3].text = f"{row.get('Ann√©e 3', 0):,.2f} $"
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 7. Ajouter la section Seuil de Rentabilit√© √âconomique ###
    doc.add_heading('Seuil de rentabilit√© √©conomique', level=1)
    
    # Cr√©er le tableau Seuil de Rentabilit√© √âconomique dans Word
    table_seuil = doc.add_table(rows=1, cols=4)
    table_seuil.style = 'Light List Accent 1'
    table_seuil.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_seuil = table_seuil.rows[0].cells
    headers_seuil = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_seuil):
        hdr_cells_seuil[i].text = header
        for paragraph in hdr_cells_seuil[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_seuil[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_seuil['table_data']:
        row_cells_seuil = table_seuil.add_row().cells
        row_cells_seuil[0].text = row.get("Description", "")
        row_cells_seuil[1].text = f"{row.get('Ann√©e 1', 0):,.0f} $"
        row_cells_seuil[2].text = f"{row.get('Ann√©e 2', 0):,.0f} $"
        row_cells_seuil[3].text = f"{row.get('Ann√©e 3', 0):,.0f} $"
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    # Enregistrer le document dans un buffer
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    # Bouton de t√©l√©chargement
    st.download_button(
        label="T√©l√©charger le Document Word Complet",
        data=buffer,
        file_name="document_complet_financier.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )
    
    # Message de confirmation
    st.success("Le document Word complet a √©t√© g√©n√©r√© avec succ√®s !")


def calculate_remboursements_emprunts(financements, years=3):
    """
    Votre fonction de calcul existante...
    """
    remboursements = [0.0 for _ in range(years)]  # Initialiser les remboursements pour chaque ann√©e

    for loan_name, loan_info in financements.items():
        # V√©rifier que loan_info est un dictionnaire et commence par "Pr√™t "
        if isinstance(loan_info, dict) and loan_name.startswith("Pr√™t "):
            required_keys = {"montant", "duree", "taux"}
            if not required_keys.issubset(loan_info.keys()):
                st.warning(f"Le pr√™t '{loan_name}' est incomplet et sera ignor√©.")
                continue  # Ignorer les financements incomplets

            montant = loan_info.get("montant", 0.0)
            duree_mois = loan_info.get("duree", 60)  # Par d√©faut 60 mois
            taux_annuel = loan_info.get("taux", 5.0)  # Par d√©faut 5%
            principal_mensuel =  montant / duree_mois if duree_mois > 0 else 0.0

            # Calcul des remboursements par ann√©e bas√©s sur principal_mensuel
            # Principal Year 1
            if duree_mois > 12:
                principal_year1 = principal_mensuel * 12
            else:
                principal_year1 = principal_mensuel * duree_mois

            # Principal Year 2
            if duree_mois - 12 < 0:
                principal_year2 = 0.0
            elif duree_mois > 24:
                principal_year2 = principal_mensuel * 12
            else:
                principal_year2 = principal_mensuel * (duree_mois - 12)

            # Principal Year 3
            if duree_mois - 24 < 0:
                principal_year3 = 0.0
            elif duree_mois > 36:
                principal_year3 = principal_mensuel * 12
            else:
                principal_year3 = principal_mensuel * (duree_mois - 24)

            # Ajouter les remboursements principaux au total par ann√©e
            remboursements[0] += round(principal_year1, 2)
            if years >= 2:
                remboursements[1] += round(principal_year2, 2)
            if years >= 3:
                remboursements[2] += round(principal_year3, 2)
        else:
            # Ignorer les financements qui ne sont pas des pr√™ts (e.g., Apports, Subventions)
            continue

    return remboursements

def page_capacite_autofinancement():
    """
    Affiche le tableau de Capacit√© d'Autofinancement en utilisant les donn√©es de la session.
    """
    st.title("Capacit√© d'autofinancement")
    
    # V√©rifier si les donn√©es sont pr√©sentes dans la session
    if "data" not in st.session_state:
        st.error("Les donn√©es ne sont pas initialis√©es. Veuillez initialiser la session.")
        return
    
    # R√©cup√©rer les donn√©es de la session
    data = st.session_state["data"]
    
    # R√©cup√©rer les informations du projet
    info_generales = data.get("informations_generales", {})
    projet = info_generales.get("intitule_projet", "N/A")
    porteur_projet = info_generales.get("prenom_nom", "N/A")
    
    # Afficher les informations du projet
    st.write(f"**Projet :** {projet}")
    st.write(f"**Porteur de projet :** {porteur_projet}")
    
    st.write("---")
    
    # R√©cup√©rer les soldes interm√©diaires de gestion
    soldes_intermediaires = data.get("soldes_intermediaires_de_gestion", {})
    
    # Fonction pour convertir les valeurs en float, remplacer les erreurs par 0.0
    def safe_float_conversion(values):
        return [float(x) if isinstance(x, (int, float)) else 0.0 for x in values]
    
    # R√©cup√©rer et convertir les donn√©es n√©cessaires
    resultat_exercice = safe_float_conversion(soldes_intermediaires.get("resultat_exercice", [0.0, 0.0, 0.0]))
    dotations_aux_amortissements = safe_float_conversion(soldes_intermediaires.get("dotations_aux_amortissements", [0.0, 0.0, 0.0]))
    capacite_autofinancement = safe_float_conversion(soldes_intermediaires.get("capacite_autofinancement", [0.0, 0.0, 0.0]))
    
    # R√©cup√©rer les financements
    financements = data.get("financements", {})
    
    # Filtrer uniquement les pr√™ts (dictionnaires) nomm√©s avec "Pr√™t " pour √©viter les subventions
    pret_financements = {
        k: v for k, v in financements.items()
        if isinstance(v, dict) and k.startswith("Pr√™t ")
    }
    
    # Calculer les remboursements des emprunts
    remboursements_emprunts = calculate_remboursements_emprunts(pret_financements, years=3)
    
    # Autofinancement net = Capacit√© d'autofinancement - Remboursements des emprunts
    autofinancement_net = [
        capacite_autofinancement[i] - remboursements_emprunts[i]
        for i in range(3)
    ]
    
    # Pr√©parer les valeurs mon√©taires
    values = {
        "Ann√©e 1": [
            resultat_exercice[0],
            dotations_aux_amortissements[0],
            capacite_autofinancement[0],
            remboursements_emprunts[0],
            autofinancement_net[0]
        ],
        "Ann√©e 2": [
            resultat_exercice[1],
            dotations_aux_amortissements[1],
            capacite_autofinancement[1],
            remboursements_emprunts[1],
            autofinancement_net[1]
        ],
        "Ann√©e 3": [
            resultat_exercice[2],
            dotations_aux_amortissements[2],
            capacite_autofinancement[2],
            remboursements_emprunts[2],
            autofinancement_net[2]
        ]
    }
    
    # Pr√©parer le tableau final avec les labels
    capacite_fonc = [
        "R√©sultat de l'exercice",
        "+ Dotation aux amortissements",
        "Capacit√© d'autofinancement",
        "- Remboursements des emprunts",
        "Autofinancement net"
    ]
    
    data_table = {
        "Capacit√© d'autofinancement": capacite_fonc,
        "Ann√©e 1": values["Ann√©e 1"],
        "Ann√©e 2": values["Ann√©e 2"],
        "Ann√©e 3": values["Ann√©e 3"]
    }
    
    # Cr√©er le DataFrame avec les donn√©es
    df = pd.DataFrame(data_table)
    
    # D√©finir l'ordre des colonnes
    columns_order = ["Capacit√© d'autofinancement",
                     "Ann√©e 1",
                     "Ann√©e 2",
                     "Ann√©e 3"]
    df = df[columns_order]
    
    # D√©finir la fonction de formatage
    def format_value(x):
        if x == 0.0:
            return "-"
        else:
            return f"{x:,.2f} $"
    
    # Afficher le tableau avec une mise en forme am√©lior√©e
    st.dataframe(
        df.style.format({
            "Ann√©e 1": format_value,
            "Ann√©e 2": format_value,
            "Ann√©e 3": format_value,
        }).set_properties(**{
            'text-align': 'right'
        }).set_table_styles([{
            'selector': 'th',
            'props': [('text-align', 'center')]
        }])
    )
    
    # Stocker les r√©sultats dans les donn√©es
    data["capacite_autofinancement"] = {
        "resultat_exercice": resultat_exercice,
        "dotations_aux_amortissements": dotations_aux_amortissements,
        "capacite_autofinancement": capacite_autofinancement,
        "remboursements_emprunts": remboursements_emprunts,
        "autofinancement_net": autofinancement_net
    }
    
    # Enregistrer les donn√©es mises √† jour dans la session
    st.session_state["data"] = data
    
    # Pr√©parer les donn√©es d'exportation pour Capacit√© d'Autofinancement
    export_table_capacite = []
    for idx, label in enumerate(capacite_fonc):
        export_table_capacite.append({
            "Description": label,
            "Ann√©e 1": values["Ann√©e 1"][idx],
            "Ann√©e 2": values["Ann√©e 2"][idx],
            "Ann√©e 3": values["Ann√©e 3"][idx]
        })
    
    # Stocker les donn√©es d'exportation dans la session
    st.session_state['export_data_capacite_autofinancement'] = {
        "projet": projet,
        "porteur_projet": porteur_projet,
        "table_data": export_table_capacite
    }
    
    # Section Export
    st.header("Exporter les donn√©es")
    
    if st.button("T√©l√©charger le Document Word Complet", key="download_word_complet_investissements_et_financements"):
        telecharger_document_complet()

    
import streamlit as st
import pandas as pd
from io import BytesIO
from docx import Document
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.enum.table import WD_TABLE_ALIGNMENT

def page_seuil_rentabilite_economique():
    st.title("Seuil de rentabilit√© √©conomique")
    
    # V√©rifier si les donn√©es sont pr√©sentes dans la session
    if "data" not in st.session_state:
        st.error("Les donn√©es ne sont pas initialis√©es. Veuillez initialiser la session.")
        return
    
    data = st.session_state["data"]

    # R√©cup√©rer les informations du projet
    info_generales = data.get("informations_generales", {})
    projet = info_generales.get("intitule_projet", "N/A")
    porteur_projet = info_generales.get("prenom_nom", "N/A")
    
    # Afficher les informations du projet
    st.write(f"**Projet :** {projet}")
    st.write(f"**Porteur de projet :** {porteur_projet}")
    
    st.write("---")
    
    # R√©cup√©rer les donn√©es n√©cessaires avec les cl√©s exactes
    compte_resultat = data.get("compte_de_resultat", {})
    soldes_intermediaires = data.get("soldes_intermediaires_de_gestion", {})
    
    # R√©cup√©rer 'ventes_production_reelle' et 'achats_consommes' du 'soldes_intermediaires'
    ventes_production_reelle = soldes_intermediaires.get("ventes_production_reelle", [0.0, 0.0, 0.0])
    achats_consommes = soldes_intermediaires.get("achats_consommes", [0.0, 0.0, 0.0])
    
    # R√©cup√©rer les charges n√©cessaires du 'soldes_intermediaires'
    charges_externes = soldes_intermediaires.get("charges_externes", [0.0, 0.0, 0.0])
    impots_et_taxes = soldes_intermediaires.get("impots_et_taxes", [0.0, 0.0, 0.0])
    charges_personnel = soldes_intermediaires.get("charges_personnel", [0.0, 0.0, 0.0])
    dotations_aux_amortissements = soldes_intermediaires.get("dotations_aux_amortissements", [0.0, 0.0, 0.0])
    charges_financieres = soldes_intermediaires.get("charges_financieres", [0.0, 0.0, 0.0])
    
    # R√©cup√©rer 'resultat_avant_impots' du 'compte_resultat'
    resultat_avant_impots = compte_resultat.get("resultat_avant_impots", [0.0, 0.0, 0.0])
    
    # V√©rifier si les listes ont 3 √©l√©ments
    if not (len(ventes_production_reelle) == len(achats_consommes) == len(charges_externes) == len(impots_et_taxes) == len(charges_personnel) == len(dotations_aux_amortissements) == len(charges_financieres) == len(resultat_avant_impots) == 3):
        st.error("Les listes de donn√©es ne contiennent pas exactement 3 √©l√©ments. Veuillez v√©rifier les donn√©es.")
        return
    
    # Calcul des Co√ªts fixes pour chaque ann√©e
    couts_fixes = []
    for i in range(3):
        cout_fix = (
            charges_externes[i] +
            impots_et_taxes[i] +
            charges_personnel[i] +
            dotations_aux_amortissements[i] +
            charges_financieres[i]
        )
        couts_fixes.append(cout_fix)
   
    # Total des co√ªts variables = Achats consomm√©s
    total_couts_variables = achats_consommes.copy()
    
    # Marge sur co√ªts variables
    marge_sur_couts_variables = []
    for i in range(3):
        marge = ventes_production_reelle[i] - total_couts_variables[i]
        marge_sur_couts_variables.append(marge)
    
    # Taux de marge sur co√ªts variables
    taux_marge_sur_couts_variables = []
    for i in range(3):
        if ventes_production_reelle[i] != 0:
            taux_marge = marge_sur_couts_variables[i] / ventes_production_reelle[i]
        else:
            taux_marge = 0.0
        taux_marge_sur_couts_variables.append(taux_marge)
    
    # Total des charges
    total_charges = []
    for i in range(3):
        total_charge = couts_fixes[i] + total_couts_variables[i]
        total_charges.append(total_charge)
   
    # Seuil de rentabilit√© (CA)
    seuil_rentabilite_ca = []
    for i in range(3):
        if taux_marge_sur_couts_variables[i] != 0:
            seuil_ca = couts_fixes[i] / taux_marge_sur_couts_variables[i]
        else:
            seuil_ca = 0.0
        seuil_rentabilite_ca.append(seuil_ca)
    
    # Exc√©dent / insuffisance
    excedent_insuffisance = []
    for i in range(3):
        excedent = ventes_production_reelle[i] - seuil_rentabilite_ca[i]
        excedent_insuffisance.append(excedent)
    
    # Point mort
    point_mort_ca_par_jour_ouvre = []
    for i in range(3):
        point_mort = seuil_rentabilite_ca[i] / 250
        point_mort_ca_par_jour_ouvre.append(point_mort)
    
    # Pr√©paration des donn√©es pour le tableau
    data_table = {
        "Seuil de rentabilite_economique": [
            "Ventes + Production r√©elle",
            "Achats consomm√©s",
            "Total des co√ªts variables",
            "Marge sur co√ªts variables",
            "Taux de marge sur co√ªts variables",
            "Co√ªts fixes",
            "Total des charges",
            "R√©sultat courant avant imp√¥ts",
            "Seuil de rentabilite (chiffre d'affaires)",
            "Exc√©dent / insuffisance",
            "Point mort en chiffre d'affaires par jour ouvr√©"
        ],
        "Ann√©e 1": [
            ventes_production_reelle[0],
            achats_consommes[0],
            total_couts_variables[0],
            marge_sur_couts_variables[0],
            taux_marge_sur_couts_variables[0],
            couts_fixes[0],
            total_charges[0],
            resultat_avant_impots[0],
            seuil_rentabilite_ca[0],
            excedent_insuffisance[0],
            point_mort_ca_par_jour_ouvre[0]
        ],
        "Ann√©e 2": [
            ventes_production_reelle[1],
            achats_consommes[1],
            total_couts_variables[1],
            marge_sur_couts_variables[1],
            taux_marge_sur_couts_variables[1],
            couts_fixes[1],
            total_charges[1],
            resultat_avant_impots[1],
            seuil_rentabilite_ca[1],
            excedent_insuffisance[1],
            point_mort_ca_par_jour_ouvre[1]
        ],
        "Ann√©e 3": [
            ventes_production_reelle[2],
            achats_consommes[2],
            total_couts_variables[2],
            marge_sur_couts_variables[2],
            taux_marge_sur_couts_variables[2],
            couts_fixes[2],
            total_charges[2],
            resultat_avant_impots[2],
            seuil_rentabilite_ca[2],
            excedent_insuffisance[2],
            point_mort_ca_par_jour_ouvre[2]
        ]
    }
    
    # Cr√©er le DataFrame
    df = pd.DataFrame(data_table)
    
    # D√©finir "Seuil de rentabilite_economique" comme index
    df.set_index("Seuil de rentabilite_economique", inplace=True)
    
    # √âtape 4: D√©finir une fonction de formatage
    # √âtape 4: D√©finir une fonction de formatage
    def format_row(row):
        if row.name == "Taux de marge sur co√ªts variables":
            # Formater en pourcentage avec deux d√©cimales
            return row.apply(lambda x: "{:.2f} %".format(x))
        else:
            # Formater en dollars avec s√©parateurs de milliers et sans d√©cimales
            return row.apply(lambda x: "{:,.0f} $".format(x) if isinstance(x, (int, float)) else x)

    # √âtape 5: Appliquer le formatage
    df_formatted = df.apply(format_row, axis=1)

    # √âtape 6: Afficher le tableau format√© avec Streamlit
    st.table(df_formatted)
    # Stocker les r√©sultats dans les donn√©es
    data["seuil_rentabilite_economique"] = {
        "ventes_production_reelle": ventes_production_reelle,
        "achats_consommes": achats_consommes,
        "total_couts_variables": total_couts_variables,
        "marge_sur_couts_variables": marge_sur_couts_variables,
        "taux_marge_sur_couts_variables": taux_marge_sur_couts_variables,
        "couts_fixes": couts_fixes,
        "total_charges": total_charges,
        "resultat_courant_avant_impots": resultat_avant_impots,
        "seuil_rentabilite_ca": seuil_rentabilite_ca,
        "excedent_insuffisance": excedent_insuffisance,
        "point_mort_ca_par_jour_ouvre": point_mort_ca_par_jour_ouvre
    }
    
    # Enregistrer les donn√©es dans la session
    st.session_state["data"] = data
    
    # Pr√©parer les donn√©es d'exportation pour Seuil de rentabilit√© √©conomique
    export_table_seuil = []
    for idx, label in enumerate(data_table["Seuil de rentabilite_economique"]):
        export_table_seuil.append({
            "Description": label,
            "Ann√©e 1": data_table["Ann√©e 1"][idx],
            "Ann√©e 2": data_table["Ann√©e 2"][idx],
            "Ann√©e 3": data_table["Ann√©e 3"][idx]
        })
    
    # Stocker les donn√©es d'exportation dans la session
    st.session_state['export_data_seuil_rentabilite_economique'] = {
        "projet": projet,
        "porteur_projet": porteur_projet,
        "table_data": export_table_seuil
    }
    
    # Section Export
    st.header("Exporter les donn√©es")
    
    # Bouton pour t√©l√©charger le fichier Word complet contenant tous les tableaux avec une cl√© unique
    if st.button("T√©l√©charger le Document Word Complet", key="download_word_complet_seuil_rentabilite_economique"):
        telecharger_document_complet()


def telecharger_document_complet():
    # R√©cup√©rer les donn√©es export√©es de toutes les sections
    export_data_investissements = st.session_state.get('export_data_investissements', {})
    export_data_salaires = st.session_state.get('export_data_salaires_charges_sociales', {})
    export_data_amortissements = st.session_state.get('export_data_detail_amortissements', {})
    export_data_compte = st.session_state.get('export_data_compte_resultats_previsionnel', {})
    export_data_soldes = st.session_state.get('export_data_soldes_intermediaires_de_gestion', {})
    export_data_capacite = st.session_state.get('export_data_capacite_autofinancement', {})
    export_data_seuil = st.session_state.get('export_data_seuil_rentabilite_economique', {})
    export_data_bfr = st.session_state.get('export_data_besoin_fonds_roulement', {})
    
    # V√©rifiez que toutes les donn√©es sont pr√©sentes
    if not all([
        export_data_investissements.get("table_data"),
        export_data_salaires.get("table_data"),
        export_data_amortissements.get("amortissements"),
        export_data_compte.get("table_data"),
        export_data_soldes.get("table_data"),
        export_data_capacite.get("table_data"),
        export_data_seuil.get("table_data"),
        export_data_bfr.get("table_data")
    ]):
        st.error("Toutes les sections doivent √™tre remplies avant de t√©l√©charger le document complet.")
        return
    
    # Cr√©er un document Word
    doc = Document()
    
    ### 1. Ajouter la section Investissements et Financements ###
    doc.add_heading('Investissements et Financements', level=1)
    doc.add_paragraph(f"**Projet :** {export_data_investissements.get('projet', 'N/A')}")
    doc.add_paragraph(f"**Porteur de projet :** {export_data_investissements.get('porteur_projet', 'N/A')}")
    doc.add_page_break()
    
    # Cr√©er le tableau Investissements et Financements dans Word
    table_inv = doc.add_table(rows=1, cols=4)
    table_inv.style = 'Light List Accent 1'
    table_inv.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_inv = table_inv.rows[0].cells
    headers_inv = ["Investissements", "Taux (%)", "Dur√©e (mois)", "Montant ($)"]
    for i, header in enumerate(headers_inv):
        hdr_cells_inv[i].text = header
        for paragraph in hdr_cells_inv[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_inv[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_investissements['table_data']:
        row_cells = table_inv.add_row().cells
        row_cells[0].text = row.get("Investissements", "")
        row_cells[1].text = row.get("Taux (%)", "")
        row_cells[2].text = str(row.get("Dur√©e (mois)", "")) if row.get("Dur√©e (mois)", "") != "-" else "-"
        row_cells[3].text = row.get("Montant ($)", "")
        
        # Mise en forme des lignes sp√©cifiques
        if row["Investissements"] in ["INVESTISSEMENTS", "FINANCEMENT DES INVESTISSEMENTS", "TOTAL SUBVENTIONS", "TOTAL EMPRUNTS"]:
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.bold = True
        elif "TOTAL" in row["Investissements"]:
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.bold = True
        
        # Alignement des cellules
        row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    
    ### 2. Ajouter la section Salaires et Charges Sociales ###
    doc.add_heading('Salaires et Charges Sociales', level=1)
    doc.add_paragraph(f"**Projet :** {export_data_salaires.get('projet', 'N/A')}")
    doc.add_paragraph(f"**Porteur de projet :** {export_data_salaires.get('porteur_projet', 'N/A')}")
    doc.add_paragraph("---")
    
    # Cr√©er le tableau Salaires et Charges Sociales dans Word
    table_sal = doc.add_table(rows=1, cols=4)
    table_sal.style = 'Light List Accent 1'
    table_sal.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_sal = table_sal.rows[0].cells
    headers_sal = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_sal):
        hdr_cells_sal[i].text = header
        for paragraph in hdr_cells_sal[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_sal[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_salaires['table_data']:
        row_cells = table_sal.add_row().cells
        row_cells[0].text = row.get("Description", "")
        row_cells[1].text = row.get("Ann√©e 1", "")
        row_cells[2].text = row.get("Ann√©e 2", "")
        row_cells[3].text = row.get("Ann√©e 3", "")
        
        # Alignement des cellules
        row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    
    ### 3. Ajouter la section D√©tail des Amortissements ###
    doc.add_heading('D√©tail des Amortissements', level=1)
    
    # Cr√©er le tableau D√©tail des Amortissements dans Word
    table_amort = doc.add_table(rows=1, cols=4)
    table_amort.style = 'Light List Accent 1'
    table_amort.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_amort = table_amort.rows[0].cells
    headers_amort = ["Amortissement", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_amort):
        hdr_cells_amort[i].text = header
        for paragraph in hdr_cells_amort[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_amort[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Ajouter les donn√©es Amortissements au tableau
    for row in export_data_amortissements['amortissements']:
        row_cells_amort = table_amort.add_row().cells
        row_cells_amort[0].text = row.get("Amortissement", "")
        row_cells_amort[1].text = row.get("Ann√©e 1", "")
        row_cells_amort[2].text = row.get("Ann√©e 2", "")
        row_cells_amort[3].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les amortissements sont calcul√©s en fonction de la dur√©e d'amortissement sp√©cifi√©e.")
    
    ### 4. Ajouter la section Compte de R√©sultats Pr√©visionnel ###
    doc.add_heading('Compte de R√©sultats Pr√©visionnel', level=1)
    
    # Cr√©er le tableau Compte de R√©sultats Pr√©visionnel dans Word
    table_compte = doc.add_table(rows=1, cols=4)
    table_compte.style = 'Light List Accent 1'
    table_compte.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_compte = table_compte.rows[0].cells
    headers_compte = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_compte):
        hdr_cells_compte[i].text = header
        for paragraph in hdr_cells_compte[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_compte[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_compte['table_data']:
        row_cells_compte = table_compte.add_row().cells
        row_cells_compte[0].text = row.get("Description", "")
        row_cells_compte[1].text = row.get("Ann√©e 1", "")
        row_cells_compte[2].text = row.get("Ann√©e 2", "")
        row_cells_compte[3].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 5. Ajouter la section Soldes Interm√©diaires de Gestion ###
    doc.add_heading('Soldes interm√©diaires de gestion', level=1)
    
    # Cr√©er le tableau Soldes interm√©diaires de gestion dans Word
    table_soldes = doc.add_table(rows=1, cols=4)
    table_soldes.style = 'Light List Accent 1'
    table_soldes.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_soldes = table_soldes.rows[0].cells
    headers_soldes = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_soldes):
        hdr_cells_soldes[i].text = header
        for paragraph in hdr_cells_soldes[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_soldes[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_soldes['table_data']:
        row_cells_soldes = table_soldes.add_row().cells
        row_cells_soldes[0].text = row.get("Description", "")
        row_cells_soldes[1].text = f"{row.get('Ann√©e 1', 0):,.2f} $"
        row_cells_soldes[2].text = f"{row.get('Ann√©e 2', 0):,.2f} $"
        row_cells_soldes[3].text = f"{row.get('Ann√©e 3', 0):,.2f} $"
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 6. Ajouter la section Capacit√© d'Autofinancement ###
    doc.add_heading('Capacit√© d\'autofinancement', level=1)
    
    # Cr√©er le tableau Capacit√© d'Autofinancement dans Word
    table_cap = doc.add_table(rows=1, cols=4)
    table_cap.style = 'Light List Accent 1'
    table_cap.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_cap = table_cap.rows[0].cells
    headers_cap = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_cap):
        hdr_cells_cap[i].text = header
        for paragraph in hdr_cells_cap[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_cap[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_capacite['table_data']:
        row_cells_cap = table_cap.add_row().cells
        row_cells_cap[0].text = row.get("Description", "")
        row_cells_cap[1].text = f"{row.get('Ann√©e 1', 0):,.2f} $"
        row_cells_cap[2].text = f"{row.get('Ann√©e 2', 0):,.2f} $"
        row_cells_cap[3].text = f"{row.get('Ann√©e 3', 0):,.2f} $"
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 7. Ajouter la section Seuil de Rentabilit√© √âconomique ###
    doc.add_heading('Seuil de rentabilit√© √©conomique', level=1)
    
    # Cr√©er le tableau Seuil de Rentabilit√© √âconomique dans Word
    table_seuil = doc.add_table(rows=1, cols=4)
    table_seuil.style = 'Light List Accent 1'
    table_seuil.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_seuil = table_seuil.rows[0].cells
    headers_seuil = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_seuil):
        hdr_cells_seuil[i].text = header
        for paragraph in hdr_cells_seuil[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_seuil[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_seuil['table_data']:
        row_cells_seuil = table_seuil.add_row().cells
        row_cells_seuil[0].text = row.get("Description", "")
        row_cells_seuil[1].text = f"{row.get('Ann√©e 1', 0):,.1f} "
        row_cells_seuil[2].text = f"{row.get('Ann√©e 2', 0):,.1f} "
        row_cells_seuil[3].text = f"{row.get('Ann√©e 3', 0):,.1f} "
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 8. Ajouter la section Besoin en Fonds de Roulement ###
    doc.add_heading('Besoin en fonds de roulement', level=1)
    
    # Cr√©er le tableau Besoin en Fonds de Roulement dans Word
    table_bfr = doc.add_table(rows=1, cols=5)
    table_bfr.style = 'Light List Accent 1'
    table_bfr.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_bfr = table_bfr.rows[0].cells
    headers_bfr = ["Analyse clients / fournisseurs", "D√©lai jours", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_bfr):
        hdr_cells_bfr[i].text = header
        for paragraph in hdr_cells_bfr[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_bfr[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_bfr['table_data']:
        row_cells_bfr = table_bfr.add_row().cells
        row_cells_bfr[0].text = row.get("Analyse clients / fournisseurs", "")
        row_cells_bfr[1].text = row.get("D√©lai jours", "")
        row_cells_bfr[2].text = row.get("Ann√©e 1", "")
        row_cells_bfr[3].text = row.get("Ann√©e 2", "")
        row_cells_bfr[4].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    # Enregistrer le document dans un buffer
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    # Bouton de t√©l√©chargement
    st.download_button(
        label="T√©l√©charger le Document Word Complet",
        data=buffer,
        file_name="document_complet_financier.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )
    
    # Message de confirmation
    st.success("Le document Word complet a √©t√© g√©n√©r√© avec succ√®s !")

def page_besoin_fonds_roulement():
    st.title("Besoin en fonds de roulement")
    
    # V√©rifier si les donn√©es sont pr√©sentes dans la session
    if "data" not in st.session_state:
        st.error("Les donn√©es ne sont pas initialis√©es. Veuillez initialiser la session.")
        return
    
    data = st.session_state["data"]
    
    # R√©cup√©rer les informations du projet
    info_generales = data.get("informations_generales", {})
    projet = info_generales.get("intitule_projet", "N/A")
    porteur_projet = info_generales.get("prenom_nom", "N/A")
    
    # Afficher les informations du projet
    st.write(f"**Projet :** {projet}")
    st.write(f"**Porteur de projet :** {porteur_projet}")
    
    st.write("---")

    # R√©cup√©rer les d√©lais clients et fournisseurs depuis "besoin_fonds_roulement"
    besoin_fonds = data.get("fonds_roulement", {})
    delai_clients = besoin_fonds.get("duree_credits_clients", 0)  # Dur√©e moyenne des cr√©dits accord√©s aux clients en jours
    delai_fournisseurs = besoin_fonds.get("duree_dettes_fournisseurs", 0)  # Dur√©e moyenne des cr√©dits accord√©s aux fournisseurs en jours

    st.write("---")
    
    # R√©cup√©rer "Ventes + Production r√©elle" et "Achats consomm√©s" depuis "soldes_intermediaires_de_gestion"
    soldes_intermediaires = data.get("soldes_intermediaires_de_gestion", {})
    ventes_production_reelle = soldes_intermediaires.get("ventes_production_reelle", [0.0, 0.0, 0.0])
    achats_consommes = soldes_intermediaires.get("achats_consommes", [0.0, 0.0, 0.0])
    
    # V√©rifier si les d√©lais sont non nuls
    if delai_clients == 0 or delai_fournisseurs == 0:
        st.error("Les d√©lais de paiement des clients et des fournisseurs ne sont pas renseign√©s. Veuillez les saisir dans la section 'Votre besoin en fonds de roulement'.")
        return
    
    # V√©rifier si les listes ont 3 √©l√©ments
    if not (len(ventes_production_reelle) == len(achats_consommes) == 3):
        st.error("Les listes de 'Ventes + Production r√©elle' ou 'Achats consomm√©s' ne contiennent pas exactement 3 √©l√©ments. Veuillez v√©rifier les donn√©es.")
        return
    
    # Calculer le Volume cr√©dit client HT = Ventes + Production r√©elle / (delai_jours * 365)
    volume_credit_client_ht = []
    for i in range(3):
        vcc_ht = (ventes_production_reelle[i] * delai_clients) / 365
        volume_credit_client_ht.append(vcc_ht)
    
    # Calculer le Volume dettes fournisseurs HT = Achats consomm√©s / (delai_jours * 365)
    volume_dettes_fournisseurs_ht = []
    for i in range(3):
        vdf_ht = (achats_consommes[i] * delai_fournisseurs) / 365
        volume_dettes_fournisseurs_ht.append(vdf_ht)
    
    # Calculer le Besoin en fonds de roulement (BFR) = Volume cr√©dit client HT - Volume dettes fournisseurs HT
    bfr = [volume_credit_client_ht[i] - volume_dettes_fournisseurs_ht[i] for i in range(3)]
    
    # Afficher les r√©sultats interm√©diaires
    st.write("### R√©sultats des Calculs")
    st.write(f"**Volume cr√©dit client HT Ann√©e 1** : {volume_credit_client_ht[0]:.2f} $")
    st.write(f"**Volume dettes fournisseurs HT Ann√©e 1** : {volume_dettes_fournisseurs_ht[0]:.2f} $")
    st.write(f"**Besoin en fonds de roulement Ann√©e 1** : {bfr[0]:.2f} $")
    st.write(f"**Volume cr√©dit client HT Ann√©e 2** : {volume_credit_client_ht[1]:.2f} $")
    st.write(f"**Volume dettes fournisseurs HT Ann√©e 2** : {volume_dettes_fournisseurs_ht[1]:.2f} $")
    st.write(f"**Besoin en fonds de roulement Ann√©e 2** : {bfr[1]:.2f} $")
    st.write(f"**Volume cr√©dit client HT Ann√©e 3** : {volume_credit_client_ht[2]:.2f} $")
    st.write(f"**Volume dettes fournisseurs HT Ann√©e 3** : {volume_dettes_fournisseurs_ht[2]:.2f} $")
    st.write(f"**Besoin en fonds de roulement Ann√©e 3** : {bfr[2]:.2f} $")
    
    # Pr√©parer les donn√©es pour le tableau
    data_table = {
        "Analyse clients / fournisseurs": [
            "Besoins",
            "Volume cr√©dit client HT",
            "Ressources",
            "Volume dettes fournisseurs HT",
            "Besoin en fonds de roulement"
        ],
        "D√©lai jours": [
            "",
            f"{delai_clients}",
            "",
            f"{delai_fournisseurs}",
            ""
        ],
        "Ann√©e 1": [
            "",
            f"{volume_credit_client_ht[0]:.2f} $",
            "",
            f"{volume_dettes_fournisseurs_ht[0]:.2f} $",
            f"{bfr[0]:.2f} $"
        ],
        "Ann√©e 2": [
            "",
            f"{volume_credit_client_ht[1]:.2f} $",
            "",
            f"{volume_dettes_fournisseurs_ht[1]:.2f} $",
            f"{bfr[1]:.2f} $"
        ],
        "Ann√©e 3": [
            "",
            f"{volume_credit_client_ht[2]:.2f} $",
            "",
            f"{volume_dettes_fournisseurs_ht[2]:.2f} $",
            f"{bfr[2]:.2f} $"
        ]
    }
    
    df = pd.DataFrame(data_table)
    
    # Afficher le tableau
    st.write("### Tableau du Besoin en fonds de roulement")
    st.table(df)
    
    # Stocker les r√©sultats dans les donn√©es
    data["besoin_fonds_roulement"] = {
        "delai_clients": delai_clients,
        "delai_fournisseurs": delai_fournisseurs,
        "volume_credit_client_ht": volume_credit_client_ht,
        "volume_dettes_fournisseurs_ht": volume_dettes_fournisseurs_ht,
        "bfr": bfr
    }
    
    # Enregistrer les donn√©es dans la session
    st.session_state["data"] = data
    
    # Pr√©parer les donn√©es d'exportation pour Besoin en fonds de roulement
    export_table_bfr = []
    for idx, label in enumerate(data_table["Analyse clients / fournisseurs"]):
        export_table_bfr.append({
            "Analyse clients / fournisseurs": label,
            "D√©lai jours": data_table["D√©lai jours"][idx],
            "Ann√©e 1": data_table["Ann√©e 1"][idx],
            "Ann√©e 2": data_table["Ann√©e 2"][idx],
            "Ann√©e 3": data_table["Ann√©e 3"][idx]
        })
    
    # Stocker les donn√©es d'exportation dans la session
    st.session_state['export_data_besoin_fonds_roulement'] = {
        "projet": projet,
        "porteur_projet": porteur_projet,
        "table_data": export_table_bfr
    }
    
    # Section Export
    st.header("Exporter les donn√©es")
    
    # Bouton pour t√©l√©charger le fichier Word complet contenant tous les tableaux avec une cl√© unique
    if st.button("T√©l√©charger le Document Word Complet", key="download_word_complet_besoin_fonds_roulement"):
        telecharger_document_complet()


def telecharger_document_complet():
    # R√©cup√©rer les donn√©es export√©es de toutes les sections
    export_data_investissements = st.session_state.get('export_data_investissements', {})
    export_data_salaires = st.session_state.get('export_data_salaires_charges_sociales', {})
    export_data_amortissements = st.session_state.get('export_data_detail_amortissements', {})
    export_data_compte = st.session_state.get('export_data_compte_resultats_previsionnel', {})
    export_data_soldes = st.session_state.get('export_data_soldes_intermediaires_de_gestion', {})
    export_data_capacite = st.session_state.get('export_data_capacite_autofinancement', {})
    export_data_seuil = st.session_state.get('export_data_seuil_rentabilite_economique', {})
    export_data_bfr = st.session_state.get('export_data_besoin_fonds_roulement', {})
    export_data_plan_financement = st.session_state.get('export_data_plan_financement_trois_ans', {})
    
    # V√©rifiez que toutes les donn√©es sont pr√©sentes
    if not all([
        export_data_investissements.get("table_data"),
        export_data_salaires.get("table_data"),
        export_data_amortissements.get("amortissements"),
        export_data_compte.get("table_data"),
        export_data_soldes.get("table_data"),
        export_data_capacite.get("table_data"),
        export_data_seuil.get("table_data"),
        export_data_bfr.get("table_data"),
        export_data_plan_financement.get("table_data")
    ]):
        st.error("Toutes les sections doivent √™tre remplies avant de t√©l√©charger le document complet.")
        return
    
    # Cr√©er un document Word
    doc = Document()
    
    ### 1. Ajouter la section Investissements et Financements ###
    doc.add_heading('Investissements et Financements', level=1)
    doc.add_paragraph(f"**Projet :** {export_data_investissements.get('projet', 'N/A')}")
    doc.add_paragraph(f"**Porteur de projet :** {export_data_investissements.get('porteur_projet', 'N/A')}")
    doc.add_page_break()
    
    # Cr√©er le tableau Investissements et Financements dans Word
    table_inv = doc.add_table(rows=1, cols=4)
    table_inv.style = 'Light List Accent 1'
    table_inv.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_inv = table_inv.rows[0].cells
    headers_inv = ["Investissements", "Taux (%)", "Dur√©e (mois)", "Montant ($)"]
    for i, header in enumerate(headers_inv):
        hdr_cells_inv[i].text = header
        for paragraph in hdr_cells_inv[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_inv[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_investissements['table_data']:
        row_cells = table_inv.add_row().cells
        row_cells[0].text = row.get("Investissements", "")
        row_cells[1].text = row.get("Taux (%)", "")
        row_cells[2].text = str(row.get("Dur√©e (mois)", "")) if row.get("Dur√©e (mois)", "") != "-" else "-"
        row_cells[3].text = row.get("Montant ($)", "")
        
        # Mise en forme des lignes sp√©cifiques
        if row["Investissements"] in ["INVESTISSEMENTS", "FINANCEMENT DES INVESTISSEMENTS", "TOTAL SUBVENTIONS", "TOTAL EMPRUNTS"]:
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.bold = True
        elif "TOTAL" in row["Investissements"]:
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.bold = True
        
        # Alignement des cellules
        row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    
    ### 2. Ajouter la section Salaires et Charges Sociales ###
    doc.add_heading('Salaires et Charges Sociales', level=1)
    doc.add_paragraph(f"**Projet :** {export_data_salaires.get('projet', 'N/A')}")
    doc.add_paragraph(f"**Porteur de projet :** {export_data_salaires.get('porteur_projet', 'N/A')}")
    doc.add_paragraph("---")
    
    # Cr√©er le tableau Salaires et Charges Sociales dans Word
    table_sal = doc.add_table(rows=1, cols=4)
    table_sal.style = 'Light List Accent 1'
    table_sal.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_sal = table_sal.rows[0].cells
    headers_sal = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_sal):
        hdr_cells_sal[i].text = header
        for paragraph in hdr_cells_sal[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_sal[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_salaires['table_data']:
        row_cells = table_sal.add_row().cells
        row_cells[0].text = row.get("Description", "")
        row_cells[1].text = row.get("Ann√©e 1", "")
        row_cells[2].text = row.get("Ann√©e 2", "")
        row_cells[3].text = row.get("Ann√©e 3", "")
        
        # Alignement des cellules
        row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    
    ### 3. Ajouter la section D√©tail des Amortissements ###
    doc.add_heading('D√©tail des Amortissements', level=1)
    
    # Cr√©er le tableau D√©tail des Amortissements dans Word
    table_amort = doc.add_table(rows=1, cols=4)
    table_amort.style = 'Light List Accent 1'
    table_amort.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_amort = table_amort.rows[0].cells
    headers_amort = ["Amortissement", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_amort):
        hdr_cells_amort[i].text = header
        for paragraph in hdr_cells_amort[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_amort[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Ajouter les donn√©es Amortissements au tableau
    for row in export_data_amortissements['amortissements']:
        row_cells_amort = table_amort.add_row().cells
        row_cells_amort[0].text = row.get("Amortissement", "")
        row_cells_amort[1].text = row.get("Ann√©e 1", "")
        row_cells_amort[2].text = row.get("Ann√©e 2", "")
        row_cells_amort[3].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les amortissements sont calcul√©s en fonction de la dur√©e d'amortissement sp√©cifi√©e.")
    
    ### 4. Ajouter la section Compte de R√©sultats Pr√©visionnel ###
    doc.add_heading('Compte de R√©sultats Pr√©visionnel', level=1)
    
    # Cr√©er le tableau Compte de R√©sultats Pr√©visionnel dans Word
    table_compte = doc.add_table(rows=1, cols=4)
    table_compte.style = 'Light List Accent 1'
    table_compte.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_compte = table_compte.rows[0].cells
    headers_compte = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_compte):
        hdr_cells_compte[i].text = header
        for paragraph in hdr_cells_compte[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_compte[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_compte['table_data']:
        row_cells_compte = table_compte.add_row().cells
        row_cells_compte[0].text = row.get("Description", "")
        row_cells_compte[1].text = row.get("Ann√©e 1", "")
        row_cells_compte[2].text = row.get("Ann√©e 2", "")
        row_cells_compte[3].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 5. Ajouter la section Soldes Interm√©diaires de Gestion ###
    doc.add_heading('Soldes interm√©diaires de gestion', level=1)
    
    # Cr√©er le tableau Soldes interm√©diaires de gestion dans Word
    table_soldes = doc.add_table(rows=1, cols=4)
    table_soldes.style = 'Light List Accent 1'
    table_soldes.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_soldes = table_soldes.rows[0].cells
    headers_soldes = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_soldes):
        hdr_cells_soldes[i].text = header
        for paragraph in hdr_cells_soldes[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_soldes[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_soldes['table_data']:
        row_cells_soldes = table_soldes.add_row().cells
        row_cells_soldes[0].text = row.get("Description", "")
        row_cells_soldes[1].text = f"{row.get('Ann√©e 1', 0):,.2f} $"
        row_cells_soldes[2].text = f"{row.get('Ann√©e 2', 0):,.2f} $"
        row_cells_soldes[3].text = f"{row.get('Ann√©e 3', 0):,.2f} $"
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 6. Ajouter la section Capacit√© d'Autofinancement ###
    doc.add_heading('Capacit√© d\'autofinancement', level=1)
    
    # Cr√©er le tableau Capacit√© d'Autofinancement dans Word
    table_cap = doc.add_table(rows=1, cols=4)
    table_cap.style = 'Light List Accent 1'
    table_cap.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_cap = table_cap.rows[0].cells
    headers_cap = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_cap):
        hdr_cells_cap[i].text = header
        for paragraph in hdr_cells_cap[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_cap[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_capacite['table_data']:
        row_cells_cap = table_cap.add_row().cells
        row_cells_cap[0].text = row.get("Description", "")
        row_cells_cap[1].text = f"{row.get('Ann√©e 1', 0):,.2f} $"
        row_cells_cap[2].text = f"{row.get('Ann√©e 2', 0):,.2f} $"
        row_cells_cap[3].text = f"{row.get('Ann√©e 3', 0):,.2f} $"
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 7. Ajouter la section Seuil de Rentabilit√© √âconomique ###
    doc.add_heading('Seuil de rentabilit√© √©conomique', level=1)
    
    # Cr√©er le tableau Seuil de Rentabilit√© √âconomique dans Word
    table_seuil = doc.add_table(rows=1, cols=4)
    table_seuil.style = 'Light List Accent 1'
    table_seuil.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_seuil = table_seuil.rows[0].cells
    headers_seuil = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_seuil):
        hdr_cells_seuil[i].text = header
        for paragraph in hdr_cells_seuil[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_seuil[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_seuil['table_data']:
        row_cells_seuil = table_seuil.add_row().cells
        row_cells_seuil[0].text = row.get("Description", "")
        row_cells_seuil[1].text = f"{row.get('Ann√©e 1', 0):,.2f} "
        row_cells_seuil[2].text = f"{row.get('Ann√©e 2', 0):,.2f} "
        row_cells_seuil[3].text = f"{row.get('Ann√©e 3', 0):,.2f} "
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 8. Ajouter la section Plan de Financement √† Trois Ans ###
    doc.add_heading('Plan de financement √† trois ans', level=1)
    
    # Cr√©er le tableau Plan de Financement √† Trois Ans dans Word
    table_plan = doc.add_table(rows=1, cols=5)
    table_plan.style = 'Light List Accent 1'
    table_plan.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_plan = table_plan.rows[0].cells
    headers_plan = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_plan):
        hdr_cells_plan[i].text = header
        for paragraph in hdr_cells_plan[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_plan[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_plan_financement['table_data']:
        row_cells_plan = table_plan.add_row().cells
        row_cells_plan[0].text = row.get("Plan de financement √† trois ans", "")
        row_cells_plan[1].text = row.get("Ann√©e 1", "")
        row_cells_plan[2].text = row.get("Ann√©e 2", "")
        row_cells_plan[3].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    # Enregistrer le document dans un buffer
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    # Bouton de t√©l√©chargement
    st.download_button(
        label="T√©l√©charger le Document Word Complet",
        data=buffer,
        file_name="document_complet_financier.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )
    
    # Message de confirmation
    st.success("Le document Word complet a √©t√© g√©n√©r√© avec succ√®s !")




def page_plan_financement_trois_ans(): 
    st.title("Plan de financement √† trois ans")
    
    # V√©rifier si les donn√©es sont pr√©sentes dans la session
    if "data" not in st.session_state:
        st.error("Les donn√©es ne sont pas initialis√©es. Veuillez initialiser la session.")
        return
    
    data = st.session_state["data"]
    
    # R√©cup√©rer les informations du projet
    info_generales = data.get("informations_generales", {})
    projet = info_generales.get("intitule_projet", "N/A")
    porteur_projet = info_generales.get("prenom_nom", "N/A")
    
    # Afficher les informations du projet
    st.write(f"**Projet :** {projet}")
    st.write(f"**Porteur de projet :** {porteur_projet}")
    
    st.write("---")
    
    # R√©cup√©rer les besoins d√©marrage
    besoins_demarrage = data.get("besoins_demarrage", {})
    
    # Calcul des Immobilisations incorporelles et corporelles
    # D√©finissez quels √©l√©ments de "besoins_demarrage" correspondent √† chaque cat√©gorie
    immobilisations_inc = sum([
        besoins_demarrage.get("Frais d‚Äô√©tablissement", 0),
        besoins_demarrage.get("Frais d‚Äôouverture de compteurs", 0),
        besoins_demarrage.get("Logiciels, formations", 0),
        besoins_demarrage.get("D√©p√¥t de marque", 0),
        besoins_demarrage.get("Droits d‚Äôentr√©e", 0),
        besoins_demarrage.get("Achat fonds de commerce ou parts", 0),
        besoins_demarrage.get("Droit au bail", 0),
        besoins_demarrage.get("Caution ou d√©p√¥t de garantie", 0),
        besoins_demarrage.get("Frais de dossier", 0),
        besoins_demarrage.get("Frais de notaire", 0),
    ])
    
    immobilisations_corp = sum([
        besoins_demarrage.get("Enseigne et √©l√©ments de communication", 0),
        besoins_demarrage.get("V√©hicule", 0),
        besoins_demarrage.get("Mat√©riel professionnel", 0),
        besoins_demarrage.get("Mat√©riel autre", 0),
        besoins_demarrage.get("Mat√©riel de bureau", 0)
    ])
    
    immobilisations = [
        immobilisations_inc + immobilisations_corp,  # Ann√©e 1
        0.0,  # Ann√©e 2
        0.0   # Ann√©e 3
    ]
    
    # Acquisition des stocks
    acquisition_stocks = [
        besoins_demarrage.get("Stock de mati√®res et produits", 0),
        0.0,  # Ann√©e 2
        0.0   # Ann√©e 3
    ]
    
    # Variation du Besoin en fonds de roulement (BFR)
    besoin_fonds = data.get("besoin_fonds_roulement", {})
    bfr = besoin_fonds.get("bfr", [0.0, 0.0, 0.0])
    
    # Variation BFR = BFR ann√©e n - BFR ann√©e n-1
    variation_bfr = [
        bfr[0],                    # Variation en ann√©e 1 (BFR ann√©e 1 - BFR ann√©e 0)
        bfr[1] - bfr[0],           # Variation en ann√©e 2
        bfr[2] - bfr[1]            # Variation en ann√©e 3
    ]
    
    # Remboursement d'emprunts
    capacite_autofinancement = data.get("capacite_autofinancement", {})
    remboursements_emprunts = capacite_autofinancement.get("remboursements_emprunts", [0.0, 0.0, 0.0])
    
    # Total des besoins
    total_besoins = [
        immobilisations[0] + acquisition_stocks[0] + variation_bfr[0] + remboursements_emprunts[0],
        immobilisations[1] + acquisition_stocks[1] + variation_bfr[1] + remboursements_emprunts[1],
        immobilisations[2] + acquisition_stocks[2] + variation_bfr[2] + remboursements_emprunts[2]
    ]
    
    # Apport personnel
    financements = data.get("financements", {})
    apport_personnel = financements.get("Apport personnel ou familial", 0.0)
    apports_nature = financements.get("Apports en nature (en valeur)", 0.0)
    apport_total = apport_personnel + apports_nature
    apport_personnel_list = [apport_total, 0.0, 0.0] 
    
    # Emprunts
    pret_1 = financements.get("Pr√™t 1", {}).get("montant", 0.0)
    pret_2 = financements.get("Pr√™t 2", {}).get("montant", 0.0)
    pret_3 = financements.get("Pr√™t 3", {}).get("montant", 0.0)
    total_emprunts = pret_1 + pret_2 + pret_3
    emprunts = [total_emprunts, 0.0, 0.0]  # Supposons que les emprunts sont en ann√©e 1
    
    # Subventions
    subvention_1 = financements.get("Subvention 1", {}).get("montant", 0.0)
    subvention_2 = financements.get("Subvention 2", {}).get("montant", 0.0)
    subventions = subvention_1 + subvention_2
    subventions_list = [subventions, 0.0, 0.0]  # Supposons que les subventions sont en ann√©e 1
    
    # Autres financements
    autres_financements = financements.get("Autre financement", 0.0)
    autres_financements_list = [autres_financements, 0.0, 0.0]  # Supposons que c'est en ann√©e 1
    
    # Capacit√© d'auto-financement
    capacite_autofinancement_values = capacite_autofinancement.get("capacite_autofinancement", [0.0, 0.0, 0.0])
    
    # Total des ressources
    total_ressources = [
        apport_personnel_list[0] + emprunts[0] + subventions_list[0] + autres_financements_list[0] + capacite_autofinancement_values[0],
        apport_personnel_list[1] + emprunts[1] + subventions_list[1] + autres_financements_list[1] + capacite_autofinancement_values[1],
        apport_personnel_list[2] + emprunts[2] + subventions_list[2] + autres_financements_list[2] + capacite_autofinancement_values[2]
    ]
    
    # Variation de tr√©sorerie
    variation_tresorerie = [
        total_ressources[0] - total_besoins[0],
        total_ressources[1] - total_besoins[1],
        total_ressources[2] - total_besoins[2]
    ]
    
    # Exc√©dent de tr√©sorerie (cumulatif)
    excedent_tresorerie = []
    cumul_excedent = 0.0
    for i in range(3):
        cumul_excedent += variation_tresorerie[i]
        excedent_tresorerie.append(cumul_excedent)
    
    # Pr√©paration des donn√©es pour le tableau
    data_table = {
        "Plan de financement √† trois ans": [
            "Immobilisations",
            "Acquisition des stocks",
            "Variation du Besoin en fonds de roulement",
            "Remboursement d'emprunts",
            "Total des besoins",
            "Apport personnel",
            "Emprunts",
            "Subventions",
            "Autres financements",
            "Capacit√© d'auto-financement",
            "Total des ressources",
            "Variation de tr√©sorerie",
            "Exc√©dent de tr√©sorerie"
        ],
        "Ann√©e 1": [
            f"{immobilisations[0]:,.2f} $",
            f"{acquisition_stocks[0]:,.2f} $",
            f"{variation_bfr[0]:,.2f} $",
            f"{remboursements_emprunts[0]:,.2f} $",
            f"{total_besoins[0]:,.2f} $",
            f"{apport_personnel_list[0]:,.2f} $",
            f"{emprunts[0]:,.2f} $",
            f"{subventions_list[0]:,.2f} $",
            f"{autres_financements_list[0]:,.2f} $",
            f"{capacite_autofinancement_values[0]:,.2f} $",
            f"{total_ressources[0]:,.2f} $",
            f"{variation_tresorerie[0]:,.2f} $",
            f"{excedent_tresorerie[0]:,.2f} $"
        ],
        "Ann√©e 2": [
            f"{immobilisations[1]:,.2f} $",
            f"{acquisition_stocks[1]:,.2f} $",
            f"{variation_bfr[1]:,.2f} $",
            f"{remboursements_emprunts[1]:,.2f} $",
            f"{total_besoins[1]:,.2f} $",
            f"{apport_personnel_list[1]:,.2f} $",
            f"{emprunts[1]:,.2f} $",
            f"{subventions_list[1]:,.2f} $",
            f"{autres_financements_list[1]:,.2f} $",
            f"{capacite_autofinancement_values[1]:,.2f} $",
            f"{total_ressources[1]:,.2f} $",
            f"{variation_tresorerie[1]:,.2f} $",
            f"{excedent_tresorerie[1]:,.2f} $"
        ],
        "Ann√©e 3": [
            f"{immobilisations[2]:,.2f} $",
            f"{acquisition_stocks[2]:,.2f} $",
            f"{variation_bfr[2]:,.2f} $",
            f"{remboursements_emprunts[2]:,.2f} $",
            f"{total_besoins[2]:,.2f} $",
            f"{apport_personnel_list[2]:,.2f} $",
            f"{emprunts[2]:,.2f} $",
            f"{subventions_list[2]:,.2f} $",
            f"{autres_financements_list[2]:,.2f} $",
            f"{capacite_autofinancement_values[2]:,.2f} $",
            f"{total_ressources[2]:,.2f} $",
            f"{variation_tresorerie[2]:,.2f} $",
            f"{excedent_tresorerie[2]:,.2f} $"
        ]
    }
    
    df = pd.DataFrame(data_table)
    st.write("### Tableau du Plan de financement √† trois ans")
    st.table(df)
    
    # Stocker les r√©sultats dans les donn√©es
    data["plan_financement"] = {
        "immobilisations": immobilisations,
        "acquisition_stocks": acquisition_stocks,
        "variation_bfr": variation_bfr,
        "remboursements_emprunts": remboursements_emprunts,
        "total_besoins": total_besoins,
        "apport_personnel": apport_personnel_list,
        "emprunts": emprunts,
        "subventions": subventions_list,
        "autres_financements": autres_financements_list,
        "capacite_autofinancement": capacite_autofinancement_values,
        "total_ressources": total_ressources,
        "variation_tresorerie": variation_tresorerie,
        "excedent_tresorerie": excedent_tresorerie
    }
    
    # Enregistrer les donn√©es dans la session
    st.session_state["data"] = data   
    
    # Pr√©parer les donn√©es d'exportation pour Plan de Financement √† Trois Ans
    export_table_plan_financement = []
    for idx, label in enumerate(data_table["Plan de financement √† trois ans"]):
        export_table_plan_financement.append({
            "Plan de financement √† trois ans": label,
            "Ann√©e 1": data_table["Ann√©e 1"][idx],
            "Ann√©e 2": data_table["Ann√©e 2"][idx],
            "Ann√©e 3": data_table["Ann√©e 3"][idx]
        })
    
    # Stocker les donn√©es d'exportation dans la session
    st.session_state['export_data_plan_financement_trois_ans'] = {
        "projet": projet,
        "porteur_projet": porteur_projet,
        "table_data": export_table_plan_financement
    }
    
    # Section Export
    st.header("Exporter les donn√©es")
    
    # Bouton pour t√©l√©charger le fichier Word complet contenant tous les tableaux avec une cl√© unique
    if st.button("T√©l√©charger le Document Word Complet", key="download_word_complet_plan_financement_trois_ans"):
        telecharger_document_complet()
        


def telecharger_document_complet():
    # R√©cup√©rer les donn√©es export√©es de toutes les sections
    export_data_investissements = st.session_state.get('export_data_investissements', {})
    export_data_salaires = st.session_state.get('export_data_salaires_charges_sociales', {})
    export_data_amortissements = st.session_state.get('export_data_detail_amortissements', {})
    export_data_compte = st.session_state.get('export_data_compte_resultats_previsionnel', {})
    export_data_soldes = st.session_state.get('export_data_soldes_intermediaires_de_gestion', {})
    export_data_capacite = st.session_state.get('export_data_capacite_autofinancement', {})
    export_data_seuil = st.session_state.get('export_data_seuil_rentabilite_economique', {})
    export_data_bfr = st.session_state.get('export_data_besoin_fonds_roulement', {})
    export_data_plan_financement = st.session_state.get('export_data_plan_financement_trois_ans', {})
    export_data_budget_tresorerie_part1 = st.session_state.get('export_data_budget_previsionnel_tresorerie_part1', {})
    export_data_budget_tresorerie_part2 = st.session_state.get('export_data_budget_previsionnel_tresorerie_part2', {})

    st.write(export_data_plan_financement)
    # V√©rifiez que toutes les donn√©es n√©cessaires sont pr√©sentes
    if not all([
        export_data_investissements.get("table_data"),
        export_data_salaires.get("table_data"),
        export_data_amortissements.get("amortissements"),
        export_data_compte.get("table_data"),
        export_data_soldes.get("table_data"),
        export_data_capacite.get("table_data"),
        export_data_seuil.get("table_data"),
        export_data_bfr.get("table_data"),
        export_data_plan_financement.get("table_data"),
        export_data_budget_tresorerie_part1.get("table_data"),
        export_data_budget_tresorerie_part2.get("table_data")
    ]):
        st.error("Toutes les sections doivent √™tre remplies avant de t√©l√©charger le document complet.")
        return
    
    # Cr√©er un document Word
    doc = Document()
    
    ### 1. Ajouter la section Investissements et Financements ###
    doc.add_heading('Investissements et Financements', level=1)
    doc.add_paragraph(f"**Projet :** {export_data_investissements.get('projet', 'N/A')}")
    doc.add_paragraph(f"**Porteur de projet :** {export_data_investissements.get('porteur_projet', 'N/A')}")
    
    # Cr√©er le tableau Investissements et Financements dans Word
    table_inv = doc.add_table(rows=1, cols=4)
    table_inv.style = 'Light List Accent 1'
    table_inv.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_inv = table_inv.rows[0].cells
    headers_inv = ["Investissements", "Taux (%)", "Dur√©e (mois)", "Montant ($)"]
    for i, header in enumerate(headers_inv):
        hdr_cells_inv[i].text = header
        for paragraph in hdr_cells_inv[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_inv[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_investissements['table_data']:
        row_cells = table_inv.add_row().cells
        row_cells[0].text = row.get("Investissements", "")
        row_cells[1].text = row.get("Taux (%)", "")
        row_cells[2].text = str(row.get("Dur√©e (mois)", "")) if row.get("Dur√©e (mois)", "") != "-" else "-"
        row_cells[3].text = row.get("Montant ($)", "")
        
        # Mise en forme des lignes sp√©cifiques
        if row["Investissements"] in ["INVESTISSEMENTS", "FINANCEMENT DES INVESTISSEMENTS", "TOTAL SUBVENTIONS", "TOTAL EMPRUNTS"]:
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.bold = True
        elif "TOTAL" in row["Investissements"]:
            for cell in row_cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        run.font.bold = True
        
        # Alignement des cellules
        row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    
    ### 2. Ajouter la section Salaires et Charges Sociales ###
    doc.add_heading('Salaires et Charges Sociales', level=1)
    doc.add_paragraph(f"**Projet :** {export_data_salaires.get('projet', 'N/A')}")
    doc.add_paragraph(f"**Porteur de projet :** {export_data_salaires.get('porteur_projet', 'N/A')}")
    doc.add_paragraph("---")
    
    # Cr√©er le tableau Salaires et Charges Sociales dans Word
    table_sal = doc.add_table(rows=1, cols=4)
    table_sal.style = 'Light List Accent 1'
    table_sal.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_sal = table_sal.rows[0].cells
    headers_sal = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_sal):
        hdr_cells_sal[i].text = header
        for paragraph in hdr_cells_sal[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_sal[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_salaires['table_data']:
        row_cells = table_sal.add_row().cells
        row_cells[0].text = row.get("Description", "")
        row_cells[1].text = row.get("Ann√©e 1", "")
        row_cells[2].text = row.get("Ann√©e 2", "")
        row_cells[3].text = row.get("Ann√©e 3", "")
        
        # Alignement des cellules
        row_cells[1].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        row_cells[2].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
        row_cells[3].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    
    ### 3. Ajouter la section D√©tail des Amortissements ###
    doc.add_heading('D√©tail des Amortissements', level=1)
    
    # Cr√©er le tableau D√©tail des Amortissements dans Word
    table_amort = doc.add_table(rows=1, cols=4)
    table_amort.style = 'Light List Accent 1'
    table_amort.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_amort = table_amort.rows[0].cells
    headers_amort = ["Amortissement", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_amort):
        hdr_cells_amort[i].text = header
        for paragraph in hdr_cells_amort[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_amort[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Ajouter les donn√©es Amortissements au tableau
    for row in export_data_amortissements['amortissements']:
        row_cells_amort = table_amort.add_row().cells
        row_cells_amort[0].text = row.get("Amortissement", "")
        row_cells_amort[1].text = row.get("Ann√©e 1", "")
        row_cells_amort[2].text = row.get("Ann√©e 2", "")
        row_cells_amort[3].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les amortissements sont calcul√©s en fonction de la dur√©e d'amortissement sp√©cifi√©e.")
    
    ### 4. Ajouter la section Compte de R√©sultats Pr√©visionnel ###
    doc.add_heading('Compte de R√©sultats Pr√©visionnel', level=1)
    
    # Cr√©er le tableau Compte de R√©sultats Pr√©visionnel dans Word
    table_compte = doc.add_table(rows=1, cols=4)
    table_compte.style = 'Light List Accent 1'
    table_compte.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_compte = table_compte.rows[0].cells
    headers_compte = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_compte):
        hdr_cells_compte[i].text = header
        for paragraph in hdr_cells_compte[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_compte[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_compte['table_data']:
        row_cells_compte = table_compte.add_row().cells
        row_cells_compte[0].text = row.get("Description", "")
        row_cells_compte[1].text = row.get("Ann√©e 1", "")
        row_cells_compte[2].text = row.get("Ann√©e 2", "")
        row_cells_compte[3].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 5. Ajouter la section Soldes Interm√©diaires de Gestion ###
    doc.add_heading('Soldes interm√©diaires de gestion', level=1)
    
    # Cr√©er le tableau Soldes interm√©diaires de gestion dans Word
    table_soldes = doc.add_table(rows=1, cols=4)
    table_soldes.style = 'Light List Accent 1'
    table_soldes.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_soldes = table_soldes.rows[0].cells
    headers_soldes = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_soldes):
        hdr_cells_soldes[i].text = header
        for paragraph in hdr_cells_soldes[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_soldes[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_soldes['table_data']:
        row_cells_soldes = table_soldes.add_row().cells
        row_cells_soldes[0].text = row.get("Description", "")
        row_cells_soldes[1].text = f"{row.get('Ann√©e 1', 0):,.2f} $"
        row_cells_soldes[2].text = f"{row.get('Ann√©e 2', 0):,.2f} $"
        row_cells_soldes[3].text = f"{row.get('Ann√©e 3', 0):,.2f} $"
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 6. Ajouter la section Capacit√© d'Autofinancement ###
    doc.add_heading('Capacit√© d\'autofinancement', level=1)
    
    # Cr√©er le tableau Capacit√© d'Autofinancement dans Word
    table_cap = doc.add_table(rows=1, cols=4)
    table_cap.style = 'Light List Accent 1'
    table_cap.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_cap = table_cap.rows[0].cells
    headers_cap = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_cap):
        hdr_cells_cap[i].text = header
        for paragraph in hdr_cells_cap[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_cap[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_capacite['table_data']:
        row_cells_cap = table_cap.add_row().cells
        row_cells_cap[0].text = row.get("Description", "")
        row_cells_cap[1].text = f"{row.get('Ann√©e 1', 0):,.2f} $"
        row_cells_cap[2].text = f"{row.get('Ann√©e 2', 0):,.2f} $"
        row_cells_cap[3].text = f"{row.get('Ann√©e 3', 0):,.2f} $"
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 7. Ajouter la section Seuil de Rentabilit√© √âconomique ###
    doc.add_heading('Seuil de rentabilit√© √©conomique', level=1)
    
    # Cr√©er le tableau Seuil de Rentabilit√© √âconomique dans Word
    table_seuil = doc.add_table(rows=1, cols=4)
    table_seuil.style = 'Light List Accent 1'
    table_seuil.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_seuil = table_seuil.rows[0].cells
    headers_seuil = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_seuil):
        hdr_cells_seuil[i].text = header
        for paragraph in hdr_cells_seuil[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_seuil[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_seuil['table_data']:
        row_cells_seuil = table_seuil.add_row().cells
        row_cells_seuil[0].text = row.get("Description", "")
        row_cells_seuil[1].text = f"{row.get('Ann√©e 1', 0):,.2f} "
        row_cells_seuil[2].text = f"{row.get('Ann√©e 2', 0):,.2f} "
        row_cells_seuil[3].text = f"{row.get('Ann√©e 3', 0):,.2f} "
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 8. Ajouter la section Plan de Financement √† Trois Ans ###
    doc.add_heading('Plan de financement √† trois ans', level=1)
    
    # Cr√©er le tableau Plan de Financement √† Trois Ans dans Word
    table_plan = doc.add_table(rows=1, cols=4)
    table_plan.style = 'Light List Accent 1'
    table_plan.alignment = WD_TABLE_ALIGNMENT.CENTER
    hdr_cells_plan = table_plan.rows[0].cells
    headers_plan = ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"]
    for i, header in enumerate(headers_plan):
        hdr_cells_plan[i].text = header
        for paragraph in hdr_cells_plan[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_plan[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    for row in export_data_plan_financement['table_data']:
        row_cells_plan = table_plan.add_row().cells
        row_cells_plan[0].text = row.get("Plan de financement √† trois ans", "")
        row_cells_plan[1].text = row.get("Ann√©e 1", "")
        row_cells_plan[2].text = row.get("Ann√©e 2", "")
        row_cells_plan[3].text = row.get("Ann√©e 3", "")
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")
    
    ### 9. Ajouter la section Budget Pr√©visionnel de Tr√©sorerie Partie 1 ###
    doc.add_heading('Budget pr√©visionnel de tr√©sorerie - Partie 1', level=1)
    
    # Cr√©er le premier tableau Budget pr√©visionnel de tr√©sorerie
    table_budget_part1 = doc.add_table(rows=1, cols=len(export_data_budget_tresorerie_part1['table_data'][0]))
    table_budget_part1.style = 'Light List Accent 1'
    table_budget_part1.alignment = WD_TABLE_ALIGNMENT.CENTER
    
    # Ajouter les en-t√™tes
    headers_budget_part1 = export_data_budget_tresorerie_part1['table_data'][0].keys()
    hdr_cells_budget_part1 = table_budget_part1.rows[0].cells
    for i, header in enumerate(headers_budget_part1):
        hdr_cells_budget_part1[i].text = header
        for paragraph in hdr_cells_budget_part1[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_budget_part1[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Ajouter les donn√©es du premier tableau
    for row in export_data_budget_tresorerie_part1['table_data'][1:]:
        row_cells = table_budget_part1.add_row().cells
        for i, value in enumerate(row.values()):
            row_cells[i].text = value
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les donn√©es du budget pr√©visionnel de tr√©sorerie - Partie 1 sont bas√©es sur les estimations fournies.")
    
    ### 10. Ajouter la section Budget Pr√©visionnel de Tr√©sorerie Partie 2 ###
    doc.add_heading('Budget pr√©visionnel de tr√©sorerie - Partie 2', level=1)
    
    # Cr√©er le deuxi√®me tableau Budget pr√©visionnel de tr√©sorerie
    table_budget_part2 = doc.add_table(rows=1, cols=len(export_data_budget_tresorerie_part2['table_data'][0]))
    table_budget_part2.style = 'Light List Accent 1'
    table_budget_part2.alignment = WD_TABLE_ALIGNMENT.CENTER
    
    # Ajouter les en-t√™tes
    headers_budget_part2 = export_data_budget_tresorerie_part2['table_data'][0].keys()
    hdr_cells_budget_part2 = table_budget_part2.rows[0].cells
    for i, header in enumerate(headers_budget_part2):
        hdr_cells_budget_part2[i].text = header
        for paragraph in hdr_cells_budget_part2[i].paragraphs:
            for run in paragraph.runs:
                run.font.bold = True
        hdr_cells_budget_part2[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    # Ajouter les donn√©es du deuxi√®me tableau
    for row in export_data_budget_tresorerie_part2['table_data'][1:]:
        row_cells = table_budget_part2.add_row().cells
        for i, value in enumerate(row.values()):
            row_cells[i].text = value
    
    # Ajouter une note
    doc.add_paragraph()
    doc.add_paragraph("Les donn√©es du budget pr√©visionnel de tr√©sorerie - Partie 2 sont bas√©es sur les estimations fournies.")
    
    # Enregistrer le document dans un buffer
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    
    # Bouton de t√©l√©chargement
    st.download_button(
        label="T√©l√©charger le Document Word Complet",
        data=buffer,
        file_name="document_complet_financier.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )
    
    # Message de confirmation
    st.success("Le document Word complet a √©t√© g√©n√©r√© avec succ√®s !")


import streamlit as st
import pandas as pd

def page_budget_previsionnel_tresorerie():
    st.title("Budget pr√©visionnel de tr√©sorerie")
    
    data = st.session_state.get("data", {})
    
    if not data:
        st.error("Les donn√©es ne sont pas initialis√©es. Veuillez initialiser la session.")
        return
    
    # R√©cup√©rer les informations du projet
    projet = data.get("informations_generales", {}).get("intitule_projet", "N/A")
    porteur_projet = data.get("informations_generales", {}).get("prenom_nom", "N/A")
    
    st.write(f"**Projet :** {projet} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **(Hors TVA)**")
    st.write(f"**Porteur de projet :** {porteur_projet}")
    
    st.write("---")
    
    # Cr√©ation du budget pr√©visionnel pour la premi√®re ann√©e, mois par mois
    months = [f"Mois {i+1}" for i in range(12)] + ["TOTAL"]
    
    # Initialisation des structures de donn√©es
    encaissements = {}
    decaissements = {}
    solde_precedent = [0.0] * 12
    solde_mois = [0.0] * 12
    solde_tresorerie_cumul = [0.0] * 12
    
    # ----------------------------
    # Encaissements
    # ----------------------------
    
    # R√©cup√©rer les encaissements depuis "Plan de financement √† trois ans"
    plan_financement = data.get("plan_financement", {})
    apport_personnel = plan_financement.get("apport_personnel", [0.0, 0.0, 0.0])[0]
    emprunts = plan_financement.get("emprunts", [0.0, 0.0, 0.0])[0]
    subventions = plan_financement.get("subventions", [0.0, 0.0, 0.0])[0]
    autres_financements = plan_financement.get("autres_financements", [0.0, 0.0, 0.0])[0]
    
    encaissements["Apport personnel"] = [apport_personnel] + [0.0]*11
    encaissements["Emprunts"] = [emprunts] + [0.0]*11
    encaissements["Subventions"] = [subventions] + [0.0]*11
    encaissements["Autres financements"] = [autres_financements] + [0.0]*11
    
    # R√©cup√©rer les ventes depuis "Chiffre d'Affaires Pr√©visionnel"
    chiffre_affaires = data.get("chiffre_affaires", {})
    
    # Initialiser les listes de ventes mensuelles
    vente_marchandises_mensuel = []
    vente_services_mensuel = []
    
    # Remplir les ventes mensuelles de Marchandises
    for i in range(1, 13):
        key_ca = f"Marchandises_Mois {i}_ca"
        ca = chiffre_affaires.get(key_ca, 0.0)
        vente_marchandises_mensuel.append(ca)
    
    # Remplir les ventes mensuelles de Services
    for i in range(1, 13):
        key_ca = f"Services_Mois {i}_ca"
        ca = chiffre_affaires.get(key_ca, 0.0)
        vente_services_mensuel.append(ca)
    
    encaissements["Vente de marchandises"] = vente_marchandises_mensuel
    encaissements["Vente de services"] = vente_services_mensuel
    encaissements["Chiffre d'affaires (total)"] = [vente_marchandises_mensuel[i] + vente_services_mensuel[i] for i in range(12)]
    
    # Total des encaissements
    total_encaissements = []
    for i in range(12):
        total = (
            encaissements["Apport personnel"][i] +
            encaissements["Emprunts"][i] +
            encaissements["Subventions"][i] +
            encaissements["Autres financements"][i] +
            encaissements["Vente de marchandises"][i] +
            encaissements["Vente de services"][i]
        )
        total_encaissements.append(total)
    total_total_encaissements = sum(total_encaissements)
    total_encaissements.append(total_total_encaissements)
    
    # ----------------------------
    # D√©caissements
    # ----------------------------
    
    # R√©cup√©rer les donn√©es n√©cessaires pour les d√©caissements
    besoins_demarrage = data.get("besoins_demarrage", {})
    charges_variables = data.get("charges_variables", {})
    compte_resultat = data.get("compte_de_resultat", {})
    soldes_intermediaires = data.get("soldes_intermediaires_de_gestion", {})
    capacite_autofinancement = data.get("capacite_autofinancement", {})
    
    # Immobilisations incorporelles et corporelles depuis "besoins_demarrage"
    immobilisations_incorporelles = sum([
        besoins_demarrage.get("Frais d‚Äô√©tablissement", 0.0),
        besoins_demarrage.get("Frais d‚Äôouverture de compteurs", 0.0),
        besoins_demarrage.get("Logiciels, formations", 0.0),
        besoins_demarrage.get("D√©p√¥t de marque", 0.0),
        besoins_demarrage.get("Droits d‚Äôentr√©e", 0.0),
        besoins_demarrage.get("Achat fonds de commerce ou parts", 0.0),
        besoins_demarrage.get("Droit au bail", 0.0),
        besoins_demarrage.get("Caution ou d√©p√¥t de garantie", 0.0),
        besoins_demarrage.get("Frais de dossier", 0.0),
        besoins_demarrage.get("Frais de notaire", 0.0),
    ])
    
    immobilisations_corporelles = sum([
        besoins_demarrage.get("Enseigne et √©l√©ments de communication", 0.0),
        besoins_demarrage.get("V√©hicule", 0.0),
        besoins_demarrage.get("Mat√©riel professionnel", 0.0),
        besoins_demarrage.get("Mat√©riel autre", 0.0),
        besoins_demarrage.get("Mat√©riel de bureau", 0.0)
    ])
    
    immobilisations_total = immobilisations_incorporelles + immobilisations_corporelles
    
    decaissements["Immobilisations incorporelles"] = [immobilisations_incorporelles] + [0.0]*11
    decaissements["Immobilisations corporelles"] = [immobilisations_corporelles] + [0.0]*11
    decaissements["Immobilisations (total)"] = [immobilisations_total] + [0.0]*11
    
    # Acquisition des stocks depuis "Stock de mati√®res et produits"
    acquisition_stocks = besoins_demarrage.get("Stock de mati√®res et produits", 0.0)
    decaissements["Acquisition stocks"] = [acquisition_stocks] + [0.0]*11
    
    # √âch√©ances emprunt : "Principal ann√©e 1" divis√© par 12
    remboursements_emprunts = capacite_autofinancement.get("remboursements_emprunts", [0.0, 0.0, 0.0])
    principal_annee1 = remboursements_emprunts[0]
    echeances_emprunt_mensuel = principal_annee1 / 12.0 if principal_annee1 > 0 else 0.0
    decaissements["√âch√©ances emprunt"] = [echeances_emprunt_mensuel] * 12
    
    # Achats de marchandises : "Vente de marchandises" * "le co√ªt d'achat de vos marchandises" de "Charges Variables"
    cout_achat_marchandises_pct = charges_variables.get("cout_achat_marchandises_pct", 100.0)
    if cout_achat_marchandises_pct == 0.0:
        cout_achat_marchandises_pct = 100.0  # Supposer 100% si non renseign√©
    
    achats_marchandises_mensuel = [vente_marchandises_mensuel[i] * cout_achat_marchandises_pct / 100.0 for i in range(12)]
    decaissements["Achats de marchandises"] = achats_marchandises_mensuel
    
    # Charges externes : R√©cup√©rer depuis "soldes_intermediaires_de_gestion"
    charges_externes_annee1 = soldes_intermediaires.get("charges_externes", [0.0, 0.0, 0.0])[0]
    charges_externes_mensuel = charges_externes_annee1 / 12.0 if charges_externes_annee1 > 0 else 0.0
    decaissements["Charges externes"] = [charges_externes_mensuel] * 12
    
    # Imp√¥ts et taxes
    impots_et_taxes_annee1 = compte_resultat.get("impots_et_taxes", [0.0, 0.0, 0.0])[0]
    impots_et_taxes_mensuel = impots_et_taxes_annee1 / 12.0 if impots_et_taxes_annee1 > 0 else 0.0
    decaissements["Imp√¥ts et taxes"] = [impots_et_taxes_mensuel] * 12
    
    # Salaires employ√©s, Charges sociales employ√©s, Pr√©l√®vement dirigeant(s), Charges sociales dirigeant(s), Frais bancaires, charges financi√®res
    salaires_employes_annee1 = compte_resultat.get("salaires_employes", [0.0, 0.0, 0.0])[0]
    charges_sociales_employes_annee1 = compte_resultat.get("charges_sociales_employes", [0.0, 0.0, 0.0])[0]
    prelevement_dirigeants_annee1 = compte_resultat.get("salaires_dirigeants", [0.0, 0.0, 0.0])[0]
    charges_sociales_dirigeants_annee1 = compte_resultat.get("charges_sociales_dirigeants", [0.0, 0.0, 0.0])[0]
    frais_bancaires_annuels = compte_resultat.get("total_frais_financiers", [0.0, 0.0, 0.0])[0]
    
    salaires_employes_mensuel = [salaires_employes_annee1 / 12.0] * 12
    charges_sociales_employes_mensuel = [charges_sociales_employes_annee1 / 12.0] * 12
    prelevement_dirigeants_mensuel = [prelevement_dirigeants_annee1 / 12.0] * 12
    charges_sociales_dirigeants_mensuel = [charges_sociales_dirigeants_annee1 / 12.0] * 12
    frais_bancaires_mensuel = [frais_bancaires_annuels / 12.0] * 12 if frais_bancaires_annuels > 0 else [0.0] * 12
    
    decaissements["Salaires employ√©s"] = salaires_employes_mensuel
    decaissements["Charges sociales employ√©s"] = charges_sociales_employes_mensuel
    decaissements["Pr√©l√®vement dirigeant(s)"] = prelevement_dirigeants_mensuel
    decaissements["Charges sociales dirigeant(s)"] = charges_sociales_dirigeants_mensuel
    decaissements["Frais bancaires, charges financi√®res"] = frais_bancaires_mensuel
    
    # ----------------------------
    # Total charges de personnel
    # ----------------------------
    # Calculer le total des charges de personnel pour chaque mois
    total_charges_personnel_mensuel = [
        salaires_employes_mensuel[i] + charges_sociales_employes_mensuel[i] +
        prelevement_dirigeants_mensuel[i] + charges_sociales_dirigeants_mensuel[i]
        for i in range(12)
    ]
    decaissements["Total charges de personnel"] = total_charges_personnel_mensuel
    
    # ----------------------------
    # Total des d√©caissements
    # ----------------------------
    
    # D√©finir les cl√©s √† inclure dans le total des d√©caissements
    decaissements_keys = [
        "Immobilisations (total)",
        "Acquisition stocks",
        "√âch√©ances emprunt",
        "Achats de marchandises",
        "Charges externes",
        "Imp√¥ts et taxes",
        "Total charges de personnel",
        "Frais bancaires, charges financi√®res"
    ]
    
    total_decaissements = []
    for i in range(12):
        total = sum([decaissements[key][i] for key in decaissements_keys])
        total_decaissements.append(total)
    total_total_decaissements = sum(total_decaissements)
    total_decaissements.append(total_total_decaissements)
    
    # ----------------------------
    # Calcul des Soldes
    # ----------------------------
    
    for i in range(12):
        solde_mois[i] = total_encaissements[i] - total_decaissements[i]
        solde_tresorerie_cumul[i] = solde_tresorerie_cumul[i - 1] + solde_mois[i] if i > 0 else solde_mois[i]
        solde_precedent[i] = solde_tresorerie_cumul[i - 1] if i > 0 else 0.0
    
    # Append totals to solde_mois, solde_precedent, solde_tresorerie_cumul
    total_solde_mois = sum(solde_mois)
    solde_mois.append(total_solde_mois)
    
    # Pour solde_precedent, le total n'est pas significatif, on peut ajouter une cha√Æne vide
    solde_precedent.append("")
    
    # Pour solde_tresorerie_cumul, on peut ajouter la derni√®re valeur cumulative
    solde_tresorerie_cumul.append(solde_tresorerie_cumul[-1])
    
    # ----------------------------
    # Pr√©paration des donn√©es pour le tableau
    # ----------------------------
    
    table_data = {"Description": months}
    
    # Encaissements
    for key in encaissements:
        amounts = encaissements[key]
        total = sum(amounts)
        amounts_with_total = amounts + [total]
        table_data[key] = [f"{value:,.2f} $" if value != 0 else "-" for value in amounts_with_total]
    
    # D√©caissements
    for key in decaissements:
        # Inclure toutes les lignes de d√©caissements
        amounts = decaissements[key]
        total = sum(amounts)
        # Remplacer 0 par '-' si n√©cessaire
        amounts_with_total = [f"{value:,.2f} $" if value != 0 else "-" for value in amounts] + [f"{total:,.2f} $" if total != 0 else "-"]
        table_data[key] = amounts_with_total
    
    # Totaux et soldes
    table_data["Total des encaissements"] = [f"{value:,.2f} $" if value != 0 else "-" for value in total_encaissements]
    table_data["Total des d√©caissements"] = [f"{value:,.2f} $" if value != 0 else "-" for value in total_decaissements]
    solde_precedent_formatted = [f"{value:,.2f} $" if isinstance(value, (int, float)) and value != 0 else "-" for value in solde_precedent]
    table_data["Solde pr√©c√©dent"] = solde_precedent_formatted
    table_data["Solde du mois"] = [f"{value:,.2f} $" if value != 0 else "-" for value in solde_mois]
    table_data["Solde de tr√©sorerie (cumul)"] = [f"{value:,.2f} $" if value != 0 else "-" for value in solde_tresorerie_cumul]
    
    # Assurer que toutes les listes ont la m√™me longueur
    max_length = max(len(lst) for lst in table_data.values())
    for key in table_data:
        if len(table_data[key]) < max_length:
            difference = max_length - len(table_data[key])
            table_data[key] += [""] * difference  # Remplir avec des cha√Ænes vides si n√©cessaire
        elif len(table_data[key]) > max_length:
            table_data[key] = table_data[key][:max_length]  # Tronquer si trop long
    
    # Cr√©ation du DataFrame complet
    df_full = pd.DataFrame(table_data)
    df_full.set_index("Description", inplace=True)
    df_full = df_full.T  # Transposer pour avoir les mois comme colonnes
    
    # S√©paration en deux tableaux
    # Tableau 1 : Mois 1 √† Mois 5
    columns_part1 = ["Mois 1", "Mois 2", "Mois 3", "Mois 4", "Mois 5"]
    df_part1 = df_full[columns_part1]
    
    # Tableau 2 : Mois 6 √† Mois 12 + TOTAL
    columns_part2 = ["Mois 6", "Mois 7", "Mois 8", "Mois 9", "Mois 10", "Mois 11", "Mois 12", "TOTAL"]
    df_part2 = df_full[columns_part2]
    
    ### 3. Ajouter la section Budget Pr√©visionnel de Tr√©sorerie ###
    # (Les deux tableaux seront ajout√©s dans telecharger_document_complet())
    
    ### 4. Affichage des tableaux s√©par√©s ###
    st.subheader("Budget pr√©visionnel de tr√©sorerie")
    st.table(df_part1)
    
    st.subheader("Budget pr√©visionnel de tr√©sorerie (suite)")
    st.table(df_part2)
    
    # ----------------------------
    # Stockage des r√©sultats dans les donn√©es
    # ----------------------------
    
    data["budget_previsionnel_tresorerie"] = {
        "encaissements": encaissements,
        "decaissements": decaissements,
        "total_encaissements": total_encaissements,
        "total_decaissements": total_decaissements,
        "solde_precedent": solde_precedent,
        "solde_mois": solde_mois,
        "solde_tresorerie_cumul": solde_tresorerie_cumul
    }
    
    # Enregistrer les donn√©es dans la session
    st.session_state["data"] = data   
    
    # ----------------------------
    # Pr√©paration des donn√©es d'exportation pour Budget Pr√©visionnel de Tr√©sorerie Partie 1
    # ----------------------------
    
    export_table_budget_part1 = []
    headers_part1 = df_part1.columns.tolist()
    export_table_budget_part1.append(dict(zip(["Description"] + headers_part1, [""] + headers_part1)))
    for index, row in df_part1.iterrows():
        export_table_budget_part1.append(dict(zip(["Description"] + headers_part1, [index] + row.tolist())))
    
    # Stocker les donn√©es d'exportation pour Partie 1
    st.session_state['export_data_budget_previsionnel_tresorerie_part1'] = {
        "projet": projet,
        "porteur_projet": porteur_projet,
        "table_data": export_table_budget_part1
    }
    
    # ----------------------------
    # Pr√©paration des donn√©es d'exportation pour Budget Pr√©visionnel de Tr√©sorerie Partie 2
    # ----------------------------
    
    export_table_budget_part2 = []
    headers_part2 = df_part2.columns.tolist()
    export_table_budget_part2.append(dict(zip(["Description"] + headers_part2, [""] + headers_part2)))
    for index, row in df_part2.iterrows():
        export_table_budget_part2.append(dict(zip(["Description"] + headers_part2, [index] + row.tolist())))
    
    # Stocker les donn√©es d'exportation pour Partie 2
    st.session_state['export_data_budget_previsionnel_tresorerie_part2'] = {
        "projet": projet,
        "porteur_projet": porteur_projet,
        "table_data": export_table_budget_part2
    }
    
    # ----------------------------
    # Section Export
    # ----------------------------
    
    st.header("Exporter les donn√©es")
    
    # Bouton pour t√©l√©charger le fichier Word complet contenant tous les tableaux avec une cl√© unique
    if st.button("T√©l√©charger le Document Word Complet", key="download_word_complet_budget_previsionnel_tresorerie"):
        telecharger_document_complet()

# Section 15 : Tableaux d'Analyse Financi√®re
def page_douze_tableaux():
    st.title("Tableaux d'Analyse Financi√®re")
    
    data = st.session_state["data"]
    
    st.markdown("""
    Cette section pr√©sente les principaux indicateurs financiers bas√©s sur les donn√©es que vous avez saisies.
    """)
    
    total_ca_annee1 = data.get("total_chiffre_affaires_annee1", 0.0)
    total_charges_fixes_annee1 = data.get("total_charges_fixes_annee1", 0.0)
    total_charges_variables = data.get("total_charges_variables", 0.0)
    total_salaires_annee1 = data.get("total_salaires_annee1", 0.0)
    charges_sociales_dirigeant_annee1 = data.get("charges_sociales", {}).get("dirigeants", {}).get("annee1", 0.0)
    charges_sociales_employes_annee1 = data.get("charges_sociales", {}).get("employes", {}).get("annee1", 0.0)
    amortissements_annee1 = data.get("amortissements", {}).get("total", {}).get("annee1", 0.0)
    
    # Calcul du r√©sultat net
    resultat_net = total_ca_annee1 - total_charges_fixes_annee1 - total_charges_variables - total_salaires_annee1 - charges_sociales_dirigeant_annee1 - charges_sociales_employes_annee1 - amortissements_annee1
    
    # Capacit√© d'autofinancement (simplifi√©e)
    capacite_autofinancement = resultat_net + amortissements_annee1  # Les amortissements sont r√©int√©gr√©s
    
    st.write(f"**R√©sultat Net Ann√©e 1 :** {resultat_net:.2f} $")
    st.write(f"**Capacit√© d'Autofinancement Ann√©e 1 :** {capacite_autofinancement:.2f} $")
    
    # Vous pouvez r√©p√©ter les calculs pour les ann√©es 2 et 3 si n√©cessaire
    
    st.write("---")
    
    st.session_state["data"] = data
    
def load_and_split_documents(file_path):
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1500, chunk_overlap=200)
    raw_documents = PyPDFLoader(file_path).load()
    return text_splitter.split_documents(raw_documents)

def create_faiss_db(documents):
    if not documents:
        raise ValueError("Aucun document trouv√© pour cr√©er la base de donn√©es FAISS.")
    embeddings = OpenAIEmbeddings(openai_api_key=api_key )
    return FAISS.from_documents(documents, embeddings)

def generate_section(system_message, query, documents, combined_content, tableau_financier, rubriques, business_model,bm_precedent,nom_entreprise,precedent_chain_of, generation=1):
    
    MODEL="gpt-4o"
    MAX_TOKENS_PER_REQUEST = 150
    utilisateur = get_current_user()
    
    # Calculer les tokens restants
    tokens_purchased = utilisateur.get('tokens_purchased', 0)
    tokens_consumed = utilisateur.get('tokens_consumed', 0)
    tokens_remaining = tokens_purchased - tokens_consumed

    # Fusionner tous les textes des documents pour le comptage des tokens
    # Compter les tokens dans la requ√™te (query + full_text)
    full_text = " ".join([doc.page_content for doc in documents])
    tokens_in_input = count_tokens(query + full_text, MODEL)   
    
    memory = ConversationBufferMemory(memory_key='chat_history', return_messages=True)
    llm = ChatOpenAI(openai_api_key=api_key )
    if generation ==1 :
        if documents:
            db = create_faiss_db(documents)
            if db:
                success, message = consommer_tokens(st.session_state['user_info'], tokens_in_input)
                if not success:
                    return ""
                # Consommer les tokens
            
            
            qa_chain = ConversationalRetrievalChain.from_llm(llm, retriever=db.as_retriever(), memory=memory, verbose=True)
            combined_info = qa_chain.run({'question': query})
             #tokens_utilises = combined_info['usage']['total_tokens']
            tokens_in_ = count_tokens(combined_info +""+query  , MODEL)
            tokens_utilises = tokens_in_+ tokens_in_input + MAX_TOKENS_PER_REQUEST
            # Consommer les tokens
            success, message = consommer_tokens(st.session_state['user_info'], tokens_utilises )
            if not success:
                return ""
            
            full_contents = combined_content + " " + combined_info + " " + query+ " "+ json.dumps(tableau_financier)+ "Voici le nom de l'entreprise:"+ nom_entreprise
            full_content = combined_content + " " + combined_info + " " + query+ " "+ tableau_financier + "Voici le nom de l'entreprise:"+ nom_entreprise
 
        else:
            full_content = combined_content + " " + query+ "Dans ce donn√©es o√π vous allez recuperer les informations generales de l'entreprises "+ tableau_financier+ "utiliser les donn√©es financier pour enrichir les arguments aussi sachez que le nom du projet  correspond nom de l'entreprise. Voici les autres informations √† considerer c'est les informations du business model et ca doit etre tenue compte lors de la generation:"+ json.dumps(business_model)+ "Voici le nom de l'entreprise:"+nom_entreprise
            full_contents = combined_content + " " + query+ "Dans ce donn√©es o√π vous allez recuperer les informations generales de l'entreprises "+ json.dumps(tableau_financier)+ "utiliser les donn√©es financier pour enrichir les arguments aussi sachez que le nom du projet  correspond nom de l'entreprise. Voici les autres informations √† considerer c'est les informations du business model et ca doit etre tenue compte lors de la generation:"+ json.dumps(business_model)+ "Voici le nom de l'entreprise:"+nom_entreprise
           
    else: 
        if documents:
            db = create_faiss_db(documents)
            if db:
                success, message = consommer_tokens(st.session_state['user_info'], tokens_in_input)
                if not success:
                    return ""
                # Consommer les tokens
            qa_chain = ConversationalRetrievalChain.from_llm(llm, retriever=db.as_retriever(), memory=memory, verbose=True)
            combined_info = qa_chain.run({'question': query})
            
            tokens_in_ = count_tokens(combined_info +""+query  , MODEL)
            tokens_utilises = tokens_in_+ tokens_in_input + MAX_TOKENS_PER_REQUEST
            # Consommer les tokens
            success, message = consommer_tokens(st.session_state['user_info'], tokens_utilises )
            if not success:
                return ""
            
            full_content = combined_content + " " + combined_info + " " + query+ " "+json.dumps(tableau_financier)+ "Voici le nom de l'entreprise:"+ nom_entreprise
            full_contents= combined_content + " " + combined_info + " " + query+ " "+json.dumps(tableau_financier) + "Voici le nom de l'entreprise:"+ nom_entreprise
            prompt = f"""
            voici le prompt √† execut√© pour cette sections:{query}
            Voici le nom de l'entreptise :{nom_entreprise}
            voici les informations que vous avez generer precedement dans d'autres section, combiner des informations entrer par l'utlisateurs: {combined_content}
            Voici les donn√©es provenu d'une autres sources qui est un document: {combined_info}
            Voici les donn√©es qui nous ont permit de genener le business model: {rubriques}
            Voici le business model generer:{business_model}
            Voici les donn√©es des analyses financiers: {tableau_financier}
            Voici les analyses du business model et ce qu'il faudra ameliorer dans le bussiness model: {precedent_chain_of}
            Voici le business plan genener precedement: {bm_precedent}
            """
            full_contents=prompt 
            full_content=prompt 
            
        else:
            full_content = combined_content + " " + query+ "Dans ce donn√©es o√π vous allez recuperer les informations generales de l'entreprises "+ json.dumps(tableau_financier)+ "utiliser les donn√©es financier pour enrichir les arguments aussi sachez que le nom du projet  correspond nom de l'entreprise. Voici les autres informations √† considerer c'est les informations du business model et ca doit etre tenue compte lors de la generation:"+ json.dumps(business_model)+ "Voici le nom de l'entreprise:"+""+nom_entreprise
            full_contents = combined_content + " " + query+ "Dans ce donn√©es o√π vous allez recuperer les informations generales de l'entreprises "+ json.dumps(tableau_financier)+ "utiliser les donn√©es financier pour enrichir les arguments aussi sachez que le nom du projet  correspond nom de l'entreprise. Voici les autres informations √† considerer c'est les informations du business model et ca doit etre tenue compte lors de la generation:"+ json.dumps(business_model)+ "Voici le nom de l'entreprise:"+""+nom_entreprise
            
            prompt = f"""
                voici le prompt √† execut√© pour cette sections:{query}
                Voici le nom de l'entreptise :{nom_entreprise}
                voici les informations que vous avez generer precedement dans d'autres section, combiner des informations entrer par l'utlisateurs: {combined_content}
                Voici les donn√©es qui nous ont permit de genener le business model: {rubriques}
                Voici le business model generer :{business_model}
                Voici les donn√©es des analyses financiers: {tableau_financier}
                Voici les analyses du business plan et ce qu'il faudra ameliorer dans le bussiness plan: {precedent_chain_of}
                Voici le business plan genener precedement: {bm_precedent}
                """
            full_content=prompt 
            full_contents=prompt 
    # Calculer les tokens n√©cessaires (entr√©e + r√©ponse pr√©vue)
    # Calculer le nombre de tokens dans l'entr√©e utilisateur
    tokens_in_input = count_tokens(full_contents, MODEL)
    tokens_needed = tokens_in_input + MAX_TOKENS_PER_REQUEST
    # V√©rifier si l'utilisateur a assez de tokens
    
    if tokens_remaining < tokens_needed:
        st.error("Vous n'avez pas assez de tokens pour effectuer cette action. Veuillez acheter plus de tokens.")
        return
    else:    
        completion = openai.ChatCompletion.create(
            model=MODEL,
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": full_content}
            ],
            temperature=0.9
        )
        tokens_utilises = completion['usage']['total_tokens']
        # Consommer les tokens
        success, message = consommer_tokens(st.session_state['user_info'], tokens_utilises)
        if not success:
            return ""
        return completion['choices'][0]['message']['content']

def extract_company_name(text):
    match = re.search(r"(nom de l'entreprise est|Nom de l'entreprise|La vision de) ([\w\s]+)", text, re.IGNORECASE)
    if match:
        return match.group(2).strip()
    return "Nom de l'entreprise non trouv√©"

def generate_markdown(results):
    markdown_content = "# Business Plan\n\n"
    for sec_name, content in results.items():
        markdown_content += f"## {sec_name}\n\n"
        paragraphs = content.split('\n')
        for paragraph in paragraphs:
            if paragraph.startswith('- '):  # Points de liste
                markdown_content += f"- {paragraph[2:]}\n"
            elif re.match(r'^\d+\.\s', paragraph):  # Points num√©rot√©s
                markdown_content += f"{paragraph}\n"
            else:
                markdown_content += f"{paragraph}\n"
        markdown_content += "\n"

    return markdown_content

def convert_table_to_markdown(table_name, table_data):
    """
    Convertit les donn√©es d'une table en format Markdown.
    
    Args:
        table_name (str): Nom de la table.
        table_data (list of dict): Donn√©es de la table.
    
    Returns:
        str: Table au format Markdown.
    """
    if not table_data:
        return "Aucune donn√©e disponible."
    
    # Extraire les en-t√™tes de colonnes
    headers = list(table_data[0].keys())
    markdown_table = "| " + " | ".join(headers) + " |\n"
    markdown_table += "| " + " | ".join(['---'] * len(headers)) + " |\n"
    
    # Ajouter les lignes
    for row in table_data:
        markdown_table += "| " + " | ".join([str(row.get(header, "")) for header in headers]) + " |\n"
    
    return markdown_table

def convert_all_tables_to_markdown(tables):
    """
    Convertit toutes les tables en une seule cha√Æne de caract√®res au format Markdown.
    
    Args:
        tables (dict): Dictionnaire contenant les tables financi√®res.
    
    Returns:
        str: Toutes les tables concat√©n√©es en Markdown.
    """
    markdown = ""
    for table_name, table_data in tables.items():
        markdown += f"### {table_name}\n\n"
        markdown += convert_table_to_markdown(table_name, table_data) + "\n\n"
    return markdown


def markdown_to_word_via_text(markdown_content):
    # Cr√©er un nouveau document Word
    doc = Document()
    doc.add_heading('Business Plan', 0)

    # Diviser le contenu en lignes
    lines = markdown_content.split('\n')
    table_data = []
    inside_table = False
    plain_text_output = []  # Pour collecter le texte brut

    for line in lines:
        line = line.strip()
        if not line:
            # Si ligne vide et donn√©es de table en cours, ajouter le tableau au document
            if table_data:
                num_cols = len(table_data[0])
                table = doc.add_table(rows=len(table_data), cols=num_cols)
                for i, row in enumerate(table_data):
                    for j, cell in enumerate(row):
                        table.cell(i, j).text = cell.strip()
                table_data = []
                inside_table = False
            continue

        if line.startswith('## '):
            # Sous-titre
            doc.add_heading(line[3:], level=2)
            plain_text_output.append(line[3:])
        elif line.startswith('- '):
            # Liste √† puces
            doc.add_paragraph(line[2:], style='List Bullet')
            plain_text_output.append(f"‚Ä¢ {line[2:]}")
        elif re.match(r'^\d+\.\s', line):
            # Liste num√©rot√©e
            doc.add_paragraph(line, style='List Number')
            plain_text_output.append(line)
        elif line.startswith('|'):
            # D√©tection des lignes de tableau (√©vite les lignes de s√©paration)
            if re.match(r'\|?\s*[-:]+\s*\|', line):
                inside_table = True
                continue  # Ignorer les lignes de s√©paration
            else:
                inside_table = True
                table_data.append([cell.strip() for cell in line.split('|')[1:-1]])  # Enlever les bords vides et espaces
        elif line.startswith('**') and line.endswith('**'):
            # Texte en gras
            paragraph = doc.add_paragraph()
            run = paragraph.add_run(line[2:-2])
            run.bold = True
            plain_text_output.append(line[2:-2])
        elif not inside_table:
            # Paragraphe normal
            doc.add_paragraph(line)
            plain_text_output.append(line)

    # Traiter les donn√©es de table restantes
    if table_data:
        num_cols = len(table_data[0])
        table = doc.add_table(rows=len(table_data), cols=num_cols)
        for i, row in enumerate(table_data):
            for j, cell in enumerate(row):
                table.cell(i, j).text = cell.strip()

    # Sauvegarder le document dans un buffer m√©moire
    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)

    return "\n".join(plain_text_output), buffer

# Fonction pour convertir un dictionnaire en texte format√©
def format_table_data(data, title):
    if not data:
        return f"{title} : Aucune donn√©e disponible.\n"
    
    text = f"{title} :\n"
    for key, value in data.items():
        if isinstance(value, dict):
            text += f"  {key} :\n"
            for sub_key, sub_value in value.items():
                text += f"    {sub_key} : {sub_value}\n"
        elif isinstance(value, list):
            text += f"  {key} : {', '.join(map(str, value))}\n"
        else:
            text += f"  {key} : {value}\n"
    return text + "\n"

def page_generation_business_plan():
    # Cr√©ation des colonnes pour le titre et le bouton
    st.title("G√©n√©rateur de Business Plan")

            
    #st.write(st.session_state["produits_data"])

    uploaded_file = st.file_uploader("T√©l√©chargez votre fichier PDF", type="pdf")
    user_text_input = st.text_area("Entrez des informations suppl√©mentaires ou un texte alternatif:", height=200)
    

    if uploaded_file or user_text_input:
        documents = []
        combined_content = user_text_input  

        if uploaded_file:
            file_path = "uploaded_document.pdf"
            with open(file_path, "wb") as f:
                f.write(uploaded_file.read())
            documents = load_and_split_documents(file_path)



        # Cr√©er un dictionnaire pour stocker les r√©sultats
        results = {}
        
        # Messages syst√®me et requ√™tes pour chaque section
        system_messages = {
            "Couverture": """
                G√©n√©rer cette section du business plan:
                Voici les textes √† afficher sous forme :
                
                # Canevas de Plans d‚ÄôAffaires

                Nom du projet ou entreprise
                
                 

            """,
            "Sommaire": """
                G√©n√©rer cette section du business plan:
                Voici les textes √† afficher sous forme de liste:
                ## Sommaire
                I. R√©sum√© Ex√©cutif ¬´ Executive Summary ¬ª / Pitch
                II. Pr√©sentation de votre entreprise/projet
                III. Pr√©sentation de l‚Äôoffre de produit(s) et/ou service(s)  
                IV. √âtude de march√©
                V. Strat√©gie marketing, communication et politique commerciale
                VI. Moyens de production et organisation 
                VII. √âtude des risques/hypoth√®ses  
                VIII. Plan financier 
                
            """,
            "R√©sum√© Ex√©cutif": """
                G√©n√©rer cette section du business plan:
                
                ## I. R√©sum√© Ex√©cutif ¬´ Executive Summary ¬ª / Pitch
                G√©n√©rer deux grands paragraphes avec plusieurs lignes, l'objectif pour cette section est de :
                Attirer l'attention du lecteur en 5 minutes et lui donner envie d'en savoir plus.
                D√©crire le projet en quelques phrases simples et impactantes.
                Ne pas essayer de tout couvrir, soyez concis et pr√©cis.

                Les elements cl√©s √† generer et qui doivent etre contenue dans les paragraphes:
                - **Pr√©sentation de la PME** : Nom de l‚Äôentreprise et br√®ve description du service/produit fourni.
                - **Pr√©sentation des porteurs de projet** : Nom, pr√©nom, coordonn√©es, situation de famille, formation et dipl√¥mes, exp√©rience professionnelle, activit√©s extra ou para-professionnelles (Joindre CV en annexe).
                - **Potentiel en termes de taille et de profit** : D√©montrez par des calculs simples comment votre PME fera du profit.
                - **Votre besoin financier**.

            """,
            "Pr√©sentation de votre entreprise": """
                G√©n√©rer cette section du business plan:

                ## II. Pr√©sentation de votre entreprise/projet

                G√©n√©rer 6 grands paragraphes avec plusieurs lignes, l'objectif pour cette section est de :
                - Parler de votre entreprise/projet de mani√®re plus d√©taill√©e.
                - Pr√©senter l‚Äô√©quipe manag√©riale cl√©.

                Les elements cl√©s √† generer et qui doivent etre contenue dans les paragraphes:
                - **Informations g√©n√©rales sur la PME** :
                - Forme juridique : Ets, Sarlu, Sarl, SAS, SA.
                - Si√®ge social : Adresse juridique de l‚Äôentreprise.
                - Coordonn√©es bancaires : Num√©ro de compte (avec 23 chiffres) de l‚Äôentreprise ainsi que la banque o√π est log√© le compte (joindre le Swift Copy).
                - Couverture g√©ographique de l‚Äôentreprise et ses activit√©s : lieu d‚Äôimplantation de l‚Äôentreprise et diff√©rentes zones couvertes.
                - **Description d√©taill√©e de la PME et objectifs de son projet** : Pr√©sentez l‚Äôentreprise, son origine, introduisez ses atouts/opportunit√©s et enfin d√©crivez le projet de l‚Äôentreprise.
                - **Stade d‚Äôavancement de l‚Äôentreprise ou du projet** :
                - D√©crivez ce qui a √©t√© fait et les projets √† mener dans le futur.
                - Parlez du niveau de maturit√© de la PME ou du projet.
                - Lister √©ventuellement les financements d√©j√† acquis.
                - **Pr√©sentation de l‚Äô√©quipe manag√©riale** : D√©crivez l‚Äôorganigramme et l‚Äôorganisation des ressources humaines, pr√©sentez les associ√©s de la PME ainsi que leurs parts sociales.
                - **Analyse SWOT** : Forces, faiblesses, opportunit√©s, contraintes/menaces. de preference ca doit etre presenter sous forme de tableau.
                - **Business Mod√®le Canevas** : Ins√©rer votre business mod√®le canevas avec les 9 rubriques bien remplies.

            """,
            "Pr√©sentation de l‚Äôoffre de produit": """
                G√©n√©rer cette section du business plan :

                ## III. Pr√©sentation de l‚Äôoffre de produit(s) et/ou service(s)
                G√©n√©rer 6 grands paragraphes avec plusieurs lignes, l'objectif pour cette section est de :
                - Parler de l‚Äôoffre de produits/services de mani√®re d√©taill√©e.
                - Pr√©senter la proposition de valeur diff√©renciante de la PME ou de son offre.

                Les elements cl√©s √† generer et qui doivent etre contenue dans les paragraphes:
                - **Noms du/des produit(s) ou service(s)**.
                - **Besoins identifi√©s** sur le march√© auxquels r√©pond votre offre.
                - **Description du/des produit(s) ou service(s)** r√©pondant √† ces besoins.
                - **Proposition de valeur unique**.
                - **Prise en compte de l‚Äôaspect genre** dans le fonctionnement de la PME ou du projet de l‚Äôentreprise.
                - **Prise en compte de l‚Äôenvironnement** :
                - Identification des impacts environnementaux et sociaux des activit√©s de la PME.
                - Mise en place de mesures d‚Äôatt√©nuation.
                - Existence d‚Äôun Plan de Gestion Environnemental et Social.

            """,
            "√âtude de march√©": """
                G√©n√©rer cette section du business plan :

                ## IV. √âtude de march√©

                G√©n√©rer 8 grands paragraphes avec plusieurs lignes, l'objectif pour cette section est de :
                - Expliquer la m√©thode utilis√©e pour la conduite de l‚Äô√©tude de march√©.
                - Pr√©senter les r√©sultats de l‚Äô√©tude de march√©.

                Les elements cl√©s √† generer et qui doivent etre contenue dans les paragraphes, les numeros doivent etre respecter:
                1. **Description des hypoth√®ses et m√©thodes de l‚Äô√©tude de march√©** :
                - Citer le produit ou service pr√©-cibl√©.
                - Pr√©ciser le march√© pr√©-cibl√© : secteur d‚Äôactivit√© dans lequel le produit s‚Äôinscrit.
                - Pr√©senter les m√©thodes choisies pour r√©aliser l‚Äô√©tude de march√© : questionnaire, √©tude documentaire, √©tude de concurrence, √©tude m√©tier, etc.

                2. **Approche g√©n√©rale du march√© (pr√©cisez les sources √† chaque √©tape)** :
                - D√©crire le march√©, ses principales caract√©ristiques, historique et perspectives.
                - Pr√©senter les r√©sultats : march√© cible, march√© potentiel, march√© r√©el.
                - Pr√©senter les menaces et opportunit√©s du march√©.

                3. **Caract√©ristiques de la demande** :
                - Pr√©senter le volume de la demande, l‚Äô√©volution de la demande sur le march√© cibl√© et les tendances de consommation.
                - D√©tailler les diff√©rents types de client√®le (segmentation).
                - Lister les prescripteurs (partenaires qui peuvent apporter des clients).

                4. **Caract√©ristiques de l‚Äôoffre** :
                - Pr√©senter la concurrence directe et indirecte : lister les concurrents et d√©crire leur offre de services/produits.
                - Lister les points forts et les points faibles de la concurrence : avantages concurrentiels de la concurrence sur le march√©.
                - Comment vous diff√©renciez-vous de ces concurrents indirects ?

                5. **Caract√©ristiques de l‚Äôenvironnement** :
                - D√©crire l‚Äôenvironnement des affaires relatif au d√©veloppement de la PME/projet : le cadre l√©gal, r√©glementaire, les facteurs externes au march√© lui-m√™me, l‚Äô√©volution des technologies.
                - Lister les menaces et opportunit√©s li√©es √† l‚Äôenvironnement.

                6. **Partenariats** :
                - Pr√©ciser les partenariats strat√©giques nou√©s ou √† mettre en place pour faire cro√Ætre l‚Äôentreprise : il peut s‚Äôagir des acteurs en amont et en aval de votre cha√Æne de production/distribution (fournisseurs, distributeurs, partenaires commerciaux, etc.).

                7. **Cr√©ation d‚Äôemplois** :
                - D√©montrer l‚Äôimpact de la PME/projet en termes d‚Äôemplois directs d√©j√† cr√©√©s ou √† cr√©er.

                8. **Chiffre d‚Äôaffaires** :
                - Pr√©ciser la part de march√© vis√©e et le volume de chiffre d‚Äôaffaires pr√©visible √† horizon 1 an, 2 ans, 3 ans.

            """,
            "Strat√©gie Marketing":  """
                G√©n√©rer cette section du business plan :

                ## V. Strat√©gie Marketing, Communication et Politique Commerciale

                G√©n√©rer cette section, l'objectif pour cette section est de :
                - Pr√©senter la strat√©gie marketing et commerciale √† court et moyen terme.

                Les elements cl√©s √† generer et qui doivent etre contenue dans les paragraphes, les numeros doivent etre respecter:
                1. **Choix de segments de client√®le** :
                - Expliquer quels segments de client√®le vont constituer la cible de la PME/projet et pourquoi ce choix.
                - Expliquer dans les grandes lignes le positionnement strat√©gique.

                2. **Marketing-mix (4P : Produit ‚Äì Prix ‚Äì Place ‚Äì Promotion)** :
                - Pr√©senter la politique marketing g√©n√©rale :
                    - Choix du nom, du logo et des couleurs.
                    - Choix du message, du slogan.
                - Tableau synth√©tique des segments :

                    | Segment de client√®le | Produit propos√© | Positionnement en termes de prix | Lieu de distribution | Style et mode de communication |
                    |-----------------------|-----------------|----------------------------------|-----------------------|---------------------------------|
                    | Segment 1            |                 |                                  |                       |                                 |
                    | Segment 2            |                 |                                  |                       |                                 |
                    | Segment 3            |                 |                                  |                       |                                 |

                3. **Plan Marketing et actions commerciales**  :
                - Pr√©senter le plan marketing : lister les actions commerciales et actions de communication pr√©vues ; inscrire leur co√ªt si possible.

                    | Types d‚Äôactions       | Janvier | F√©vrier | Mars | ... | D√©cembre |
                    |-----------------------|---------|---------|------|-----|----------|
                    | Action 1             |         |         |      |     |          |
                    | Action 2             |         |         |      |     |          |

                4. **Moyens et partenaires sollicit√©s** :
                - Lister les moyens √† mettre en ≈ìuvre et les partenaires sollicit√©s pour les actions commerciales et de communication.

            """,
            "Moyens de production et organisation": """
                G√©n√©rer cette section du business plan:

                ## VI. Moyens de production et organisation

                G√©n√©rer 4 grands paragraphes avec plusieurs lignes, l'objectif pour cette section est de :
                - Sp√©cifier les moyens humains et mat√©riels √† disposition de la PME.

                Les elements cl√©s √† generer et qui doivent etre contenue dans les paragraphes:
                - **Locaux** :
                - Liste des locaux, bail de location, conditions n√©goci√©es, co√ªt, utilit√©.
                - **Mat√©riel** :
                - Liste, mode d‚Äôacquisition ou de location, co√ªt, utilit√©, renouvellement.
                - **Moyens humains** :
                - Personnel, plannings, horaires, co√ªt, charges sociales ; indiquer une r√©partition claire des t√¢ches.
                - **Fournisseurs et sous-traitants** :
                - Liste des fournisseurs et/ou sous-traitants, devis obtenus, tarifs, conditions n√©goci√©es.

            """,
            "√âtude des risques": """
                G√©n√©rer cette section du business plan:

                ## VII. √âtude des risques/hypoth√®ses

                G√©n√©rer cette section, l'objectif pour cette section est de :
                - Pr√©senter la synth√®se des risques et mesures d‚Äôatt√©nuation identifi√©s quant au d√©veloppement de la PME/projet.

                Les elements cl√©s √† generer et qui doivent etre contenue dans les paragraphes:
                - **Tableau des risques** :

                | Nature de risque          | Description              | Strat√©gie de traitement    |
                |---------------------------|--------------------------|----------------------------|
                | Risques li√©s √† l‚Äôenvironnement g√©n√©ral |                          |                            |
                | Risques li√©s au march√©    |                          |                            |
                | Risques li√©s aux outils   |                          |                            |
                | Risques li√©s aux personnes |                          |                            |
                | Risques li√©s aux tiers    |                          |                            |
                | Autres risques (sp√©cifiez) |                          |                            |

                √âtude des risques/hypoth√®ses:

            """,
            "Annexes": """
                G√©n√©rer cette section du business plan:
                
                ## VII. √âtude des risques/hypoth√®ses

                ### Objectif
                - Pr√©senter la synth√®se des risques et mesures d‚Äôatt√©nuation identifi√©s quant au d√©veloppement de la PME/projet.

                ### Contenu attendu
                - **Tableau des risques** :

                | Nature de risque          | Description              | Strat√©gie de traitement    |
                |---------------------------|--------------------------|----------------------------|
                | Risques li√©s √† l‚Äôenvironnement g√©n√©ral |                          |                            |
                | Risques li√©s au march√©    |                          |                            |
                | Risques li√©s aux outils   |                          |                            |
                | Risques li√©s aux personnes |                          |                            |
                | Risques li√©s aux tiers    |                          |                            |
                | Autres risques (sp√©cifiez) |                          |                            |

            """,
            "Annexes": """
                G√©n√©rer cette section du business plan:

                7 ‚Äì ANNEXES
                Renvoyer en annexe les documents trop volumineux ou difficiles √† lire : - - - -
                √©tude de march√© compl√®te,
                contrats,
                conditions

                Annexes du projet:

            """
        }

        queries = {
            "Couverture": "Afficher seulement le texte fournies",
            "Sommaire": "Afficher seulement le texte fournises",
            "R√©sum√© Ex√©cutif": "D√©crire bri√®vement le projet, son potentiel de profit et les qualifications de l'√©quipe.",
            "Pr√©sentation de votre entreprise": "Fournir une analyse d√©taill√©e de l'entreprise, incluant son origine, ses objectifs et son organisation.",
            "Pr√©sentation de l‚Äôoffre de produit": "D√©crire les produits ou services, leur proposition de valeur unique, et les besoins du march√© qu'ils adressent.",
            "√âtude de march√©": "Analyser le march√© cible, les tendances de consommation, et la concurrence directe et indirecte.",
            "Strat√©gie Marketing": "D√©crire la strat√©gie marketing, y compris les segments cibles, le positionnement, le mix marketing (Produit, Prix, Place, Promotion) et les actions commerciales pr√©vues.",
            "Moyens de production et organisation": "D√©crire les moyens humains et mat√©riels, ainsi que l'organisation op√©rationnelle de l'entreprise.",
            "√âtude des risques": "Identifier les risques potentiels et proposer des strat√©gies pour les att√©nuer.",
            "Annexes": "Inclure tous les documents annexes pertinents pour √©tayer le plan d'affaires."
        }

        # Espaces r√©serv√©s pour chaque section
        placeholders = {name: st.empty() for name in system_messages.keys()}
        
        data = st.session_state.get("data", {})
        tables = data.get("tables", {})

        section_order = list(system_messages.keys())
        # D√©finir le point de s√©paration
        split_section = "Pr√©sentation de votre entreprise"
        # S√©parer les sections en deux groupes
        first_part = []
        second_part = []
        for section in section_order:
            if section == split_section:
                first_part.append(section)
                second_part = section_order[section_order.index(section)+1:]
                break
            else:
                first_part.append(section)

        
        results_first_part = {}
        results_second_part = {}
        
        

        # R√©cup√©rer les donn√©es export√©es de toutes les sections
        # R√©cup√©rer les donn√©es export√©es de toutes les sections 
        export_data_investissements = st.session_state.get('export_data_investissements', {})
        export_data_salaires = st.session_state.get('export_data_salaires_charges_sociales', {})
        export_data_amortissements = st.session_state.get('export_data_detail_amortissements', {})
        export_data_compte = st.session_state.get('export_data_compte_resultats_previsionnel', {})
        export_data_soldes = st.session_state.get('export_data_soldes_intermediaires_de_gestion', {})
        export_data_capacite = st.session_state.get('export_data_capacite_autofinancement', {})
        export_data_seuil = st.session_state.get('export_data_seuil_rentabilite_economique', {})
        export_data_bfr = st.session_state.get('export_data_besoin_fonds_roulement', {})
        export_data_plan_financement = st.session_state.get('export_data_plan_financement_trois_ans', {})
        export_data_budget_part1 = st.session_state.get('export_data_budget_previsionnel_tresorerie_part1', {})
        export_data_budget_part2 = st.session_state.get('export_data_budget_previsionnel_tresorerie_part2', {})
        

        # Concat√©ner toutes les sections
        final_text = ""
        final_text += format_table_data(export_data_investissements, "Investissements et financements")
        final_text += format_table_data(export_data_salaires, "Salaires et Charges Sociales")
        final_text += format_table_data(export_data_amortissements, "D√©tail des Amortissements")
        final_text += format_table_data(export_data_compte, "Compte de r√©sultats pr√©visionnel")
        final_text += format_table_data(export_data_soldes, "Soldes interm√©diaires de gestion")
        final_text += format_table_data(export_data_capacite, "Capacit√© d'autofinancement")
        final_text += format_table_data(export_data_seuil, "Seuil de rentabilit√© √©conomique")
        final_text += format_table_data(export_data_bfr, "Besoin en fonds de roulement")

        # Ajouter les nouvelles sections
        final_text += format_table_data(export_data_plan_financement, "Plan de financement √† trois ans")
        final_text += format_table_data(export_data_budget_part1, "Budget pr√©visionnel de tr√©sorerie")
        final_text += format_table_data(export_data_budget_part2, "Budget pr√©visionnel de tr√©sorerie(suite)")


        st.session_state.get('business_plan_markdown_content1') 
        st.session_state.get('business_plan_markdown_content2')
        
        MODEL="gpt-4o"
        MAX_TOKENS_PER_REQUEST = 150
        utilisateur = get_current_user()
        # Calculer les tokens restants
        tokens_purchased = utilisateur.get('tokens_purchased', 0)
        tokens_consumed = utilisateur.get('tokens_consumed', 0)
        tokens_remaining = tokens_purchased - tokens_consumed
        # Fusionner tous les textes des documents pour le comptage des tokens
        # Compter les tokens dans la requ√™te (query + full_text)
        full_text = " ".join([doc.page_content for doc in documents])

    
        # G√©n√©rer toutes les sections automatiquement
        if st.button("Generer business plan"):
            
            for section_name in first_part:
                with st.spinner(f"G√©n√©ration de {section_name}..."):
                    system_message = system_messages[section_name]
                    query = queries[section_name]
                            
                    full_contents = combined_content + " " + query+ "" + system_message+ json.dumps(final_text)+ full_text+ ""+ json.dumps(st.session_state["produits_data"])+json.dumps(serialize_membres(st.session_state["membres"]))
                    tokens_in_input = count_tokens(full_contents , MODEL) 
                    tokens_needed = tokens_in_input + MAX_TOKENS_PER_REQUEST
                    
                    # V√©rifier si l'utilisateur a assez de tokens
                    if tokens_remaining < tokens_needed:
                        st.error("Vous n'avez pas assez de tokens pour effectuer cette action. Veuillez acheter plus de tokens.")
                        return
                    
                    try:
                        # V√©rifier si la section est "Couverture" ou "Sommaire"
                        if section_name in ["Couverture", "Sommaire"]:
                            results_first_part[section_name] = generate_section(system_message, query, "", "", "", rubriques="", business_model="",bm_precedent="",nom_entreprise=st.session_state.nom_entreprise,precedent_chain_of="", generation=1)

                        
                        else:
                            results_first_part[section_name] = generate_section(system_message, query, documents, combined_content+"Voici la liste de membre de l'entreprise:"+json.dumps(serialize_membres(st.session_state["membres"])), final_text, rubriques="", business_model=st.session_state.business_model_precedent, bm_precedent="",nom_entreprise=st.session_state.nom_entreprise,precedent_chain_of="" ,generation=1)

                    
                    except ValueError as e:
                        results_first_part[section_name] = f"Erreur: {str(e)}"
                    
                    combined_content += " " + results_first_part[section_name]
                    placeholders[section_name].markdown(f"\n\n{results_first_part[section_name]}")
                    
            st.session_state.markdown_content1= generate_markdown(results_first_part)
           
            
            
            # G√©n√©ration de la seconde partie
            for section_name in second_part:
            
                with st.spinner(f"G√©n√©ration de {section_name}..."):
                    system_message = system_messages[section_name]
                    query = queries[section_name]
                    full_contents = combined_content + " " + query+ "" + system_message+ json.dumps(final_text)+ full_text+ json.dumps(st.session_state["produits_data"])+json.dumps(serialize_membres(st.session_state["membres"]))
                    tokens_in_input = count_tokens(full_contents , MODEL) 
                    tokens_needed = tokens_in_input + MAX_TOKENS_PER_REQUEST
                    
                    # V√©rifier si l'utilisateur a assez de tokens
                    if tokens_remaining < tokens_needed:
                        st.error("Vous n'avez pas assez de tokens pour effectuer cette action. Veuillez acheter plus de tokens.")
                        return
                    
                    try:
                        results_second_part[section_name] = generate_section(system_message, query, documents, combined_content+"Voici la liste de membre de l'entreprise:"+json.dumps(serialize_membres(st.session_state["membres"])), final_text, rubriques="", business_model=st.session_state.business_model_precedent,bm_precedent="",nom_entreprise=st.session_state.nom_entreprise,precedent_chain_of="", generation=1)
                    except ValueError as e:
                        results_second_part[section_name] = f"Erreur: {str(e)}"
                    
                    combined_content += " " + results_second_part[section_name]  
                    placeholders[section_name].markdown(f"\n\n{results_second_part[section_name]}")

            st.session_state.markdown_content2= generate_markdown(results_second_part)
            
            
            
           
        if st.session_state.get('business_plan_precedent'):
            # G√©n√©ration du Business Plan et t√©l√©chargement des fichiers 
            if st.button("Ameliorer business plan"):
                html_content = chain_of_thougtht("BP",st.session_state.montant_projet,st.session_state.nom_entreprise, st.session_state.business_model_precedent , st.session_state["produits_data"], Analisis=final_text, previousbp=st.session_state.business_plan_precedent, generation=2)
                st.write(html_content)
                if html_content:
                    for section_name in first_part:
                        with st.spinner(f"G√©n√©ration de {section_name}..."):
                            system_message = system_messages[section_name]
                            query = queries[section_name]
                            full_contents = combined_content + " " + query+ "" + system_message+ json.dumps(final_text)+ full_text + json.dumps(st.session_state["produits_data"])+json.dumps(serialize_membres(st.session_state["membres"]))+html_content
                            tokens_in_input = count_tokens(full_contents , MODEL) 
                            tokens_needed = tokens_in_input + MAX_TOKENS_PER_REQUEST
                            
                            # V√©rifier si l'utilisateur a assez de tokens
                            if tokens_remaining < tokens_needed:
                                st.error("Vous n'avez pas assez de tokens pour effectuer cette action. Veuillez acheter plus de tokens.")
                                return
                            
                            try:
                                # V√©rifier si la section est "Couverture" ou "Sommaire"
                                if section_name in ["Couverture", "Sommaire"]:
                                    results_first_part[section_name] = generate_section(system_message, query, documents, combined_content+"Voici la liste de membre de l'entreprise:"+json.dumps(serialize_membres(st.session_state["membres"])), "", rubriques="", business_model="",bm_precedent="",nom_entreprise=st.session_state.nom_entreprise,precedent_chain_of=html_content, generation=2)
                                else:
                                    results_first_part[section_name] = generate_section(system_message, query, documents, combined_content+"Voici la liste de membre de l'entreprise:"+json.dumps(serialize_membres(st.session_state["membres"])), final_text, rubriques=st.session_state["produits_data"], business_model=st.session_state.business_model_precedent,bm_precedent=st.session_state.business_plan_precedent, nom_entreprise=st.session_state.nom_entreprise,precedent_chain_of=html_content, generation=2)
                            except ValueError as e:
                                results_first_part[section_name] = f"Erreur: {str(e)}"
                            
                            combined_content += " " + results_first_part[section_name]
                            placeholders[section_name].markdown(f"\n\n{results_first_part[section_name]}")

                    st.session_state.markdown_content1= generate_markdown(results_first_part)
                    
                    
                    # G√©n√©ration de la seconde partie
                    
                    for section_name in second_part:
                        with st.spinner(f"G√©n√©ration de {section_name}..."):
                            system_message = system_messages[section_name]
                            query = queries[section_name]
                            full_contents = combined_content + " " + query+ "" + system_message+ json.dumps(final_text)+ full_text+json.dumps(st.session_state["produits_data"])+json.dumps(serialize_membres(st.session_state["membres"]))
                            tokens_in_input = count_tokens(full_contents  , MODEL) 
                            tokens_needed = tokens_in_input + MAX_TOKENS_PER_REQUEST
                            
                            # V√©rifier si l'utilisateur a assez de tokens
                            if tokens_remaining < tokens_needed:
                                st.error("Vous n'avez pas assez de tokens pour effectuer cette action. Veuillez acheter plus de tokens.")
                                return
                            
                            try:
                                results_second_part[section_name] = generate_section(system_message, query, documents, combined_content+"Voici la liste de membre de l'entreprise:" +json.dumps(serialize_membres(st.session_state["membres"])), final_text, rubriques=st.session_state["produits_data"], business_model=st.session_state.business_model_precedent,bm_precedent=st.session_state.business_plan_precedent, nom_entreprise=st.session_state.nom_entreprise,precedent_chain_of=html_content,generation=2)
                            except ValueError as e:
                                results_second_part[section_name] = f"Erreur: {str(e)}"
                            
                            combined_content += " " + results_second_part[section_name]
                            placeholders[section_name].markdown(f"\n\n{results_second_part[section_name]}")
                    
                    st.session_state.markdown_content2 = generate_markdown(results_second_part)



                

        if st.button("Creer un fichier √† telecharger") or st.session_state.get('business_plan_markdown_content1') or st.session_state.get('business_plan_markdown_content2'):
            
            pdf = MarkdownPdf(toc_level=2)
            pdf.add_section(Section(st.session_state.markdown_content2))
            pdf.meta["title"] = "Business Plan" 
            pdf_file_path = "business_plan.pdf"
            pdf.save(pdf_file_path)
            
            
            
            from docx.oxml.ns import qn
            from docx.oxml import OxmlElement


            from docx import Document
            import re

            def markdown_to_word_via_text(markdown_contents, doc):
                doc.add_heading('Business Plan', 0)

                # Diviser le contenu en lignes
                lines = markdown_contents.split('\n')
                table_data = []
                inside_table = False

                for line in lines:
                    line = line.strip()
                    if not line:
                        # Si ligne vide et donn√©es de table en cours, ajouter le tableau au document
                        if table_data:
                            add_table_with_borders(doc, table_data)
                            table_data = []
                            inside_table = False
                        continue

                    if line.startswith('# '):  # Titre niveau 1
                        doc.add_heading(line[2:], level=1)
                    elif line.startswith('## '):  # Titre niveau 2
                        doc.add_heading(line[3:], level=2)
                    elif line.startswith('### '):  # Titre niveau 3
                        doc.add_heading(line[4:], level=3)
                    elif line.startswith('#### '):  # Titre niveau 4
                        doc.add_heading(line[5:], level=4)
                    elif re.match(r'^\d+\.\s', line):  # Liste num√©rot√©e
                        # V√©rifier s'il y a du texte en gras dans la liste num√©rot√©e
                        match = re.match(r'^(\d+\.\s)(\*\*.+?\*\*)', line)
                        if match:
                            paragraph = doc.add_paragraph(style='List Number')
                            paragraph.add_run(match.group(1))  # Num√©ro
                            bold_run = paragraph.add_run(match.group(2)[2:-2])  # Texte en gras sans `**`
                            bold_run.bold = True
                        else:
                            doc.add_paragraph(line, style='List Number')
                    elif line.startswith('- ') or line.startswith('‚Ä¢'):  # Liste √† puces
                        match = re.match(r'^(‚Ä¢|-)\s\*\*(.+?)\*\*(.*)', line)
                        if match:
                            paragraph = doc.add_paragraph(style='List Bullet')
                            bold_run = paragraph.add_run(match.group(2))  # Texte en gras
                            bold_run.bold = True
                            if match.group(3):  # Texte apr√®s le gras
                                paragraph.add_run(match.group(3).strip())
                        else:
                            doc.add_paragraph(line[2:], style='List Bullet')
                    elif line.startswith('|'):  # D√©tection des lignes de tableau
                        if re.match(r'\|?\s*[-:]+\s*\|', line):
                            inside_table = True
                            continue  # Ignorer les lignes de s√©paration
                        else:
                            inside_table = True
                            table_data.append([cell.strip() for cell in line.split('|')[1:-1]])  # Enlever les bords vides et espaces
                    elif re.match(r'^\*\*.+?\*\*\s*:', line):  # Texte en gras suivi de texte normal
                        match = re.match(r'^\*\*(.+?)\*\*\s*:(.*)', line)
                        if match:
                            paragraph = doc.add_paragraph()
                            bold_run = paragraph.add_run(match.group(1))  # Texte en gras
                            bold_run.bold = True
                            if match.group(2):  # Texte normal apr√®s le `:`
                                paragraph.add_run(f":{match.group(2)}")
                    elif re.match(r'^\*\*.+?\*\*$', line):  # Texte enti√®rement en gras
                        paragraph = doc.add_paragraph()
                        bold_run = paragraph.add_run(line[2:-2])  # Texte sans `**`
                        bold_run.bold = True
                    elif re.match(r'^\*\*.+?\*\*\s[\d.,]+\s?[$$%]$', line):  # Nombres avec symboles mon√©taires
                        match = re.match(r'^\*\*(.+?)\*\*\s([\d.,]+\s?[$$%])$', line)
                        if match:
                            paragraph = doc.add_paragraph()
                            bold_run = paragraph.add_run(match.group(1))  # Texte en gras
                            bold_run.bold = True
                            paragraph.add_run(f" {match.group(2)}")  # Montant avec symbole
                    elif not inside_table:  # Paragraphe normal
                        doc.add_paragraph(line)

                # Traiter les donn√©es de table restantes
                if table_data:
                    add_table_with_borders(doc, table_data)

            def add_table_with_borders(doc, table_data):
                """
                Ajoute un tableau au document Word avec bordures et gestion du texte en gras dans les cellules.
                """
                num_cols = len(table_data[0])
                table = doc.add_table(rows=len(table_data), cols=num_cols)
                table.style = 'Table Grid'  # Appliquer un style de tableau avec bordures

                for i, row in enumerate(table_data):
                    for j, cell in enumerate(row):
                        cell_content = table.cell(i, j).paragraphs[0]
                        parts = re.split(r'(\*\*.+?\*\*)', cell)  # Diviser par texte en gras
                        for part in parts:
                            if part.startswith('**') and part.endswith('**'):  # Texte en gras
                                run = cell_content.add_run(part[2:-2])
                                run.bold = True
                            else:  # Texte normal
                                cell_content.add_run(part.strip())




            # Ajouter la cr√©ation et le t√©l√©chargement du fichier Word
            
            doc = Document()
            markdown_to_word_via_text(st.session_state.markdown_content1, doc)
            #st.write(st.session_state.markdown_content2)
            produits_data = st.session_state.get("produits_data", [])
                # Boucler √† travers chaque produit
            for produit in produits_data:
                nom_produit = produit.get("nom_produit", "Produit")
                business_models = produit.get("business_models", [])
                
                for bm in business_models:
                    description_html = bm.get("description", "")
            
                    generer_docx_business_model(
                        nom_entreprise=st.session_state.nom_entreprise,
                        date_bmc=datetime.date.today(),
                        contenu_business_model=description_html,
                        nom_produit=nom_produit, 
                        doc=doc,
                        value=2)
 

            markdown_to_word_via_text(st.session_state.markdown_content2, doc)
           # st.write(st.session_state.markdown_content2)
            
            st.session_state.business_plan_precedent = st.session_state.markdown_content1+""+ st.session_state.markdown_content2
            #st.write(st.session_state.business_plan_precedent)
            
            # doc.add_paragraph(content_result)
            
            # V√©rifier et ajouter le contenu
        

            # Ajouter les sections du Business Plan


            # R√©cup√©rer les donn√©es des tableaux depuis la session Streamlit
            # R√©cup√©rer les donn√©es des tableaux depuis la session Streamlit
            export_data_investissements = st.session_state.get('export_data_investissements', {})
            export_data_salaires = st.session_state.get('export_data_salaires_charges_sociales', {})
            export_data_amortissements = st.session_state.get('export_data_detail_amortissements', {})
            export_data_compte = st.session_state.get('export_data_compte_resultats_previsionnel', {})
            export_data_soldes = st.session_state.get('export_data_soldes_intermediaires_de_gestion', {})
            export_data_capacite = st.session_state.get('export_data_capacite_autofinancement', {})
            export_data_seuil = st.session_state.get('export_data_seuil_rentabilite_economique', {})
            export_data_bfr = st.session_state.get('export_data_besoin_fonds_roulement', {})
            

            # Ajouter une section pour les tableaux
            doc.add_heading('R√©sum√© des Donn√©es Financi√®res', level=1)

            # Fonction pour ajouter un tableau dans le document Word
            def ajouter_tableau(donnees, headers, titre):
                """
                Ajoute un tableau au document Word avec bordures et gestion du texte en gras dans les cellules.
                """
                doc.add_heading(titre, level=2)
                table = doc.add_table(rows=1, cols=len(headers))
                table.style = 'Light List Accent 1'
                table.alignment = WD_TABLE_ALIGNMENT.CENTER

                # Ajouter les en-t√™tes
                hdr_cells = table.rows[0].cells
                for i, header in enumerate(headers):
                    hdr_cells[i].text = header
                    for paragraph in hdr_cells[i].paragraphs:
                        for run in paragraph.runs:
                            run.font.bold = True
                    hdr_cells[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

                # Ajouter les donn√©es des tableaux
                for row in donnees:
                    row_cells = table.add_row().cells
                    for i, header in enumerate(headers):
                        cell_value = row.get(header, "")
                        cell_text = str(cell_value)  # Convertir en cha√Æne de caract√®res
                        row_cells[i].text = cell_text
                        row_cells[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT

                # Ajouter une note
                doc.add_paragraph()
                doc.add_paragraph("Les r√©sultats sont calcul√©s selon les donn√©es fournies.")

            # Ajouter les diff√©rents tableaux
            if export_data_investissements.get("table_data"):
                ajouter_tableau(export_data_investissements["table_data"], ["Investissements", "Taux (%)", "Dur√©e (mois)", "Montant ($)"], "Investissements et Financements")
            if export_data_salaires.get("table_data"):
                ajouter_tableau(export_data_salaires["table_data"], ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"], "Salaires et Charges Sociales")
            if export_data_amortissements.get("amortissements"):
                ajouter_tableau(export_data_amortissements["amortissements"], ["Amortissement", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"], "D√©tail des Amortissements")
            if export_data_compte.get("table_data"):
                ajouter_tableau(export_data_compte["table_data"], ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"], "Compte de R√©sultats Pr√©visionnel")
            if export_data_soldes.get("table_data"):
                ajouter_tableau(export_data_soldes["table_data"], ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"], "Soldes Interm√©diaires de Gestion")
            if export_data_capacite.get("table_data"):
                ajouter_tableau(export_data_capacite["table_data"], ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"], "Capacit√© d'Autofinancement")
            if export_data_seuil.get("table_data"):
                ajouter_tableau(export_data_seuil["table_data"], ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"], "Seuil de Rentabilit√© √âconomique")
            if export_data_bfr.get("table_data"):
                ajouter_tableau(export_data_bfr["table_data"], ["Analyse clients / fournisseurs", "D√©lai jours", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"], "Besoin en Fonds de Roulement")

            # **Nouvelles sections ajout√©es¬†:**

            # Ajouter la section Plan de Financement √† Trois Ans
            export_data_plan_financement = st.session_state.get('export_data_plan_financement_trois_ans', {})
            if export_data_plan_financement.get("table_data"):
                ajouter_tableau(
                    export_data_plan_financement["table_data"],
                    ["Description", "Ann√©e 1", "Ann√©e 2", "Ann√©e 3"],
                    "Plan de Financement √† Trois Ans"
                )

            # Ajouter la section Budget Pr√©visionnel de Tr√©sorerie Partie 1
            export_data_budget_part1 = st.session_state.get('export_data_budget_previsionnel_tresorerie_part1', {})
            if export_data_budget_part1.get("table_data"):
                ajouter_tableau(
                    export_data_budget_part1["table_data"],
                    ["Description", "Mois 1", "Mois 2", "Mois 3", "Mois 4", "Mois 5", "TOTAL"],
                    "Budget Pr√©visionnel de Tr√©sorerie - Partie 1"
                )

            # Ajouter la section Budget Pr√©visionnel de Tr√©sorerie Partie 2
            export_data_budget_part2 = st.session_state.get('export_data_budget_previsionnel_tresorerie_part2', {})
            if export_data_budget_part2.get("table_data"):
                ajouter_tableau(
                    export_data_budget_part2["table_data"],
                    ["Description", "Mois 6", "Mois 7", "Mois 8", "Mois 9", "Mois 10", "Mois 11", "Mois 12", "TOTAL"],
                    "Budget Pr√©visionnel de Tr√©sorerie - Partie 2"
                )

            # Enregistrer le document dans un buffer
            word_buffer = BytesIO()
            doc.save(word_buffer)
            word_buffer.seek(0)

            # T√©l√©charger les fichiers g√©n√©r√©s
            st.success("Le PDF et le document Word ont √©t√© g√©n√©r√©s avec succ√®s.")
            #with open(pdf_file_path, "rb") as f:
                #st.download_button("T√©l√©chargez le PDF", f, file_name="business_plan.pdf", mime="application/pdf")

            st.download_button("T√©l√©chargez le document Word", word_buffer, file_name="business_plan.docx", mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document")

    # S√©lection du type d'entreprise et nom





# Initialiser les variables dans la session si ce n'est pas d√©j√† fait
if 'business_models' not in st.session_state:
    st.session_state.business_models = {}
    
if 'personas' not in st.session_state:
    st.session_state.personas = {}
    
if 'problem_trees' not in st.session_state:
    st.session_state.problem_trees = {}
    
if 'analyse_marches' not in st.session_state:
    st.session_state.analyse_marches = {}
    
if 'facteurs_limitants' not in st.session_state:
    st.session_state.facteurs_limitants = {}
    
if 'concurrences' not in st.session_state:
    st.session_state.concurrences = {}

if 'date_bmc_generate' not in st.session_state:
    st.session_state.date_bmc_generate = datetime.date.today()

# --- Variable interne nb_products
if "nb_products" not in st.session_state:
    st.session_state["nb_products"] = 1
# --- La liste "produits_data" stockant tous les produits
if "produits_data" not in st.session_state:
    st.session_state["produits_data"] = []
    
if 'selected_idx_produit' not in st.session_state:
    st.session_state['selected_idx_produit'] = 0  # Valeur par d√©faut (premier produit)
if 'previous_selected_idx_produit' not in st.session_state:
    st.session_state['previous_selected_idx_produit'] = None



# Initialiser les variables dans la session si ce n'est pas d√©j√† fait
    # Initialiser 'business_model_precedent' comme un dictionnaire vide si non pr√©sent
if 'business_model_precedent' not in st.session_state:
    st.session_state['business_model_precedent'] = {}

# Initialiser les variables dans la session si ce n'est pas d√©j√† fait
if 'rubriques_initiales' not in st.session_state:
    st.session_state.rubriques_initiales = ""
    
# Initialiser les variables dans la session si ce n'est pas d√©j√† fait
if 'markdown_content2' not in st.session_state:
    st.session_state.markdown_content2 = ""
    
# Initialiser les variables dans la session si ce n'est pas d√©j√† fait
if 'markdown_content1' not in st.session_state:
    st.session_state.markdown_content1 = ""
    
    
    
    
    
# Initialisation des variables dans session_state
if 'type_entreprise' not in st.session_state:
    st.session_state.type_entreprise = "PME"  # Valeur par d√©faut

if 'montant_projet' not in st.session_state:
    st.session_state.montant_projet = ""

if 'nom_entreprise' not in st.session_state:
    st.session_state.nom_entreprise = ""
 

# Noms des nouveaux onglets du Business Model Canvas
business_model_tab_names = [
    "Collecte des Donn√©es",
    "G√©n√©rer Business Model",

]

# Fonctions correspondantes pour les nouveaux onglets
business_model_sections = [
    page_collecte_donnees,
    page_generer_business_model,
   
]

# Liste des noms d'onglets existants

# Mise √† jour des noms d'onglets
tab_names = [
    "Informations G√©n√©rales", "Besoins de D√©marrage", "Financement",
    "Charges Fixes", "Chiffre d'Affaires", "Charges Variables",
    "Fonds de Roulement", "Salaires", "Rentabilit√©", "Tr√©sorerie","CT","Equipes","G√©n√©ration du Business Plan",
    "Investissements et Financements", "Salaires et Charges Sociales", "D√©tail des Amortissements",
    "Compte de R√©sultats Pr√©visionnel", "Soldes Interm√©diaires de Gestion",
    "Capacit√© d'Autofinancement", "Seuil de Rentabilit√© √âconomique",
    "Besoin en Fonds de Roulement", "Plan de Financement sur 3 Ans",
    "Budget Pr√©visionnel de Tr√©sorerie"
]

# Mise √† jour de la liste des fonctions correspondantes
sections = [
    page_informations_generales, page_besoins_demarrage, page_financement,
    page_charges_fixes, page_chiffre_affaires, page_charges_variables,
    page_fonds_roulement, page_salaires, page_rentabilite, page_tresorerie, 
    ct_model, ajouter_informations_personnel,
    page_generation_business_plan, page_investissements_et_financements,
    page_salaires_charges_sociales, page_detail_amortissements,
    page_compte_resultats_previsionnel, page_soldes_intermediaires_de_gestion,
    page_capacite_autofinancement, page_seuil_rentabilite_economique,
    page_besoin_fonds_roulement, page_plan_financement_trois_ans,
    page_budget_previsionnel_tresorerie
]

# Trouver l'index de "G√©n√©ration du Business Plan"
try:
    index_generation_bp = tab_names.index("G√©n√©ration du Business Plan")
except ValueError:
    st.error("L'onglet 'G√©n√©ration du Business Plan' n'a pas √©t√© trouv√© dans la liste des onglets.")
    index_generation_bp = len(tab_names)  # Ajouter √† la fin si non trouv√©

# Ins√©rer les nouveaux onglets avant "G√©n√©ration du Business Plan"
tab_names =business_model_tab_names + tab_names
sections = business_model_sections + sections


# Fonction de rafra√Æchissement du Business Plan
def refresh_business_plan():
    """
    R√©initialise toutes les variables de session li√©es au Business Plan.
    """
    keys_to_reset = [
        'business_plan_markdown_content1',
        'business_plan_markdown_content2',
        'business_plan_precedent',
        'markdown_content1',
        'markdown_content2',
        'business_models',
        'personas',
        'problem_trees',
        'analyse_marches',
        'facteurs_limitants',
        'concurrences',
        'type_entreprise',
        'montant_projet',
        'nom_entreprise',
        'nb_products',
        'produits_data',
        'selected_idx_produit',
        'previous_selected_idx_produit',
        'rubriques_initiales',
        'business_model_precedent',
        'data',
        'tables'
    ]
    
    for key in keys_to_reset:
        if key in st.session_state:
            del st.session_state[key]
    
    # R√©initialiser 'data' et 'tables' √† des valeurs par d√©faut
    st.session_state['data'] = {}
    st.session_state['tables'] = {}
    
    st.success("Le Business Plan a √©t√© r√©initialis√© avec succ√®s.")



# ---------------------- INITIALISATION SESSION ----------------------
if "login_attempts" not in st.session_state:
    st.session_state["login_attempts"] = {}  # {email: nb_tentatives}
if "locked_until" not in st.session_state:
    st.session_state["locked_until"] = {}    # {email: timestamp}
    
def initialize_session():
    """Initialise les variables de session n√©cessaires."""
    if 'jwt_token' not in st.session_state:
        st.session_state['jwt_token'] = None
    if 'otp_required' not in st.session_state:
        st.session_state['otp_required'] = False
    if 'authenticated' not in st.session_state:
        st.session_state['authenticated'] = False
    if 'user_info' not in st.session_state:
        st.session_state['user_info'] = None
    if 'page' not in st.session_state:
        st.session_state['page'] = 'Connexion'

 
 
 # ---------------------- FONCTIONS UTILITAIRES ----------------------
def format_number(num):
    """
    Formate un nombre en utilisant des suffixes K, M, B, T, Q pour des milliers, millions, milliards,
    trillions, quadrillions respectivement. Pour les nombres sup√©rieurs √† un quadrillion, utilise la notation scientifique.

    Args:
        num (int ou float): Le nombre √† formater.

    Returns:
        str: Le nombre format√© avec le suffixe appropri√© ou en notation scientifique.
    """
    try:
        num = float(num)
    except (ValueError, TypeError):
        return str(num)

    abs_num = abs(num)  # G√©rer les nombres n√©gatifs

    if abs_num >= 1_000_000_000_000_000:
        # Notation scientifique pour les nombres >= 1 quadrillion
        return f"{num:.2e}"
    elif abs_num >= 1_000_000_000_000:
        return f"{num / 1_000_000_000_000:.1f}Q"  # Quadrillion
    elif abs_num >= 1_000_000_000:
        return f"{num / 1_000_000_000:.1f}B"  # Billion (milliard)
    elif abs_num >= 1_000_000:
        return f"{num / 1_000_000:.1f}M"  # Million
    elif abs_num >= 1_000:
        return f"{num / 1_000:.1f}K"  # Thousand (mille)
    else:
        return f"{int(num)}"
 
 
 


# ---------------------- FONCTIONS JWT ----------------------
def create_jwt_token(user_id, is_admin=False):
    """
    Cr√©e un token JWT avec un champ is_admin, un champ user_id,
    valide pendant JWT_EXP_DELTA_SECONDS.
    """
    payload = {
        "user_id": str(user_id),
        "is_admin": is_admin,
        "exp": datetime.datetime.utcnow() + datetime.timedelta(seconds=JWT_EXP_DELTA_SECONDS),
    }
    token = jwt.encode(payload, JWT_SECRET_KEY, algorithm=JWT_ALGORITHM)
    return token

def decode_jwt_token(token):
    """D√©code un token JWT et renvoie le payload ou None si invalide."""
    try:
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
        return payload
    except InvalidTokenError as e:
        logging.error(f"Erreur JWT : {e}")
        return None

def get_current_user():
    """
    R√©cup√®re l'utilisateur courant √† partir des donn√©es g√©r√©es par streamlit-authenticator.
    Retourne l'objet utilisateur (depuis MongoDB) ou None si pas connect√©.
    """
    # R√©cup√®re le nom d'utilisateur depuis session_state, g√©r√© par streamlit-authenticator
    username = st.session_state.get("username", None)
    if not username:
        return None

    # Requ√™te MongoDB pour obtenir les informations de l'utilisateur
    user = users_collection.find_one({"email": username})
    return user



# ---------------------- FONCTION UTILITAIRE ----------------------
def get_client_ip():
    """
    Dans un d√©ploiement Streamlit, la r√©cup√©ration de l‚ÄôIP peut √™tre non trivial.
    Ici on renvoie une IP fictive (ou 127.0.0.1).
    En production, adapter via des headers HTTP ou via un reverse proxy.
    """
    return "127.0.0.1"

def envoyer_email(to_email, subject, content):
    message = MIMEMultipart()
    message['From'] = EMAIL_ADDRESS
    message['To'] = to_email
    message['Subject'] = subject
    message.attach(MIMEText(content, 'html'))
    
    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
        server.send_message(message)
        server.quit()
        logging.info(f"Email envoy√© √† {to_email} pour le sujet: {subject}")
        return True
    except Exception as e:
        logging.error(f"Erreur lors de l'envoi de l'email √† {to_email} : {e}")
        st.error(f"Erreur lors de l'envoi de l'email: {e}")
        return False
    
    
def envoyer_email_piecejointes(to_email, subject, content, attachments=None):
    """
    Envoie un email avec des pi√®ces jointes (seules les images sont autoris√©es).

    Args:
        to_email (str): Adresse email du destinataire.
        subject (str): Sujet de l'email.
        content (str): Contenu de l'email (HTML).
        attachments (list of UploadedFile or str): Liste des fichiers √† attacher.

    Returns:
        bool: True si l'email a √©t√© envoy√© avec succ√®s, False sinon.
    """
    try:
        message = MIMEMultipart()
        message['From'] = EMAIL_ADDRESS
        message['To'] = to_email
        message['Subject'] = subject
        message.attach(MIMEText(content, 'html'))
        logging.info(f"Cr√©ation de l'email avec sujet '{subject}' √† '{to_email}'.")

        # Traitement des pi√®ces jointes
        if attachments:
            logging.info(f"Nombre de pi√®ces jointes √† traiter: {len(attachments)}")
            for attachment in attachments:
                try:
                    # D√©terminer le nom et l'extension
                    if isinstance(attachment, str):
                        filename = os.path.basename(attachment)
                        ext = filename.split('.')[-1].lower()
                        logging.debug(f"Pi√®ce jointe (str): {filename}")
                    else:
                        filename = attachment.name
                        ext = filename.split('.')[-1].lower()
                        logging.debug(f"Pi√®ce jointe (UploadedFile): {filename}")

                    # V√©rifier l'extension
                    if ext not in ALLOWED_EXTENSIONS:
                        error_msg = f"Le type de fichier '{ext}' pour '{filename}' n'est pas autoris√©. Seules les images sont accept√©es."
                        st.error(error_msg)
                        logging.error(error_msg)
                        return False

                    # V√©rifier la taille
                    if isinstance(attachment, str):
                        if not os.path.exists(attachment):
                            error_msg = f"Le fichier '{attachment}' n'existe pas."
                            st.error(error_msg)
                            logging.error(error_msg)
                            return False
                        file_size = os.path.getsize(attachment)
                        logging.debug(f"Taille du fichier '{filename}': {file_size} bytes")
                    else:
                        # Si 'size' est disponible
                        if hasattr(attachment, 'size'):
                            file_size = attachment.size
                            logging.debug(f"Taille du fichier '{filename}': {file_size} bytes")
                        else:
                            # Lire le contenu pour obtenir la taille
                            file_content = attachment.read()
                            file_size = len(file_content)
                            attachment.seek(0)  # R√©initialiser le pointeur du fichier apr√®s lecture
                            logging.debug(f"Taille du fichier '{filename}': {file_size} bytes")

                    if file_size > MAX_ATTACHMENT_SIZE:
                        error_msg = f"Le fichier '{filename}' d√©passe la taille maximale autoris√©e de 10 Mo."
                        st.error(error_msg)
                        logging.error(error_msg)
                        return False

                    # Cr√©ation de la pi√®ce jointe
                    if isinstance(attachment, str):
                        with open(attachment, "rb") as f:
                            part = MIMEBase('application', 'octet-stream')
                            part.set_payload(f.read())
                    else:
                        part = MIMEBase('application', 'octet-stream')
                        part.set_payload(attachment.read())

                    # Encodage en Base64
                    encoders.encode_base64(part)

                    # D√©termination du type MIME
                    mime_type, _ = mimetypes.guess_type(filename)
                    if mime_type:
                        maintype, subtype = mime_type.split('/', 1)
                        part.set_type(mime_type)
                        logging.debug(f"Type MIME pour '{filename}': {mime_type}")
                    else:
                        maintype, subtype = 'application', 'octet-stream'
                        part.set_type('application/octet-stream')
                        logging.debug(f"Type MIME par d√©faut pour '{filename}': application/octet-stream")

                    part.add_header('Content-Disposition', f'attachment; filename="{filename}"')
                    message.attach(part)
                    logging.info(f"Pi√®ce jointe ajout√©e: {filename}")

                except Exception as e:
                    logging.error(f"Erreur lors de l'ajout de la pi√®ce jointe '{filename}' : {e}")
                    st.error(f"Erreur lors de l'ajout de la pi√®ce jointe '{filename}' : {e}")
                    return False

        # Envoi de l'email
        try:
            server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
            server.starttls()
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            server.send_message(message)
            server.quit()
            logging.info(f"Email envoy√© √† {to_email} pour le sujet: {subject}")
            return True
        except Exception as e:
            logging.error(f"Erreur lors de l'envoi de l'email √† {to_email} : {e}")
            st.error(f"Erreur lors de l'envoi de l'email: {e}")
            return False

    except Exception as e:
        logging.error(f"Erreur g√©n√©rale dans envoyer_email_piecejointes : {e}")
        st.error(f"Erreur g√©n√©rale lors de l'envoi de l'email : {e}")
        return False


# ---------------------- FONCTIONS GESTION TENTATIVES ----------------------
def increment_login_attempts(email):
    """
    Incr√©mente le compteur de tentatives de connexion pour email.
    G√®re le blocage si >5 tentatives.
    """
    attempts = st.session_state["login_attempts"].get(email, 0) + 1
    st.session_state["login_attempts"][email] = attempts
    logging.warning(f"Tentative √©chou√©e {attempts} pour {email}")

    # Au bout de 5 tentatives -> pause 3 secondes
    if attempts == 5:
        st.warning("Vous avez atteint 5 tentatives de connexion √©chou√©es. Attendez 3 secondes avant de r√©essayer.")
        time.sleep(3)
    elif attempts > 5:
        # Bloque 30 secondes
        st.warning("Trop de tentatives ! Vous √™tes bloqu√© pendant 30 secondes.")
        st.session_state["locked_until"][email] = time.time() + 30

        # Envoi email √† l'admin
        ip_address = get_client_ip()
        subject = "[Alerte Syst√®me] Trop de tentatives de connexion"
        content = f"""
        <h2>Tentatives de Connexion Suspicious</h2>
        <p>L'utilisateur avec l'email <b>{email}</b> vient de d√©passer 5 tentatives de connexion √©chou√©es.</p>
        <p>Adresse IP suspecte : <b>{ip_address}</b></p>
        <p>Veuillez prendre les mesures n√©cessaires (blocage IP, etc.).</p>
        """
        envoyer_email(ADMIN_EMAIL, subject, content)

def is_locked(email):
    """
    Retourne True si l'email est encore bloqu√©, False sinon.
    """
    if email not in st.session_state["locked_until"]:
        return False
    locked_until_ts = st.session_state["locked_until"][email]
    return time.time() < locked_until_ts


def ajouter_utilisateur(email, nom, mot_de_passe, role="user"):
    """
    Ajoute un utilisateur dans la base avec un r√¥le ('user', 'admin', ou 'super_admin').
    Par d√©faut, le r√¥le est 'user'.
    """
    try:
        # V√©rifier si l'email existe d√©j√†
        if users_collection.find_one({"email": email}):
            logging.warning(f"Tentative d'inscription avec un email existant : {email}")
            return False, "L'utilisateur existe d√©j√†."

        # Pr√©parer les identifiants pour le hachage
        credentials = {"usernames": {email: {"password": mot_de_passe}}}
        hashed_credentials = stauth.Hasher.hash_passwords(credentials)

        # Extraire le mot de passe hach√©
        hashed_password = hashed_credentials["usernames"][email]["password"]

        utilisateur = {
            "email": email,
            "nom": nom,
            "mot_de_passe": hashed_password,
            "tokens_purchased": 100,  # Par exemple : tokens par d√©faut √† l'inscription
            "tokens_consumed": 0,
            "is_blocked": False,
            "created_at": datetime.datetime.utcnow(),
            "role": role,
            "otp_validated": False  # Initialiser √† False
        }

        # Ins√©rer l'utilisateur dans la collection MongoDB
        users_collection.insert_one(utilisateur)

        # Envoyer un email de bienvenue (optionnel)
        contenu = f"""
        <h1>Bienvenue {nom}!</h1>
        <p>Merci de vous √™tre inscrit sur notre application.</p>
        <p>Votre r√¥le est : {role}</p>
        <p>Vous avez re√ßu 100 000 tokens par pour l'essaie.</p>
        """
        envoyer_email(email, "Bienvenue sur notre application", contenu)

        logging.info(f"Nouvel utilisateur ajout√© : {email} avec le r√¥le {role}")
        return True, "Utilisateur ajout√© avec succ√®s."

    except Exception as e:
        logging.error(f"Erreur lors de l'ajout de l'utilisateur {email} : {e}")
        return False, "Une erreur est survenue lors de l'ajout de l'utilisateur."


def verifier_utilisateur(email, mot_de_passe):
    """
    V√©rifie le couple email / mot_de_passe manuellement.
    G√®re is_blocked, tentatives de connexion, etc.
    Compatible avec un champ 'mot_de_passe' hach√© au format '$2b$...' stock√© en base.
    """
    try:
        if is_locked(email):
            st.error("Vous √™tes temporairement bloqu√©. Veuillez patienter avant de r√©essayer.")
            return False, None

        utilisateur = users_collection.find_one({"email": email})
        if not utilisateur:
            increment_login_attempts(email)
            return False, None

        if utilisateur.get('is_blocked', False):
            logging.warning(f"Tentative de connexion d'un utilisateur bloqu√© : {email}")
            st.error("Votre compte a √©t√© bloqu√©. Veuillez contacter l'administrateur.")
            return False, None

        hashed_pw = utilisateur.get('mot_de_passe', "")
        if not hashed_pw:
            # Le compte n'a pas de mot de passe (peut-√™tre Google)
            increment_login_attempts(email)
            return False, None
        
        # bcrypt.checkpw attend des bytes, donc on encode
        if bcrypt.checkpw(mot_de_passe.encode('utf-8'), hashed_pw.encode('utf-8')):
            # succ√®s -> reset attempts
            st.session_state["login_attempts"][email] = 0
            return True, utilisateur
        else:
            increment_login_attempts(email)
            return False, None

    except Exception as e:
        logging.error(f"Erreur lors de la v√©rification de l'utilisateur {email} : {e}")
        st.error(f"Erreur lors de la v√©rification de l'utilisateur : {e}")
        return False, None

def reinitialiser_mot_de_passe(email, nouveau_mot_de_passe):
    try:
        utilisateur = users_collection.find_one({"email": email})
        if utilisateur:
            hashed_password = bcrypt.hashpw(nouveau_mot_de_passe.encode('utf-8'), bcrypt.gensalt())
            users_collection.update_one(
                {"email": email},
                {"$set": {"mot_de_passe": hashed_password}}
            )
            # Envoyer un email de confirmation
            contenu = f"""
            <h1>Mot de passe r√©initialis√©</h1>
            <p>Votre mot de passe a √©t√© r√©initialis√© avec succ√®s.</p>
            """
            envoyer_email(email, "Mot de passe r√©initialis√©", contenu)
            logging.info(f"Mot de passe r√©initialis√© pour {email}")
            return True, "Mot de passe r√©initialis√© avec succ√®s."
        return False, "Utilisateur non trouv√©."
    except Exception as e:
        logging.error(f"Erreur lors de la r√©initialisation du mot de passe pour {email} : {e}")
        st.error(f"Erreur lors de la r√©initialisation du mot de passe : {e}")
        return False, "Une erreur est survenue lors de la r√©initialisation du mot de passe."

# ---------------------- FONCTIONS PAIEMENT (EXTRAITES DU CODE ORIGINAL) ----------------------
def creer_session_stripe(customer_id, amount_cents, success_url, cancel_url):
    try:
        session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            customer=customer_id,
            line_items=[{
                'price_data': {
                    'currency': 'usd',
                    'product_data': {
                        'name': 'Achat de Tokens',
                    },
                    'unit_amount': amount_cents,
                },
                'quantity': 10000,
            }],
            mode='payment',
            success_url=success_url,
            cancel_url=cancel_url,
        )
        return session.url
    except Exception as e:
        st.error(f"Erreur lors de la cr√©ation de la session Stripe: {e}")
        return None

def enregistrer_paiement(user_id, amount, tokens, payment_method, uploaded_file_url=None, status="Pending"):
    try:
        paiement = {
            "user_id": user_id,
            "amount": amount,
            "tokens_purchased": tokens,
            "payment_method": payment_method,
            "status": status,
            "timestamp": datetime.datetime.utcnow(),
            "uploaded_file_url": uploaded_file_url
        }
        db['payments'].insert_one(paiement)
        logging.info(f"Paiement enregistr√© pour l'utilisateur {user_id}, montant: {amount} USD, tokens: {tokens}, m√©thode: {payment_method}")
        return True, "Paiement enregistr√© avec succ√®s."
    except Exception as e:
        logging.error(f"Erreur lors de l'enregistrement du paiement pour l'utilisateur {user_id} : {e}")
        st.error(f"Erreur lors de l'enregistrement du paiement : {e}")
        return False, "Erreur lors de l'enregistrement du paiement."

def recuperer_historique_paiements(user_id):
    try:
        paiements = list(db['payments'].find({"user_id": user_id}).sort("timestamp", -1))
        return paiements
    except Exception as e:
        logging.error(f"Erreur lors de la r√©cup√©ration de l'historique des paiements pour l'utilisateur {user_id} : {e}")
        st.error(f"Erreur lors de la r√©cup√©ration des paiements : {e}")
        return []

def recuperer_dernier_paiement(user_id):
    paiements = recuperer_historique_paiements(user_id)
    if paiements:
        # Trier les paiements par timestamp d√©croissant
        paiements_sorted = sorted(paiements, key=lambda x: x['timestamp'], reverse=True)
        return paiements_sorted[0]
    return None

# ---------------------- FONCTIONS TOKENS & CONSOMMATION ----------------------
def consommer_tokens(utilisateur, tokens_utilises):
    try:
        tokens_purchased = utilisateur.get('tokens_purchased', 0)
        tokens_consumed = utilisateur.get('tokens_consumed', 0)
        tokens_remaining = tokens_purchased - tokens_consumed

        if tokens_remaining >= tokens_utilises:
            users_collection.update_one(
                {"_id": utilisateur['_id']},
                {"$inc": {"tokens_consumed": tokens_utilises}}
            )
            st.session_state['user_info']['tokens_consumed'] += tokens_utilises
            # Enregistrer la consommation dans la base
            enregistrer_consomation(utilisateur['_id'], tokens_utilises)
            logging.info(f"{tokens_utilises} tokens consomm√©s par l'utilisateur {utilisateur['email']}")
            return True, "Tokens consomm√©s avec succ√®s."
        else:
            logging.warning(f"Utilisateur {utilisateur['email']} a tent√© de consommer {tokens_utilises} tokens mais n'en a que {tokens_remaining}")
            st.error("Vous n'avez pas assez de tokens.")
            return False, "Tokens insuffisants."
    except Exception as e:
        logging.error(f"Erreur lors de la consommation de tokens pour l'utilisateur {utilisateur['email']} : {e}")
        st.error(f"Erreur lors de la consommation de tokens : {e}")
        return False, "Une erreur est survenue."

def enregistrer_consomation(user_id, tokens_utilises):
    try:
        consommation = {
            "user_id": user_id,
            "date": datetime.datetime.utcnow(),
            "tokens_consumed": tokens_utilises
        }
        consumption_collection.insert_one(consommation)
        logging.info(f"Consommation de {tokens_utilises} tokens enregistr√©e pour l'utilisateur {user_id}")
        return True
    except Exception as e:
        logging.error(f"Erreur lors de l'enregistrement de la consommation pour l'utilisateur {user_id} : {e}")
        st.error(f"Erreur lors de l'enregistrement de la consommation : {e}")
        return False

def recuperer_consomation(user_id, periode):
    try:
        aujourd_hui = datetime.datetime.utcnow()
        if periode == 'Jour':
            debut = aujourd_hui - datetime.timedelta(days=1)
            date_format = "%Y-%m-%d"
        elif periode == '2 Jours':
            debut = aujourd_hui - datetime.timedelta(days=2)
            date_format = "%Y-%m-%d"
        elif periode == 'Semaine':
            debut = aujourd_hui - datetime.timedelta(weeks=1)
            date_format = "%Y-%m-%d"
        elif periode == 'Mois':
            debut = aujourd_hui - datetime.timedelta(days=30)
            date_format = "%Y-%m"
        elif periode == '3 Mois':
            debut = aujourd_hui - datetime.timedelta(days=90)
            date_format = "%Y-%m"
        elif periode == '6 Mois':
            debut = aujourd_hui - datetime.timedelta(days=180)
            date_format = "%Y-%m"
        elif periode == 'Ann√©e':
            debut = aujourd_hui - datetime.timedelta(days=365)
            date_format = "%Y"
        else:
            debut = aujourd_hui - datetime.timedelta(days=30)  # par d√©faut
            date_format = "%Y-%m"

        pipeline = [
            {"$match": {
                "user_id": user_id,
                "date": {"$gte": debut, "$lte": aujourd_hui}
            }},
            {"$group": {
                "_id": {"$dateToString": {"format": date_format, "date": "$date"}},
                "tokens_consumed": {"$sum": "$tokens_consumed"}
            }},
            {"$sort": {"_id": 1}}
        ]

        result = list(consumption_collection.aggregate(pipeline))
        dates = [doc['_id'] for doc in result]
        tokens = [doc['tokens_consumed'] for doc in result]
        return dates, tokens
    except Exception as e:
        logging.error(f"Erreur lors de la r√©cup√©ration des consommations pour l'utilisateur {user_id} : {e}")
        st.error(f"Erreur lors de la r√©cup√©ration des consommations : {e}")
        return [], []

def afficher_tokens_sidebar(utilisateur):
    st.sidebar.subheader("Consommation de Tokens")
    tokens_purchased = utilisateur.get('tokens_purchased', 0)
    tokens_consumed = utilisateur.get('tokens_consumed', 0)
    tokens_remaining = tokens_purchased - tokens_consumed

    st.sidebar.write(f"**Tokens achet√©s :** {format_number(tokens_purchased)}")
    st.sidebar.write(f"**Tokens consomm√©s :** {format_number(tokens_consumed)}")
    st.sidebar.write(f"**Tokens restants :** {format_number(tokens_remaining)}")
    
    if tokens_purchased > 0:
        progress_value = min(tokens_consumed / tokens_purchased, 1.0)
    else:
        progress_value = 0
    st.sidebar.progress(progress_value)
    st.sidebar.write(f"**{progress_value*100:.2f}%** des tokens ont √©t√© consomm√©s.")

# ---------------------- FONCTIONS DE PAIEMENT (ADMIN / MANUEL) ----------------------
def mettre_a_jour_statut_paiement(paiement_id, nouveau_statut):
    try:
        if nouveau_statut not in ["Validated", "Rejected"]:
            st.error("Statut invalide.")
            logging.warning(f"Tentative de mise √† jour avec statut invalide : {nouveau_statut}")
            return False, "Statut invalide."
        
        paiement = db['payments'].find_one({"_id": ObjectId(paiement_id)})
        if not paiement:
            st.error("Paiement non trouv√©.")
            logging.warning(f"Paiement non trouv√© pour l'ID : {paiement_id}")
            return False, "Paiement non trouv√©."
        
        db['payments'].update_one(
            {"_id": ObjectId(paiement_id)},
            {"$set": {"status": nouveau_statut}}
        )
        logging.info(f"Statut du paiement {paiement_id} mis √† jour √† {nouveau_statut}")
        
        # Si valid√©, ajouter les tokens √† l'utilisateur
        if nouveau_statut == "Validated":
            users_collection.update_one(
                {"_id": paiement['user_id']},
                {"$inc": {"tokens_purchased": paiement['tokens_purchased']}}
            )
            # Envoyer un email √† l'utilisateur
            user = users_collection.find_one({"_id": paiement['user_id']})
            sujet = "Votre Paiement a √©t√© Valid√©"
            contenu = f"""
            <h2>Votre Paiement a √©t√© Valid√©</h2>
            <p>Merci d'avoir achet√© {paiement['tokens_purchased']} tokens.</p>
            <p>Votre solde de tokens a √©t√© mis √† jour.</p>
            """
            envoyer_email(user['email'], sujet, contenu)
            message = "Paiement valid√© et tokens ajout√©s."
            st.success(message)
            logging.info(f"Tokens ajout√©s √† l'utilisateur {user['email']} suite √† la validation du paiement.")
        elif nouveau_statut == "Rejected":
            # Envoyer un email √† l'utilisateur
            user = users_collection.find_one({"_id": paiement['user_id']})
            sujet = "Votre Paiement a √©t√© Rejet√©"
            contenu = f"""
            <h2>Votre Paiement a √©t√© Rejet√©</h2>
            <p>Nous n'avons pas pu valider votre paiement de {paiement['amount']} USD.</p>
            <p>Veuillez r√©essayer ou contacter le support.</p>
            """
            envoyer_email(user['email'], sujet, contenu)
            message = "Paiement rejet√© et utilisateur notifi√©."
            st.warning(message)
            logging.info(f"Utilisateur {user['email']} notifi√© du rejet du paiement.")
        
        return True, message
    except Exception as e:
        logging.error(f"Erreur lors de la mise √† jour du statut du paiement {paiement_id} : {e}")
        st.error(f"Erreur lors de la mise √† jour du statut du paiement : {e}")
        return False, "Erreur lors de la mise √† jour du statut du paiement."

def traiter_paiement_manuel(user_id, amount, uploaded_file):
    if uploaded_file.type not in ["image/jpeg", "image/png", "image/jpg"]:
        st.error("Veuillez uploader une image valide (JPEG, PNG).")
        logging.warning(f"Utilisateur {user_id} a tent√© d'uploader un fichier invalide : {uploaded_file.type}")
        return False, "Type de fichier invalide."
    
    try:
        upload_dir = "uploads/"
        if not os.path.exists(upload_dir):
            os.makedirs(upload_dir)
        file_path = os.path.join(upload_dir, uploaded_file.name)
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        uploaded_file_url = file_path
    except Exception as e:
        logging.error(f"Erreur lors de la sauvegarde du fichier upload√© par {user_id} : {e}")
        st.error(f"Erreur lors de la sauvegarde du fichier : {e}")
        return False, "Erreur lors de la sauvegarde du fichier."
    
    # 1 USD = 100 tokens (exemple)
    tokens = amount * TOKEN_NUMBER
    
    success, message = enregistrer_paiement(user_id, amount, tokens, "Manual", uploaded_file_url)
    if success:
        sujet = "Nouvelle Demande de Paiement Manuel"
        user = users_collection.find_one({"_id": user_id})
        contenu = f"""
        <h2>Nouvelle Demande de Paiement Manuel</h2>
        <p>Un utilisateur a soumis une demande d'achat de tokens manuellement.</p>
        <p><strong>Email de l'utilisateur :</strong> {user['email']}</p>
        <p><strong>Montant :</strong> {amount} USD</p>
        <p><strong>Nombre de Tokens :</strong> {tokens}</p>
        <p><strong>Fichier Upload√© :</strong> <a href="file://{uploaded_file_url}">Voir le fichier</a></p>
        """
        envoyer_email(ADMIN_EMAIL, sujet, contenu)
        success = envoyer_email_piecejointes(ADMIN_EMAIL, sujet, contenu, attachments=[uploaded_file])
        if not success:
            st.error("√âchec de l'envoi de l'email.")
            return
        logging.info(f"Nouvelle demande de paiement manuel enregistr√©e pour l'utilisateur {user['email']}")
        st.success("Votre demande de paiement a √©t√© soumise et est en attente de validation.")
    else:
        st.error(message)
    
    return success, message

def afficher_historique_paiements(utilisateur, items_par_page=6):
    st.subheader("Historique des Paiements")
    paiements = recuperer_historique_paiements(utilisateur['_id'])
    
    if not paiements:
        st.write("Aucun paiement effectu√©.")
        return

    # Initialiser la page actuelle dans le state si ce n'est pas d√©j√† fait
    if 'page_paiements' not in st.session_state:
        st.session_state.page_paiements = 1

    total_paiements = len(paiements)
    total_pages = ceil(total_paiements / items_par_page)

    # Calculer les indices de d√©but et de fin pour les paiements √† afficher
    debut = (st.session_state.page_paiements - 1) * items_par_page
    fin = debut + items_par_page
    paiements_a_afficher = paiements[debut:fin]

    # Afficher les paiements en grille (par exemple, 2 colonnes)
    cols = st.columns(2)
    for idx, paiement in enumerate(paiements_a_afficher):
        col = cols[idx % 2]
        with col:
            st.markdown(f"""
                **Montant :** {paiement['amount']} USD  
                **Tokens :** {format_number(paiement['tokens_purchased'])}  
                **M√©thode :** {paiement['payment_method']}  
                **Statut :** {paiement['status']}  
                **Date :** {paiement['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}  
                """)
            if paiement['payment_method'] == "Manual" and paiement.get('uploaded_file_url'):
                st.markdown(f"[Voir le justificatif]({paiement['uploaded_file_url']})")
            st.markdown("---")

    # Afficher la pagination
    st.markdown(f"Page {st.session_state.page_paiements} sur {total_pages}")

    col1, col2, col3 = st.columns([1, 2, 1])
    with col1:
        if st.session_state.page_paiements > 1:
            if st.button("Pr√©c√©dent"):
                st.session_state.page_paiements -= 1
                st.rerun()
    with col3:
        if st.session_state.page_paiements < total_pages:
            if st.button("Suivant"):
                st.session_state.page_paiements += 1
                st.rerun()

def afficher_historique_paiements_admin():
    st.subheader("Historique des Paiements")
    paiements = list(db['payments'].find().sort("timestamp", -1))
    
    if paiements:
        for paiement in paiements:
            user = users_collection.find_one({"_id": paiement['user_id']})
            st.markdown(f"""
                **Utilisateur :** {user['nom']} ({user['email']})  
                **Montant :** {paiement['amount']} USD  
                **Tokens :** {paiement['tokens_purchased']}  
                **M√©thode :** {paiement['payment_method']}  
                **Statut :** {paiement['status']}  
                **Date :** {paiement['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}  
                """)
            if paiement['payment_method'] == "Manual" and paiement['uploaded_file_url']:
                st.markdown(f"[Voir le justificatif]({paiement['uploaded_file_url']})")
            st.markdown("---")
    else:
        st.write("Aucun paiement effectu√©.")

def filtrer_paiements(paiements, periode):
    aujourd_hui = datetime.datetime.utcnow()
    if periode == 'Jour':
        debut = aujourd_hui - datetime.timedelta(days=1)
    elif periode == '2 Jours':
        debut = aujourd_hui - datetime.timedelta(days=2)
    elif periode == 'Semaine':
        debut = aujourd_hui - datetime.timedelta(weeks=1)
    elif periode == 'Mois':
        debut = aujourd_hui - datetime.timedelta(days=30)
    elif periode == '3 Mois':
        debut = aujourd_hui - datetime.timedelta(days=90)
    elif periode == '6 Mois':
        debut = aujourd_hui - datetime.timedelta(days=180)
    elif periode == 'Ann√©e':
        debut = aujourd_hui - datetime.timedelta(days=365)
    else:
        debut = aujourd_hui - datetime.timedelta(days=30)

    paiements_filtr√©s = [p for p in paiements if debut <= p['timestamp'] <= aujourd_hui]
    return paiements_filtr√©s

# ---------------------- PAGES ----------------------
def page_connexion():
    st.title("Connexion")

    # V√©rifiez si un JWT valide est d√©j√† pr√©sent
    jwt_token = st.session_state.get('jwt_token')
    if jwt_token:
        payload = decode_jwt_token(jwt_token)
        if payload:
            st.session_state['page'] = 'Accueil' if payload.get('role') == 'user' else 'page_admin'
            st.rerun()
        else:
            # JWT invalide ou expir√©
            st.session_state['jwt_token'] = None
    
    # 1) Charger les credentials depuis Mongo
    credentials = load_credentials_from_mongo()
    #st.write(credentials)

    # Si la base est vide, on affiche un simple avertissement
    if not credentials.get("usernames"):
        st.warning("Aucun utilisateur n'est d√©fini en base. "
                    "Vous pouvez en cr√©er un (via 'Cr√©er un compte') "
                    "ou v√©rifier la base.")

        # 2) Cr√©er l'instance d'authentification
    authenticator = stauth.Authenticate(
        credentials,
        "my_cookie_name",        # Nom du cookie
        "CLE_SECRETE_STREAMLIT", # Cl√© secr√®te pour signer le cookie
        cookie_expiry_days=7     # Dur√©e de validit√© du cookie (en jours)
        )


    # 3) Afficher le widget de connexion
    authenticator.login(
        location="main",
        fields={
            'Form name': 'Login',
            'Username': 'Username',
            'Password': 'Password',
            'Login': 'Login'
        }
    )

    # 4) Lire l'√©tat de l'authentification dans st.session_state
    authentication_status = st.session_state.get("authentication_status", None)
    name = st.session_state.get("name", None)
    username = st.session_state.get("username", None)
    #st.write(username)

    # 5) G√©rer les diff√©rents cas
    if authentication_status:
        st.success(f"Bienvenue {name} !")

        # V√©rifier si l'utilisateur est bloqu√©
        user_doc = users_collection.find_one({"email": username})
        if not user_doc:
            st.error("Utilisateur introuvable. Veuillez v√©rifier vos identifiants.")
            return

        if user_doc.get("is_blocked", False):
            st.error("Votre compte a √©t√© bloqu√©. Veuillez contacter l'administrateur.")
            authenticator.logout("Se d√©connecter", "main")
            return

        # V√©rifier si l'OTP a d√©j√† √©t√© valid√©
        if user_doc.get('otp_validated', False):
            # OTP d√©j√† valid√©, rediriger vers la page d'accueil
            st.session_state['page'] = 'Accueil' if user_doc.get('role') == 'user' else 'page_admin'
            st.rerun()
        else:
            # OTP non valid√©, envoyer l'OTP et rediriger vers la v√©rification OTP
            st.session_state['temp_user_id'] = str(user_doc['_id'])
            st.info("Votre session n√©cessite une validation par OTP.")
            envoyer_otp_via_email(username)
            st.session_state['page'] = 'OTP Verification'
            st.rerun()

    elif authentication_status is False:
        st.error("Identifiants incorrects ou compte bloqu√©.")
    elif authentication_status is None:
        st.warning("Veuillez entrer vos identifiants.")

    # 6) Boutons de navigation
    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Cr√©er un compte"):
            st.session_state['page'] = 'Inscription'
            st.rerun()
    with col2:
        if st.button("Mot de passe oubli√©"):
            st.session_state['page'] = 'Mot de passe oubli√©'
            st.rerun()


def generate_otp(length=6):
    """G√©n√®re un OTP de 'length' chiffres."""
    return ''.join(str(random.randint(0, 9)) for _ in range(length))

def envoyer_otp_via_email(email):
    """Exemple : g√©n√®re un OTP, le stocke en session + expiration 5 min, et l'envoie par email."""
    otp = generate_otp(6)  # 6 chiffres
    st.session_state['otp'] = otp
    # On fixe une expiration √† 5 minutes
    st.session_state['otp_expiration'] = datetime.datetime.utcnow() + datetime.timedelta(minutes=5)

    # Envoi par email (pseudo-code)
    contenu = f"Votre code OTP est : {otp}. Il expirera dans 5 minutes."
    envoyer_email(email, "Votre OTP", contenu)

    st.success("Un code OTP vous a √©t√© envoy√© par email (valable 5 minutes).")

def page_otp_verification():
    st.title("üîí V√©rification OTP")

    # R√©cup√®re l'OTP en session, et son expiration
    otp_stored = st.session_state.get('otp')
    otp_expiration = st.session_state.get('otp_expiration')

    # S'il n'y a pas d'OTP en session, avertir et rediriger
    if not otp_stored or not otp_expiration:
        st.error("Aucun OTP n'a √©t√© g√©n√©r√©. Veuillez revenir √† la page de connexion ou d'inscription.")
        st.session_state['page'] = 'Connexion'
        st.rerun()

    # V√©rifie si l'OTP a expir√©
    now_utc = datetime.datetime.utcnow()
    if now_utc > otp_expiration:
        st.error("Votre code OTP a expir√©. Veuillez red√©marrer le processus.")
        del st.session_state['otp']
        del st.session_state['otp_expiration']
        # Proposer un bouton pour renvoyer l'OTP
        st.write("Veuillez renvoyer un nouvel OTP pour continuer.")
        if st.button("Renvoyer l'OTP"):
            # Appeler la fonction pour g√©n√©rer et envoyer un nouvel OTP
            st.session_state['page'] = 'Connexion'
            st.rerun()
        return  # Arr√™ter l'ex√©cution de la fonction apr√®s avoir propos√© le renvoi



    st.write("Veuillez entrer le code OTP √† 6 chiffres re√ßu par email.")

    # Affichage de 6 champs sur la m√™me ligne (1 caract√®re max chacun)
    col1, col2, col3, col4, col5, col6 = st.columns(6)
    with col1:
        d1 = st.text_input("", max_chars=1, key="digit1")
    with col2:
        d2 = st.text_input("", max_chars=1, key="digit2")
    with col3:
        d3 = st.text_input("", max_chars=1, key="digit3")
    with col4:
        d4 = st.text_input("", max_chars=1, key="digit4")
    with col5:
        d5 = st.text_input("", max_chars=1, key="digit5")
    with col6:
        d6 = st.text_input("", max_chars=1, key="digit6")

    if st.button("Valider"):
        # Concat√©ner les 6 caract√®res pour former l'OTP saisi
        otp_entered = (d1 + d2 + d3 + d4 + d5 + d6).strip()

        # V√©rifiez que l'utilisateur a bien entr√© 6 chiffres
        if len(otp_entered) < 6 or not otp_entered.isdigit():
            st.error("Veuillez entrer 6 chiffres.")
            return

        # V√©rifiez si l'OTP correspond √† celui stock√©
        if otp_entered == otp_stored:
            st.success("OTP valide. Vous √™tes authentifi√© !")

            # Nettoyer l'OTP apr√®s validation
            del st.session_state['otp']
            del st.session_state['otp_expiration']

            # R√©cup√©rer l'utilisateur via l'ID temporaire
            user_id = st.session_state.get('temp_user_id')
            if not user_id:
                st.error("Impossible de r√©cup√©rer l'identifiant utilisateur.")
                st.session_state['page'] = 'Connexion'
                st.rerun()

            # Cherchez l'utilisateur dans la base de donn√©es
            utilisateur = users_collection.find_one({"_id": ObjectId(user_id)})
            if not utilisateur:
                st.error("Utilisateur introuvable.")
                st.session_state['page'] = 'Connexion'
                st.rerun()

            # G√©n√©rez un JWT
            user_role = utilisateur.get("role", "user")
            jwt_token = create_jwt_token(user_id, user_role)  # Remplacez par votre fonction JWT

            # Stockez les informations utilisateur et le JWT dans la session
            st.session_state['jwt_token'] = jwt_token
            st.session_state['user_info'] = utilisateur
            st.session_state['authenticated'] = True

            # Mettre √† jour otp_validated dans MongoDB
            users_collection.update_one(
                {"_id": ObjectId(user_id)},
                {"$set": {"otp_validated": True}}
            )

            # Redirigez l'utilisateur en fonction de son r√¥le
            st.session_state['page'] = 'Accueil' if user_role == "user" else 'page_admin'
            st.rerun()

        else:
            st.error("Le code OTP saisi est incorrect.")


            
def page_inscription():
    st.title("üìù Inscription")
    nom = st.text_input("Nom")
    email = st.text_input("Email")
    mot_de_passe = st.text_input("Mot de passe", type="password")
    mot_de_passe_conf = st.text_input("Confirmer le mot de passe", type="password")

    if st.button("S'inscrire"):
        if mot_de_passe != mot_de_passe_conf:
            st.error("Les mots de passe ne correspondent pas.")
        else:
            # FORCER le r√¥le = "user"
            #success, message = ajouter_utilisateur(email, nom, mot_de_passe, role="admin")
            success, message = ajouter_utilisateur(email, nom, mot_de_passe, role="user")

            if success:
                st.success(message)
                logging.info(f"Nouvel utilisateur inscrit : {email}")

                # R√©cup√©rer l‚Äôutilisateur pour g√©n√©rer et envoyer l‚ÄôOTP
                utilisateur = users_collection.find_one({"email": email})
                #otp = generate_otp()
                #st.session_state['otp'] = otp
                st.session_state['temp_user_id'] = str(utilisateur['_id'])

                #contenu_otp = f"Votre code OTP d'inscription est : {otp}"
                #envoyer_email(email, "Code OTP d'Inscription", contenu_otp)
                envoyer_otp_via_email(email)

                # Rediriger vers la page OTP
                st.session_state['page'] = 'OTP Verification'
                st.rerun()
            else:
                st.error(message)

    st.markdown("---")
    if st.button("Retour √† la connexion"):
        st.session_state['page'] = 'Connexion'
        st.rerun()

def page_reinitialisation():
    st.title("üîí R√©initialiser le mot de passe")
    email = st.text_input("Email")
    if st.button("Envoyer OTP"):
        utilisateur = users_collection.find_one({"email": email})
        if utilisateur:
            otp = generate_otp()
            st.session_state['reset_otp'] = otp
            st.session_state['reset_user_id'] = str(utilisateur['_id'])
            envoyer_email(email, "Votre OTP de R√©initialisation", f"Votre code OTP pour r√©initialiser le mot de passe est : {otp}")
            logging.info(f"OTP de r√©initialisation envoy√© √† {email}")
            st.session_state['page'] = 'Reset OTP Verification'
            st.rerun()
        else:
            st.error("Utilisateur non trouv√©.")
    
    st.markdown("---")
    if st.button("Retour √† la connexion"):
        st.session_state['page'] = 'Connexion'
        st.rerun()

def page_reset_otp_verification():
    st.title("üîë V√©rification OTP de R√©initialisation")
    otp_input = st.text_input("Entrez votre OTP")
    nouveau_mot_de_passe = st.text_input("Nouveau mot de passe", type="password")
    nouveau_mot_de_passe_conf = st.text_input("Confirmer le nouveau mot de passe", type="password")
    if st.button("R√©initialiser le mot de passe"):
        if 'reset_otp' in st.session_state and otp_input == st.session_state['reset_otp']:
            if nouveau_mot_de_passe != nouveau_mot_de_passe_conf:
                st.error("Les mots de passe ne correspondent pas.")
            else:
                user_id = st.session_state['reset_user_id']
                email = users_collection.find_one({"_id": ObjectId(user_id)})['email']
                reinitialiser_mot_de_passe(email, nouveau_mot_de_passe)
                logging.info(f"Mot de passe r√©initialis√© pour l'utilisateur {email}")
                st.success("Mot de passe r√©initialis√© avec succ√®s.")
                st.session_state['page'] = 'Connexion'
                st.rerun()
        else:
            st.error("OTP invalide.")

def page_google_login():
    st.title("üîó Connexion avec Google")
    
    oauth = OAuth2Session(
        client_id=GOOGLE_CLIENT_ID,
        client_secret=GOOGLE_CLIENT_SECRET,
        scope='openid email profile',
        redirect_uri=f"{os.getenv('BASE_URL')}/?page=Google Callback"
    )
    
    authorization_url, state = oauth.create_authorization_url(
        GOOGLE_AUTHORIZATION_ENDPOINT,
        access_type='offline',
        prompt='select_account'
    )
    
    st.markdown(f"[Cliquez ici pour vous connecter avec Google]({authorization_url})")
    
    query_params = st.experimental_get_query_params()
    if 'code' in query_params:
        code = query_params['code'][0]
        try:
            token = oauth.fetch_token(
                GOOGLE_TOKEN_ENDPOINT,
                code=code,
                client_secret=GOOGLE_CLIENT_SECRET
            )
            user_info = oauth.get(GOOGLE_USERINFO_ENDPOINT).json()
            email = user_info['email']
            nom = user_info['name']
            google_id = user_info['id']
            profile_picture_url = user_info.get('picture', "https://via.placeholder.com/100")
            
            # V√©rifier si l'utilisateur existe
            utilisateur = users_collection.find_one({"email": email})
            if utilisateur:
                if utilisateur.get('is_blocked', False):
                    st.error("Votre compte a √©t√© bloqu√©. Veuillez contacter l'administrateur.")
                    logging.warning(f"Utilisateur bloqu√© via Google : {email}")
                    return
                # Connecter l'utilisateur
                jwt_token = create_jwt_token(utilisateur['_id'], utilisateur.get("is_admin", False))
                st.session_state['jwt_token'] = jwt_token
                st.session_state['user_info'] = utilisateur
                logging.info(f"Utilisateur connect√© via Google : {email}")
                st.success("Connexion r√©ussie!")
            else:
                # Cr√©er un nouvel utilisateur
                success, message = ajouter_utilisateur(email, nom, google_id, role="admin")
                if success:
                    utilisateur = users_collection.find_one({"email": email})
                    jwt_token = create_jwt_token(utilisateur['_id'], utilisateur.get("is_admin", False))
                    st.session_state['jwt_token'] = jwt_token
                    st.session_state['user_info'] = utilisateur
                    logging.info(f"Nouvel utilisateur inscrit et connect√© via Google : {email}")
                    st.success("Inscription et connexion r√©ussies!")
                else:
                    st.error(message)
            st.session_state['page'] = 'Accueil'
            st.rerun()
        except Exception as e:
            logging.error(f"Erreur lors de la connexion via Google : {e}")
            st.error(f"Erreur lors de la connexion via Google ")

def page_accueilles():
    st.title('Business Plan')
    utilisateur = get_current_user()
    #if not utilisateur:
       #st.warning("Vous n'√™tes pas connect√© !")
       # return
    
    st.sidebar.header("Configuration Initiale pour le business model")
    st.sidebar.selectbox(
        "Type d'entreprise",
        ["PME", "Startup"],
        key="type_entreprise"
    ) 

    st.sidebar.text_input(
        "Montant limite pour le projet",
        value=st.session_state.montant_projet,
        key="montant_projet"
    )

    st.sidebar.text_input(
        "Nom de l'entreprise",
        value=st.session_state.nom_entreprise,
        key="nom_entreprise"
    )

    if not nom_entreprise:
        st.sidebar.warning("Veuillez entrer le nom de votre entreprise.")
    
    tab_names = ["Section 1", "Section 2", "Section 3"]
    
    # Onglets
    tabs = st.tabs(tab_names)
    # On n'a pas les fonctions sections[i], on peut juste faire un for
    for i, tab in enumerate(tabs):
        with tab:
            st.write(f"Contenu de {tab_names[i]} - √Ä personnaliser...")

    # Bouton de d√©connexion
    if st.button("Se d√©connecter"):
        st.session_state.pop('jwt_token', None)
        st.session_state.pop('user_info', None)
        st.session_state['page'] = 'Connexion'
        st.rerun()

    # Afficher sidebar tokens
    afficher_tokens_sidebar(utilisateur)
    
    
    
def page_accueil() :
    col1, col2 = st.columns([4, 1])  # Ajustez les ratios selon vos besoins
    with col1:
        st.title("Business Plan")  # Titre dans la premi√®re colonne

    with col2:
        if st.button("üîÑ Actualiser"):
            st.rerun()
            
    #st.title('Business Plan')
    utilisateur = get_current_user()
    st.session_state['user_info'] = utilisateur
    
    if not utilisateur:
        st.warning("Vous n'√™tes pas connect√© !")
        return

    # D√©finir les pages pour la navigationdc
    pages = [
        st.Page(page_accueil_content, title="üè† Accueil"),
        st.Page(page_chat, title="üí¨ Chat"),
        st.Page(page_achat, title="üí∞ Acheter des Tokens"),
        st.Page(page_profil, title="üë§ Profil"),
        st.Page(page_deconnexion, title="‚ùå D√©connexion"),
    ]
    # Cr√©er et ex√©cuter la navigation
    pg = st.navigation(pages)
    pg.run()

def page_accueil_content():
    utilisateur = get_current_user()
    
    #st.subheader(f"Bienvenue {utilisateur['nom']} !")
    #st.write("Bienvenue sur votre tableau de bord. Utilisez la navigation ci-dessus pour acc√©der aux diff√©rentes sections.")   
    st.sidebar.header("Configuration Initiale")
    type_entreprise = st.sidebar.selectbox("Type d'entreprise", ["PME", "Startup"], key="type_entreprise")
    montant_projet = st.sidebar.text_input("Montant limite pour le projet", value="", key="montant_projet")
    nom_entreprise = st.sidebar.text_input("Nom de l'entreprise", value="", key="nom_entreprise")

    if not nom_entreprise:
        st.sidebar.warning("Veuillez entrer le nom de votre entreprise.")
    
    afficher_tokens_sidebar(utilisateur)
    
    # Cr√©ation des onglets
    tabs = st.tabs(tab_names)

    # Parcours des onglets
    for i, tab in enumerate(tabs):
        with tab:
            sections[i]()
        
    
def page_chatss():
    st.title("üí¨ Chat Interface")
    utilisateur = get_current_user()
    if not utilisateur:
        st.warning("Vous n'√™tes pas connect√©.")
        return
   
    MODEL = "gpt-4"
    MAX_TOKENS_PER_REQUEST = 150
    
    # Calculer les tokens restants
    tokens_purchased = utilisateur.get('tokens_purchased', 0)
    tokens_consumed = utilisateur.get('tokens_consumed', 0)
    tokens_remaining = tokens_purchased - tokens_consumed

    st.session_state['user_info'] = utilisateur  # Assurez-vous que la session est √† jour
    
    afficher_tokens_sidebar(utilisateur)
    
    # Initialiser l'historique des messages dans la session
    if 'messages' not in st.session_state:
        st.session_state['messages'] = [
            {"role": "system", "content": "Tu es un assistant expert en g√©n√©ration de business et business plan."}
        ]

    # Afficher l'historique des messages
    for msg in st.session_state['messages']:
        if msg['role'] == 'user':
            st.chat_message("user").write(msg['content'])
        elif msg['role'] == 'assistant':
            st.chat_message("assistant").write(msg['content'])

    # Entr√©e utilisateur via le composant de chat
    user_input = st.chat_input("Entrez votre question")

    if user_input:
        # Ajouter le message de l'utilisateur √† l'historique
        st.session_state['messages'].append({"role": "user", "content": user_input})
        st.chat_message("user").write(user_input)
        
        # Calculer les tokens n√©cessaires (entr√©e + r√©ponse pr√©vue)
        tokens_in_input = count_tokens(user_input, MODEL)
        tokens_needed = tokens_in_input + MAX_TOKENS_PER_REQUEST
        st.write(f"Tokens n√©cessaires : {tokens_needed}")
        
        # V√©rifier si l'utilisateur a assez de tokens
        if tokens_remaining < tokens_needed:
            st.error("Vous n'avez pas assez de tokens pour effectuer cette action. Veuillez acheter plus de tokens.")
            return
        else:
            try:
                # Cr√©er un conteneur vide pour la r√©ponse de l'assistant une seule fois
                assistant_placeholder = st.chat_message("assistant")
                
                # Initialiser la r√©ponse de l'assistant
                assistant_reply = ""
                
                # Appel √† l'API OpenAI ChatCompletion avec streaming
                response = openai.ChatCompletion.create(
                    model=MODEL,  # Assurez-vous que le nom du mod√®le est correct
                    messages=st.session_state['messages'],
                    max_tokens=1500,  # Ajustez selon vos besoins
                    temperature=0.7,
                    stream=True  # Activer le streaming
                )
                
                # It√©rer sur les fragments de r√©ponse
                for chunk in response:
                    if 'choices' in chunk and len(chunk['choices']) > 0:
                        delta = chunk['choices'][0].get('delta', {})
                        content = delta.get('content', '')
                        if content:
                            assistant_reply += content
                            # Mettre √† jour le m√™me conteneur avec le contenu actuel
                            assistant_placeholder.write(assistant_reply)
                
                # Une fois la r√©ponse compl√®te, ajouter le message √† l'historique
                st.session_state['messages'].append({"role": "assistant", "content": assistant_reply})
                
                # Calculer les tokens utilis√©s
                tokens_utilises = response['usage']['total_tokens'] if 'usage' in response else tokens_needed
                success, message = consommer_tokens(utilisateur, tokens_utilises)

                # Afficher les tokens consomm√©s
                if success:
                    st.success(f"{tokens_utilises} tokens consomm√©s.")
                else:
                    st.error(message)
            
            except Exception as e:
                logging.error(f"Erreur lors de l'appel √† l'API OpenAI : {e}")
                st.error("Erreur lors de l'appel √† l'API OpenAI. Veuillez r√©essayer plus tard.")


def page_chatssss():
    st.title("üí¨ Interface de Chat")

    utilisateur = get_current_user()
    if not utilisateur:
        st.warning("Vous n'√™tes pas connect√©.")
        return
   
    MODEL = "gpt-4"  # Assurez-vous que le mod√®le est correct et supporte le streaming
    MAX_TOKENS_PER_REQUEST = 150  # Ajustez selon vos besoins
    
    # Calculer les tokens restants
    tokens_purchased = utilisateur.get('tokens_purchased', 0)
    tokens_consumed = utilisateur.get('tokens_consumed', 0)
    tokens_remaining = tokens_purchased - tokens_consumed

    st.session_state['user_info'] = utilisateur  # Assurez-vous que la session est √† jour
    
    afficher_tokens_sidebar(utilisateur)
    
    # Initialiser l'historique des messages dans la session
    if 'messages' not in st.session_state:
        st.session_state['messages'] = [
            {"role": "system", "content": "Tu es un assistant expert en g√©n√©ration de business et business plan."}
        ]

    # Afficher l'historique des messages
    for msg in st.session_state['messages']:
        if msg['role'] == 'user':
            st.chat_message("user").write(msg['content'])
        elif msg['role'] == 'assistant':
            st.chat_message("assistant").write(msg['content'])

    # Entr√©e utilisateur via le composant de chat
    user_input = st.chat_input("Entrez votre question")

    if user_input:
        # Ajouter le message de l'utilisateur √† l'historique
        st.session_state['messages'].append({"role": "user", "content": user_input})
        st.chat_message("user").write(user_input)
        
        # Calculer les tokens n√©cessaires (entr√©e + r√©ponse pr√©vue)
        tokens_in_input = count_tokens(user_input, MODEL)
        tokens_needed = tokens_in_input + MAX_TOKENS_PER_REQUEST
        st.write(f"Tokens n√©cessaires : {tokens_needed}")
        
        # V√©rifier si l'utilisateur a assez de tokens
        if tokens_remaining < tokens_needed:
            st.error("Vous n'avez pas assez de tokens pour effectuer cette action. Veuillez acheter plus de tokens.")
            return
        else:
            # V√©rifier si une r√©ponse est d√©j√† en cours
            if 'response_pending' in st.session_state and st.session_state['response_pending']:
                st.warning("Une r√©ponse est d√©j√† en cours de g√©n√©ration. Veuillez patienter.")
                return
            else:
                st.session_state['response_pending'] = True  # Marquer comme r√©ponse en cours
                
                try:
                    # Cr√©er un conteneur unique pour la r√©ponse de l'assistant
                    if 'assistant_placeholder' not in st.session_state:
                        st.session_state['assistant_placeholder'] = st.empty()
                    
                    assistant_placeholder = st.session_state['assistant_placeholder']
                    
                    # Initialiser la r√©ponse de l'assistant
                    assistant_reply = ""
                    
                    # Appel √† l'API OpenAI ChatCompletion avec streaming
                    response = openai.ChatCompletion.create(
                        model=MODEL,  # Assurez-vous que le nom du mod√®le est correct
                        messages=st.session_state['messages'],
                        max_tokens=1500,  # Ajustez selon vos besoins
                        temperature=0.7,
                        stream=True  # Activer le streaming
                    )
                    
                    # It√©rer sur les fragments de r√©ponse
                    for chunk in response:
                        if 'choices' in chunk and len(chunk['choices']) > 0:
                            delta = chunk['choices'][0].get('delta', {})
                            content = delta.get('content', '')
                            if content:
                                assistant_reply += content
                                # Mettre √† jour le conteneur avec le contenu accumul√©
                                assistant_placeholder.markdown(f"**Assistant:** {assistant_reply}")
                    
                    # Une fois la r√©ponse compl√®te, ajouter le message √† l'historique
                    st.session_state['messages'].append({"role": "assistant", "content": assistant_reply})
                    
                    # Calculer les tokens utilis√©s
                    tokens_utilises = response['usage']['total_tokens'] if 'usage' in response else tokens_needed
                    success, message = consommer_tokens(utilisateur, tokens_utilises)

                    # Afficher les tokens consomm√©s
                    if success:
                        st.success(f"{tokens_utilises} tokens consomm√©s.")
                    else:
                        st.error(message)
                
                except Exception as e:
                    logging.error(f"Erreur lors de l'appel √† l'API OpenAI : {e}")
                    st.error("Erreur lors de l'appel √† l'API OpenAI. Veuillez r√©essayer plus tard.")
                
                finally:
                    st.session_state['response_pending'] = False  # R√©initialiser le drapeau
                    
import time                  
# Fonction principale de l'application de chat
# D√©finir la limite de contexte
CONTEXT_LIMIT = 4100  # Ajustez selon votre mod√®le
CONTEXT_LIMIT_INPUT = 3590  # Ajustez selon votre mod√®le


def trim_message_history(messages, user_input, model="gpt-4", context_limit=CONTEXT_LIMIT):
    """
    Garde les messages les plus r√©cents jusqu'√† ce que la somme des tokens soit inf√©rieure √† la limite de contexte.
    Inclut toujours le user_input et pr√©serve le message syst√®me.
    """
    total_tokens = 0
    trimmed_messages = []
    
    # Inclure le message syst√®me en premier
    system_messages = [msg for msg in messages if msg['role'] == 'system']
    if system_messages:
        trimmed_messages.extend(system_messages)
        total_tokens += count_tokens(system_messages[0]['content'], model)
    
    # Calculer les tokens de user_input
    user_input_tokens = count_tokens(user_input, model)
    
    # Parcourir les messages en ordre inverse (du plus r√©cent au plus ancien)
    for msg in reversed(messages):
        if msg['role'] == 'system':
            continue  # D√©j√† inclus
        msg_tokens = count_tokens(msg['content'], model)
        if total_tokens + msg_tokens + user_input_tokens > context_limit + 200:
            break
        trimmed_messages.insert(1, msg)  # Ins√©rer apr√®s le message syst√®me
        total_tokens += msg_tokens
    
    # Ajouter le user_input √† la fin de l'historique trim√©
    #trimmed_messages.append({"role": "user", "content": user_input})
    total_tokens += user_input_tokens
    return trimmed_messages


def page_chat():
    st.title("üí¨ Interface de Chat")

    utilisateur = get_current_user()
    if not utilisateur:
        st.warning("Vous n'√™tes pas connect√©.")
        return
    
    MODEL = "gpt-4"
    MAX_TOKENS_PER_REQUEST = 150
    
    # Calcul des tokens restants
    tokens_purchased = utilisateur.get('tokens_purchased', 0)
    tokens_consumed = utilisateur.get('tokens_consumed', 0)
    tokens_remaining = tokens_purchased - tokens_consumed

    afficher_tokens_sidebar(utilisateur)
    
    # Initialiser l'historique des messages dans la session
    if 'messages' not in st.session_state:
        st.session_state['messages'] = [
            {"role": "system", "content": "Tu es un assistant expert en g√©n√©ration de business model et business plan. aussi un expert en business"}
        ]
    
    # Initialiser le drapeau de r√©ponse en cours
    if 'response_pending' not in st.session_state:
        st.session_state['response_pending'] = False

    # Afficher tous les messages dans l'ordre chronologique
    for msg in st.session_state['messages']:
        if msg['role'] == 'user':
            st.chat_message("user").write(msg['content'])
        elif msg['role'] == 'assistant':
            st.chat_message("assistant").write(msg['content'])

    # Placeholder pour la r√©ponse en cours de l'assistant
    assistant_placeholder = None
    if st.session_state['response_pending']:
        assistant_placeholder = st.empty()
        assistant_placeholder.markdown("**Assistant:** En cours de g√©n√©ration...")
    
    # Entr√©e utilisateur via le composant de chat
    user_input = st.chat_input("Entrez votre question")

    if user_input:
        # Ajouter le message de l'utilisateur √† l'historique
        if count_tokens(user_input, MODEL) > CONTEXT_LIMIT_INPUT :
            st.error("‚ùå Votre message est trop long et d√©passe la limite de contexte autoris√©e. Veuillez r√©duire la longueur de votre message et r√©essayer.")
            return

        st.session_state['messages'].append({"role": "user", "content": user_input})
        st.chat_message("user").write(user_input)
        
        # Calculer les tokens n√©cessaires (entr√©e + r√©ponse pr√©vue)
        tokens_in_input = count_tokens(user_input+ json.dumps(st.session_state['messages']), MODEL)
        tokens_needed = tokens_in_input + MAX_TOKENS_PER_REQUEST
        st.write(f"**Tokens n√©cessaires :** {tokens_needed}")
        
        # V√©rifier si l'utilisateur a assez de tokens
        if tokens_remaining < tokens_needed:
            st.error("Vous n'avez pas assez de tokens pour effectuer cette action. Veuillez acheter plus de tokens.")
            return
        else:
            # V√©rifier si une r√©ponse est d√©j√† en cours
            if st.session_state['response_pending']:
                st.warning("Une r√©ponse est d√©j√† en cours de g√©n√©ration. Veuillez patienter.")
                return
            else:
                # Trimmer l'historique des messages pour respecter la limite de contexte
                trimmed_messages = trim_message_history(st.session_state['messages'],user_input, MODEL, CONTEXT_LIMIT)
                
                # Mettre √† jour l'historique des messages avec les messages trim√©s
                st.session_state['messages'] = trimmed_messages
                
                st.session_state['response_pending'] = True  # Marquer comme r√©ponse en cours

                try:
                    # Cr√©er un conteneur unique pour la r√©ponse de l'assistant
                    assistant_placeholder = st.empty()
                    assistant_placeholder.markdown("**Assistant:** En cours de g√©n√©ration...")
                    
                    # Initialiser la r√©ponse de l'assistant
                    assistant_reply = ""
                    
                    # Appel √† l'API OpenAI ChatCompletion avec streaming
                    response = openai.ChatCompletion.create(
                        model=MODEL,
                        messages=st.session_state['messages'], 
                        max_tokens=4000,
                        temperature=0.7,
                        stream=True  # Activer le streaming
                    )
                    
                    # It√©rer sur les fragments de r√©ponse
                    for chunk in response:
                        if 'choices' in chunk and len(chunk['choices']) > 0:
                            delta = chunk['choices'][0].get('delta', {})
                            content = delta.get('content', '')
                            if content:
                                assistant_reply += content
                                # Mettre √† jour le conteneur avec le contenu accumul√©
                                assistant_placeholder.markdown(f"**Assistant:** {assistant_reply}")
                                time.sleep(0.05)  # Petit d√©lai pour permettre √† Streamlit de mettre √† jour l'interface
                    
                    # Une fois la r√©ponse compl√®te, ajouter le message √† l'historique
                    st.session_state['messages'].append({"role": "assistant", "content": assistant_reply})
                    
                    # Calculer les tokens utilis√©s
                    tokens_utilises = tokens_needed+count_tokens(assistant_reply, MODEL)  # Simplification si 'usage' n'est pas disponible
                    if 'usage' in response:
                        tokens_utilises = response['usage']['total_tokens']
                    
                    success, message = consommer_tokens(utilisateur, tokens_utilises)

                    # Afficher les tokens consomm√©s s√©par√©ment
                    if success:
                        st.success(f"{tokens_utilises} tokens consomm√©s.")
                    else:
                        st.error(message)
                
                except openai.error.OpenAIError as e:
                    logging.error(f"Erreur OpenAI: {e}")
                    st.error(f"Erreur lors de l'appel √† l'API OpenAI: {e}")
                
                except Exception as e:
                    logging.error(f"Erreur inattendue: {e}")
                    st.error(f"Erreur inattendue: {e}")
                
                finally:
                    st.session_state['response_pending'] = False





def page_achat():
    st.title("üí∞ Acheter des Tokens")
    utilisateur = get_current_user()
    if not utilisateur:
        st.warning("Vous n'√™tes pas connect√©.")
        return
    
    afficher_tokens_sidebar(utilisateur)
    
    mode_paiement = st.radio("Choisissez une m√©thode de paiement :", ["Stripe", "Manuel"])
    
    if mode_paiement == "Stripe":
        montant = st.number_input("Montant en USD", min_value=1, step=1)
        if st.button("Acheter avec Stripe"):
            if montant < 1:
                st.error("Le montant doit √™tre d'au moins 1 USD.")
            else:
                if not utilisateur.get('stripe_customer_id'):
                    try:
                        customer = stripe.Customer.create(email=utilisateur['email'])
                        users_collection.update_one(
                            {"_id": utilisateur['_id']},
                            {"$set": {"stripe_customer_id": customer['id']}}
                        )
                        utilisateur['stripe_customer_id'] = customer['id']
                        st.session_state['user_info']['stripe_customer_id'] = customer['id']
                        logging.info(f"Client Stripe cr√©√© pour {utilisateur['email']}")
                    except Exception as e:
                        logging.error(f"Erreur lors de la cr√©ation du client Stripe ")
                        st.error(f"Erreur lors de la cr√©ation du client Stripe")
                        return
                
                success_url = f"{os.getenv('BASE_URL')}/?page=Accueil&success=true"
                cancel_url = f"{os.getenv('BASE_URL')}/?page=Accueil&cancel=true"
                session_url = creer_session_stripe(
                    utilisateur['stripe_customer_id'],
                    montant * 100,
                    success_url,
                    cancel_url
                )
                if session_url:
                    st.markdown(f"[Cliquez ici pour payer]({session_url})")
    
    elif mode_paiement == "Manuel":
        with st.form("paiement_manuel"):
            montant = st.number_input("Montant en USD", min_value=1, step=1)
            uploaded_file = st.file_uploader("Uploader une image de paiement (JPEG, JPG, PNG)", type=["jpg", "jpeg", "png"])
            submit_button = st.form_submit_button("Soumettre le Paiement")
        
        if submit_button:
            if montant < 1:
                st.error("Le montant doit √™tre d'au moins 1 USD.")
            elif not uploaded_file:
                st.error("Veuillez uploader une image de paiement.")
            else:
                success, message = traiter_paiement_manuel(utilisateur['_id'], montant, uploaded_file)
                if success:
                    st.success("Votre paiement a √©t√© soumis et est en attente de validation.")
                else:
                    st.error(message)
    
    st.subheader("Dernier Paiement")
    st.write("üîç **Astuce :** Pour voir l'historique complet de vos paiements, rendez-vous sur votre")

    dernier_paiement = recuperer_dernier_paiement(utilisateur['_id'])
    if dernier_paiement:
        st.markdown(f"""
            **Montant :** {dernier_paiement['amount']} USD  
            **Tokens :** {dernier_paiement['tokens_purchased']}  
            **M√©thode :** {dernier_paiement['payment_method']}  
            **Statut :** {dernier_paiement['status']}  
            **Date :** {dernier_paiement['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}  
            """)
        if dernier_paiement['payment_method'] == "Manual" and dernier_paiement.get('uploaded_file_url'):
            st.markdown(f"[Voir le justificatif]({dernier_paiement['uploaded_file_url']})")

    else:
        st.write("Aucun paiement effectu√©.")


def page_profil():
    st.title("üßë Profil Utilisateur")
    utilisateur = get_current_user()
    if not utilisateur:
        st.warning("Vous n'√™tes pas connect√©.")
        return

    afficher_tokens_sidebar(utilisateur)
    
    st.markdown(f"""
        <style>
        .profile-container {{
            background-color: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }}
        .profile-header {{
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }}
        .profile-header img {{
            border-radius: 50%;
            margin-right: 20px;
            width: 100px;
            height: 100px;
            object-fit: cover;
        }}
        .profile-header .profile-name {{
            font-size: 28px;
            font-weight: bold;
        }}
        .profile-info {{
            font-size: 18px;
            margin-bottom: 10px;
        }}
        .profile-actions button {{
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }}
        .profile-actions button:hover {{
            background-color: #45a049;
        }}
        .cards-container {{
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            margin-bottom: 20px;
        }}
        .card {{
            background-color: #ffffff;
            border: 1px solid #dddddd;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            padding: 20px;
            width: 30%;
            min-width: 200px;
            text-align: center;
            margin-bottom: 20px;
        }}
        .card h3 {{
            margin-bottom: 10px;
            font-size: 22px;
            color: #333333;
        }}
        .card p {{
            font-size: 20px;
            color: #555555;
        }}
        </style>
        <div class="profile-container">
            <div class="profile-header">
                <img src="https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y" width="100" height="100">
                <div class="profile-name">{utilisateur['nom']}</div>
            </div>
            <div class="profile-info"><strong>Email :</strong> {utilisateur['email']}</div>
            <div class="profile-actions">
                <button onclick="window.location.reload()">Mettre √† jour le profil</button>
            </div>
        </div>
    """, unsafe_allow_html=True)
    
    tokens_purchased = utilisateur.get('tokens_purchased', 0)
    tokens_consumed = utilisateur.get('tokens_consumed', 0)
    tokens_remaining = tokens_purchased - tokens_consumed
    
    st.markdown(f"""
        <div class="cards-container">
            <div class="card">
                <h3>Tokens Achet√©s</h3>
                <p>{format_number(tokens_purchased)}</p>
            </div>
            <div class="card">
                <h3>Tokens Consomm√©s</h3>
                <p>{format_number(tokens_consumed)}</p>
            </div>
            <div class="card">
                <h3>Tokens Restants</h3>
                <p>{format_number(tokens_remaining)}</p>
            </div>
        </div>
    """, unsafe_allow_html=True)
    
    st.subheader("Consommation de Tokens")
    
    periode = st.selectbox("Filtrer par :", ["Jour", "2 Jours", "Semaine", "Mois", "3 Mois", "6 Mois", "Ann√©e"])
    dates, tokens = recuperer_consomation(utilisateur['_id'], periode)
    
    if dates and tokens:
        df = pd.DataFrame({'Date': dates, 'Tokens Consomm√©s': tokens})
        fig = px.bar(
            df, 
            x='Date', 
            y='Tokens Consomm√©s',
            title=f"Consommation de Tokens - {periode}",
            labels={'Tokens Consomm√©s': 'Tokens Consomm√©s', 'Date': 'Date'},
            color='Tokens Consomm√©s',
            color_continuous_scale='Viridis'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.write("Aucune donn√©e de consommation disponible pour la p√©riode s√©lectionn√©e.")
    
    afficher_historique_paiements(utilisateur)

def page_deconnexion():
    st.session_state.pop("jwt_token", None)
    st.session_state.pop("user_info", None)
    st.session_state['page'] = "Connexion"


    user_info = get_current_user()
    if not user_info:
        st.error("Utilisateur non connect√©.")
        return None

    role = user_info.get("role", "user")  # Par d√©faut, le r√¥le est "user"
    if role == "admin":
        st.session_state['authentication_status'] = None
        #authenticator.logout("D√©connexion", "main")
    else :
        users_collection.update_one(
            {"_id": ObjectId(user_info['_id'])},
            {"$set": {"otp_validated": False}}
            )
    st.session_state['page'] = "Connexion"
    st.success("Vous √™tes d√©connect√©.")
    logging.info("Utilisateur d√©connect√©.")
    st.rerun()
    
    
def page_admin():
    st.title("üõ†Ô∏è Administration - Gestion des Paiements Manuels")
    utilisateur = get_current_user()
    
    # 1) V√©rifier si l'utilisateur est connect√©
    if not utilisateur:
        st.error("Vous n'√™tes pas connect√©.")
        return  # On arr√™te la fonction pour √©viter l'erreur
    
    # 2) V√©rifier le r√¥le
    if utilisateur.get("role") not in ["admin", "super_admin"]:
        st.error("Vous n'avez pas les droits administrateur.")
        return
    
    
    # ---------------------- Dashboard Admin ----------------------
    
    
    # Dashboard Admin
    col1, col2 , col3= st.columns([6, 1, 2])  # Utilisation de st.columns au lieu de col
    with col1:
        st.header("Dashboard Administrateur")
    with col3:
        if st.button("D√©connexion"):  # Correction de st.bouton en st.button et capitalisation
           page_deconnexion()  # Assurez-vous que cette fonction est d√©finie

    periode = st.selectbox(
        "Filtrer par :", 
        ["Jour", "2 Jours", "Semaine", "Mois", "3 Mois", "6 Mois", "Ann√©e"], 
        key="admin_periode"
    )
    
    # R√©cup√©rer tous les paiements et les trier par date d√©croissante
    paiements = list(db['payments'].find().sort("timestamp", -1))
    paiements_filtr√©s = filtrer_paiements(paiements, periode)
    
    # S√©parer les paiements par statut
    validated_paiements = [p for p in paiements_filtr√©s if p['status'] == "Validated"]
    pending_paiements = [p for p in paiements_filtr√©s if p['status'] == "Pending"]
    rejected_paiements = [p for p in paiements_filtr√©s if p['status'] == "Rejected"]
    
    # Calculer les m√©triques financi√®res
    money_earned = sum([p['amount'] for p in validated_paiements])
    money_pending = sum([p['amount'] for p in pending_paiements])
    money_rejected = sum([p['amount'] for p in rejected_paiements])
    money_potential = money_pending
    
    # Calculer les m√©triques utilisateur
    total_users = users_collection.count_documents({})
    if paiements_filtr√©s:
        debut_nouveaux = paiements_filtr√©s[-1]['timestamp']
    else:
        debut_nouveaux = datetime.datetime.utcnow() - datetime.timedelta(days=1)
    
    new_users = users_collection.count_documents({"created_at": {"$gte": debut_nouveaux}})
    
    # Afficher les m√©triques principales
    cols = st.columns(3)
    with cols[0]:
        st.metric(label="Paiements Valid√©s", value=format_number(len(validated_paiements)))
    with cols[1]:
        st.metric(label="Paiements en Attente", value=format_number(len(pending_paiements)))
    with cols[2]:
        st.metric(label="Paiements Rejet√©s", value=format_number(len(rejected_paiements)))
    
    cols = st.columns(3)
    with cols[0]:
        st.metric(label="Argent Gagn√© (USD)", value=f"${format_number(money_earned)}")
    with cols[1]:
        st.metric(label="Argent Rejet√© (USD)", value=f"${format_number(money_rejected)}")
    with cols[2]:
        st.metric(label="Argent √† Gagner (USD)", value=f"${format_number(money_potential)}")
    
    cols = st.columns(3)
    with cols[0]:
        st.metric(label="Nombre Total d'Utilisateurs", value=total_users)
    with cols[1]:
        st.metric(label="Nouveaux Utilisateurs", value=new_users)
    with cols[2]:
        st.metric(label="Tokens Vendus", value=format_number(sum([p['tokens_purchased'] for p in validated_paiements])))
    
    st.markdown("---")
    st.header("Gestion des Utilisateurs")
    
    # Pagination pour les utilisateurs
    page_size = 10
    total_users_count = users_collection.count_documents({})
    total_pages = (total_users_count // page_size) + 1
    if 'admin_user_page' not in st.session_state:
        st.session_state['admin_user_page'] = 1
    
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("‚óÄÔ∏è Pr√©c√©dent Utilisateurs") and st.session_state['admin_user_page'] > 1:
            st.session_state['admin_user_page'] -= 1
            st.rerun()
    with col2:
        st.write(f"Page {st.session_state['admin_user_page']} de {total_pages}")
    with col3:
        if st.button("Suivant ‚ñ∂Ô∏è Utilisateurs") and st.session_state['admin_user_page'] < total_pages:
            st.session_state['admin_user_page'] += 1
            st.rerun()
    
    utilisateurs = list(
        users_collection.find()
        .skip((st.session_state['admin_user_page'] - 1) * page_size)
        .limit(page_size)
    )
    
    st.subheader("Liste des Utilisateurs")
    cols = st.columns(2)
    for i, utilisateur_ in enumerate(utilisateurs):
        with cols[i % 2]:
            status = "Bloqu√©" if utilisateur_.get('is_blocked', False) else "Autoris√©"
            block_key = f"block_{utilisateur_['_id']}"
            unblock_key = f"unblock_{utilisateur_['_id']}"
    
            st.markdown(f"""
                <div style="border:1px solid #ddd; padding:10px; border-radius:5px; margin-bottom:10px;">
                    <h3>{utilisateur_['nom']}</h3>
                    <p><strong>Email :</strong> {utilisateur_['email']}</p>
                    <p><strong>Tokens Achet√©s :</strong> {utilisateur_.get('tokens_purchased',0)}</p>
                    <p><strong>Tokens Consomm√©s :</strong> {utilisateur_.get('tokens_consumed',0)}</p>
                    <p><strong>Status :</strong> {status}</p>
                </div>
            """, unsafe_allow_html=True)
            
            if not utilisateur_.get('is_blocked', False):
                if st.button("Bloquer", key=block_key):
                    users_collection.update_one(
                        {"_id": ObjectId(utilisateur_['_id'])},
                        {"$set": {"is_blocked": True}}
                    )
                    st.success(f"Utilisateur {utilisateur_['nom']} bloqu√© avec succ√®s.")
                    logging.info(f"Utilisateur bloqu√© : {utilisateur_['_id']}")
                    st.rerun()
            else:
                if st.button("D√©bloquer", key=unblock_key):
                    users_collection.update_one(
                        {"_id": ObjectId(utilisateur_['_id'])},
                        {"$set": {"is_blocked": False}}
                    )
                    st.success(f"Utilisateur {utilisateur_['nom']} d√©bloqu√© avec succ√®s.")
                    logging.info(f"Utilisateur d√©bloqu√© : {utilisateur_['_id']}")
                    st.rerun()
    
    st.markdown("---")
    st.header("Demandes de Validation de Paiement")
    
    # Filtrer les paiements en attente
    paiement_periode = st.selectbox(
        "Filtrer par :", 
        ["Jour", "2 Jours", "Semaine", "Mois", "3 Mois", "6 Mois", "Ann√©e"], 
        key="paiement_periode"
    )
    paiements_attente = list(
        db['payments'].find({"payment_method": "Manual", "status": "Pending"})
        .sort("timestamp", -1)
    )
    paiements_attente_filtr√©s = filtrer_paiements(paiements_attente, paiement_periode)
    
    # Pagination pour les paiements en attente
    page_size_paiement = 6
    total_paiements_count = len(paiements_attente_filtr√©s)
    total_pages_paiement = (total_paiements_count // page_size_paiement) + 1
    if 'admin_paiement_page' not in st.session_state:
        st.session_state['admin_paiement_page'] = 1
    
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("‚óÄÔ∏è Pr√©c√©dent Paiements") and st.session_state['admin_paiement_page'] > 1:
            st.session_state['admin_paiement_page'] -= 1
            st.rerun()
    with col2:
        st.write(f"Page {st.session_state['admin_paiement_page']} de {total_pages_paiement}")
    with col3:
        if st.button("Suivant ‚ñ∂Ô∏è Paiements") and st.session_state['admin_paiement_page'] < total_pages_paiement:
            st.session_state['admin_paiement_page'] += 1
            st.rerun()
    
    paiements_page = paiements_attente_filtr√©s[
        (st.session_state['admin_paiement_page'] - 1) * page_size_paiement : 
        st.session_state['admin_paiement_page'] * page_size_paiement
    ]
    
    if paiements_page:
        st.subheader("Demandes de Validation")
        cols = st.columns(3)
        for i, paiement in enumerate(paiements_page):
            with cols[i % 3]:
                user_ = users_collection.find_one({"_id": paiement['user_id']})
                validate_key = f"validate_{paiement['_id']}"
                reject_key = f"reject_{paiement['_id']}"
                
                st.markdown(f"""
                    <div style="border:1px solid #ddd; padding:10px; border-radius:5px; margin-bottom:10px;">
                        <h3>{user_['nom']}</h3>
                        <p><strong>Email :</strong> {user_['email']}</p>
                        <p><strong>Montant :</strong> {paiement['amount']} USD</p>
                        <p><strong>Tokens :</strong> {paiement['tokens_purchased']}</p>
                        <p><strong>Date :</strong> {paiement['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}</p>
                        <p><strong>Justificatif :</strong> <a href="{paiement['uploaded_file_url']}" target="_blank">Voir le fichier</a></p>
                    </div>
                """, unsafe_allow_html=True)
                
                col_validate, col_reject = st.columns(2)
                with col_validate:
                    if st.button("Valider", key=validate_key):
                        success, message = mettre_a_jour_statut_paiement(paiement['_id'], "Validated")
                        if success:
                            st.success(f"Paiement {paiement['_id']} valid√© avec succ√®s.")
                            st.rerun()
                        else:
                            st.error("Erreur lors de la validation du paiement.")
                with col_reject:
                    if st.button("Rejeter", key=reject_key):
                        success, message = mettre_a_jour_statut_paiement(paiement['_id'], "Rejected")
                        if success:
                            st.warning(f"Paiement {paiement['_id']} rejet√© avec succ√®s.")
                            st.rerun()
                        else:
                            st.error("Erreur lors du rejet du paiement.")
    else:
        st.write("Aucune demande de validation de paiement pour cette p√©riode.")
    
    # ---------------------- Nouvelle Section : Paiements D√©j√† Valid√©s ----------------------
    st.markdown("---")
    st.header("Paiements D√©j√† Valid√©s")
    
    # Filtrer les paiements valid√©s par p√©riode
    periode_valides = st.selectbox(
        "Filtrer par :", 
        ["Jour", "2 Jours", "Semaine", "Mois", "3 Mois", "6 Mois", "Ann√©e"], 
        key="periode_valides"
    )
    paiements_valides = list(
        db['payments'].find({"status": "Validated"})
        .sort("timestamp", -1)
    )
    paiements_valides_filtr√©s = filtrer_paiements(paiements_valides, periode_valides)
    
    # Pagination pour les paiements valid√©s
    page_size_valides = 10
    total_paiements_valides = len(paiements_valides_filtr√©s)
    total_pages_valides = (total_paiements_valides // page_size_valides) + 1
    if 'admin_validated_paiement_page' not in st.session_state:
        st.session_state['admin_validated_paiement_page'] = 1
    
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("‚óÄÔ∏è Pr√©c√©dent Paiements", key="prev_validated_paiements") and st.session_state['admin_validated_paiement_page'] > 1:
            st.session_state['admin_validated_paiement_page'] -= 1
            st.rerun()
    with col2:
        st.write(f"Page {st.session_state['admin_validated_paiement_page']} de {total_pages_valides}")
    with col3:
        if st.button("Suivant ‚ñ∂Ô∏è Paiements", key="next_validated_paiements") and st.session_state['admin_validated_paiement_page'] < total_pages_valides:
            st.session_state['admin_validated_paiement_page'] += 1
            st.rerun()

    
    paiements_valides_page = paiements_valides_filtr√©s[
        (st.session_state['admin_validated_paiement_page'] - 1) * page_size_valides : 
        st.session_state['admin_validated_paiement_page'] * page_size_valides
    ]
    
    if paiements_valides_page:
        st.subheader("Liste des Paiements Valid√©s")
        cols_valides = st.columns(3)
        for i, paiement in enumerate(paiements_valides_page):
            with cols_valides[i % 3]:
                user_ = users_collection.find_one({"_id": paiement['user_id']})
                st.markdown(f"""
                    <div style="border:1px solid #ddd; padding:10px; border-radius:5px; margin-bottom:10px;">
                        <h3>{user_['nom']}</h3>
                        <p><strong>Email :</strong> {user_['email']}</p>
                        <p><strong>Montant s:</strong> {paiement['amount']} USD</p>
                        <p><strong>Tokens Achet√©s :</strong> {paiement['tokens_purchased']}</p>
                        <p><strong>Date :</strong> {paiement['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}</p>
                        <p><strong>M√©thode :</strong> {paiement['payment_method']}</p>
                        <p><strong>Justificatif :</strong> <a href="{paiement['uploaded_file_url']}" target="_blank">Voir le fichier</a></p>
                    </div>
                """, unsafe_allow_html=True)
    else:
        st.write("Aucun paiement valid√© pour cette p√©riode.")


# ---------------------- FONCTION PRINCIPALE ----------------------
def main():
    if 'page' not in st.session_state:
        st.session_state['page'] = 'Connexion'

    page_courante = st.session_state['page']

    # On route vers la page correspondante
    if page_courante == "Connexion":
        page_connexion()
    elif page_courante == "Inscription":
        page_inscription()
    elif page_courante == "Mot de passe oubli√©":
        page_reinitialisation()
    elif page_courante == "OTP Verification":
        page_otp_verification()
    elif page_courante == "Reset OTP Verification":
        page_reset_otp_verification()
    elif page_courante == "Google Login":
        page_google_login()
    elif page_courante == "Accueil":
        page_accueil()
    elif page_courante == "page_admin":
        page_admin()
    elif page_courante == "Chat":
        page_chat()
    elif page_courante == "Achat":
        page_achat()
    elif page_courante == "Profil":
        page_profil()
    elif page_courante == "Deconnexion":
        page_deconnexion()
    else:
        page_connexion()

if __name__ == "__main__":
    initialize_session()
    main()
